node {
  name: "Cast/x"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1024
          }
          dim {
            size: 10
          }
        }
        tensor_content: "\026\277\037\363\026\010\343?\300\361\"\270p\364\314?uS\261\332)-\347?W\312\025\212\266\316\354?\014\231\372\350\\\276\313?hOL\367\201\334\271?\270\206\350\257\026\004\346?.A`-\266\255\330?\316\217\257\206\360\336\337?\022\034\021:}v\336?\\\233\223D-|\347?\017\036#B2\321\353?\000x\034\350\207\201\326?\357sD\221C$\357?~\206(7\032\364\350?\312]M\205\'D\357?VH2n\3453\337?\314\2216d\'\235\351?6o\306A\345\344\350?\361\211\006\201\216\265\354?\010L\310\326LT\265?S\216\343P\265\304\341?\224\0049\214\207\372\333?\251T*\334\310\346\340?\226B]DL,\325? _\356\037\024\306\317? \"\320\226\230\201\227?\227\361\3021\334c\352?\020\230\205~N\016\343?\344z\"\320|\303\320?:Y\001\367\311\261\324?\014\'7\251\310\327\307?\300\030G:8g\242?F\315\311\277\222$\330?\\+\336\036\364L\334?H&\217\364\262\316\271?\016\276(l\327K\323?\234\032\014W7\312\326?\224Fg\314\213\013\351?\200\235\306<\201\360\216?\222\003N\357\315\216\322?\243\320\r\306\034c\351?\362\200\n\2568\177\337?\240\224\217\375\201-\343?\276\260X\210\341\005\353?\335\230\256K\022t\356?CF}\352\360\371\350?\3143\216oTj\356?\306\360\002I\rU\353?\336n\002\301\375\335\342?E~N|\334R\342?3\004\266{\230=\343?\240\006\305\243\310\201\246?\252\363\355\250\035\231\354?1\354\007\300\353\243\340?\372\025Tl]\024\323?\321\303D\237Z\250\343?\244\355\316:\177N\350?\2477\301\304\r\346\351?\305Z\000\251\342h\344?>\235.*\360I\353?\232 w\004f\250\340?.\333\344\372L\244\344?W\310[I<x\352??\3745\340\342\365\341?C\031\244\354\'\203\350?Z\311\004(\006\310\331?\017a6\311\237\256\353?\004\262@n\371\327\313?,\024\310*q\360\337?+M\002kE\332\357?$;\236l\307\r\316?\250\264y\267\304\212\340?\310\332$\271(\314\305?\030;H \337\034\336?b\244\333\224H\202\332?\240\266\201\035\n\342\356?\374\031>.\301\013\321?*M\336\332\360_\357?\007\316&\303r\372\355?\305t?\265\235\213\342?X\273\322S\004\276\353?\262O\320\0076\305\330?\330\306!RRw\332?\370P\"\2040\302\322?P\324\323\017\317\266\272?\232k)\212H\363\336?\214\265\177\342?\036\304?@\336\302S\034\232\326?0\356\345N\000!\240?\026\010*\251\221\273\347?Z/\337p\257\222\325?\030)\256\230\3466\317?u\245\203\257^u\350?\322\n\n\301Vu\357?\235v{\242\205F\344?X\301\023\036\366B\266?\225\032\335\312\357^\355?!\021\032\223nF\354?\266\006_\0002\255\324?\300\031\351\3022\335\344?8\354\315\377\217\203\335?0\223og\263\364\277?HBs\316#\317\302?m\376`\016~l\357?\264\032\210w\315\356\350?\010\253\002\250-Z\356?.\257X|\356\003\340?\212V\302\323*L\320?h)\265\026\356e\352?r,XA\342\026\353?\001\357\177~\033\243\347?\376DGf\247:\352?t\330\027\377d\200\341?\224\246\n\007\256\361\341?\327\267\203<\261$\343?\360H\274\2029\331\261?\213\003d\202\251U\351?\030K\343(\377M\354?\000\240\031\260\333\324\025?PQ\223x\344\350\302?B\344g\256F\316\336?\246\207\375\275\023\302\337?\300pqhE\374\225?\272c\227\265\257\356\347?L~\034?\270\262\325?\342\347\373M\001\333\331?l\363\345\256\036\253\325?(z\324\225\375\357\314?\225?\214hw\"\355?\211\310\357\262W\250\353?\371\206\352HG\026\343?\372w\200aN\270\334?\250bO\267\330\346\344?i\337\005\r\227\320\353?\371\210\240\236\255\010\353?H\025+\307\207\237\307?\'\210TiD*\350?\374Y\022R\251\356\344?\234\026\"\366\377\346\330?y\304\022\314\014\276\357?G\341|\333]?\344?\244\271\334\311\353(\336?\'.0\366S/\357?I\223>\345{\376\341?2\020\203\367>X\334?\240\367\271\'\227\301\330?\245u/`\241(\344?\326\351\241\352P\316\336?.!\337\301%\305\344?\200\254\016\000h,\236?(\261A\306-\361\325?2B\314\330\nP\335?\374[\373e\317\267\332?V\n\275\332&\230\353?r*\372\352\026\000\323?\336<\307Nk\203\327?\260\202\276>\010\274\324?\360\371\260\3111\234\310?\260h\223\021\367\345\332?0\317?fa)\335?\204\354\367\276\'\361\351?\236g\312jX\033\334?F\020\273\007\307(\347?a\211\0075\0160\345?x~\251\007\340.\333?\030g\204\266ym\312?3\261\002\234\202h\355?j\341\372\"E\371\322?\342\317\216J4s\337?\240\351J2\242\274\321?\037{?\335A)\344?\233S/5y\227\341?\370\326$&t\271\277?\277\236)\320b\000\341?z\3531\300?\226\336?\201\2263\304\215\032\350?\314\306G[q\375\346?\375?\267Fq\236\346? 4\336\362Gn\324?d\205\0042\271\366\347?\371\274\007\236*\211\354?C\243\263o^\350\353?\2365\036\301\270\306\320?%$\375\t\301q\351?I#\221\'\313\021\346?/\r}`>{\355?\364\250Z\233\374\324\352?\220\231\303\265\332\023\262?\300\035\344E\250Y\305?\355\324\246\351I\211\342?\035%\006$1@\341?e\311\357p&\006\344?\033\031\274oE\336\351?\3260\272\226\364\032\321?\000\336Ip\373\030\320?\340z6\257A\263\246?\337\010\345\350\241w\341?:\210?\246\261\232\347?\273\317\034\204\234F\345?J\221\347d\367\033\335?@\002D\257\225V\230?\336o\257(\205\033\337?\356\033\324\241\370+\350?\204M\324\016{\340\343?\350\337\013\332V\351\337?W\305\366\206\326\200\346?<\356\001\004DY\342?\333\273\005T\305B\347?\247TJ\212l\212\356?4\023F\223x\301\315?MJy\300\300!\354?\270\320nk6\367\354?\364T/f\217Z\342?\343\351v\322{\332\345?0\273\260\004\371\324\267?\247\223-\360A,\352?\371R\031d\235m\355?4\253b\006\206\034\311?jc\331\233&\366\325?R\007\254\335\337\314\322?\211Z\264R\230\\\351?\367@c\277\023\306\345?\227Q\035Q\227o\344?\207iPX\274\342\356?\332n\252u\312p\333??\036\337\007~\034\350?a\337+)P\345\342?Yvl\201\\\362\346?\361\306&l8Q\355?\n\336Ma\023\257\345?\234S_{]\366\345?y\315\177\034^)\351? \022\031TY\205\236?0\314oG\220\330\311?y\300\023\000R\234\343?\247\177\205\246\021%\357?\243`\255\230\033F\357?\022T&=\003W\321?I\266Z\022\033\345\343?dv\347\021)\257\321?\260`\321Qlr\317?\374U(f\375\032\343?.E\2475\223\317\347?\366\356\205t\302~\333?\270\306\221\220B\356\356?p\276\000\376O\r\261?\266r\276\2525y\326?yy|yz\272\355?|\316\332eEm\300?\250n\327WX\256\265?\254)8!C\265\356?\220 \370\000\237\276\342?\374\320\"\373a\374\350?\262\267\320B\353\\\353?\356)\025Y\223\243\335?\202\"\307V}\336\341?H\364\204+\323\366\316?1\251\215\245\206\226\350?2\005\000h^\357\355?\020\210\310Q\314?\304?\010\252\027]\220\236\306?\200DC>\330\227\206?dM{\302\377:\352?\353\307\333\036\322\241\352?\370\246\207\223\245u\335?\270^c\350\253\351\310?\212\364\226\304RR\351?\200\231\2720Y\345\303?4\273\005\262\300\024\345?^}Zw\033\255\330?\306\024|.\211\214\326?n0\340\226eB\343?\374\2659\370\277\322\346?\020\254\316t\270\333\277?\240\364\035\243\327\215\261?\200\334P=\257 q?\034e\365\207\006\324\340?\031\225\025p6\264\343?\307\222Q\t7\202\357?\021x5\372\231\033\355?\275\t\023\317\004\315\354? \320\026\201\005|\350?\3624\263\370t!\333?\350\260\244\322\356v\336?\217d\303\266(\213\343?|\246\"%\332h\322?\206a\362\3459d\323?\343\251\0017\237=\355?\000|\304\3636 P?H\331#\016pI\272?\374\344,\361\226p\342?\3009\372\"\362\345\240?\3369[\373\376\203\334?\372\266,\220\347\n\330?\n\330\216Y\311`\337?\224\351\262Gk/\306?\014\245\363%\2437\315?v\233\006\222\243\317\354?\262\232\364\311U\340\321?\022\335C\326`S\345?\024\326\320f\344=\356?\200\355\2513P\215\332?\322\214\213\262\244\301\357?\207\261\004\341\256\005\352?\001\345\204\305\001\002\356?A\337R\202q\334\347?!\311|\216\2138\343?pz\350G\372\210\275?\210Y\261?\255G\266?\236u2\377\220_\342?\256\246W\232;\023\345?C\300\224\325E\016\352?^\362%\253\022J\354?\350/z\356X\271\311?\264\324\312\217\313\227\304?5\207\276\271\253*\357?\304\207\255\317\254k\345?\234(p\364\324(\343?\320\003Y\255\271\221\256?\300\306\261E\341\004\321?\241:\352\227\357\224\347?\022T\177\343\t\214\345?\254z\331C-\025\351?\3108\337\346Z\204\262?\200h\262\313\n\252\344?\034X\021\034SG\333?<\303\262\354+\'\353?\372M\321v\"w\323?\205?<&Zi\346?\034\244\025\311\257?\331?[\2417OP(\347?&\3574\025\274?\350?\020\363\276\356,\243\352?6\2411\003\343\237\345?8\244<:>\225\340?%P\301b\241\342\350?\360\242_\016\275\346\351?l\2263\316M2\335?(\336\335\0213o\345?\220\274g\n\330{\312?\262\217K\367\343l\357?\343?\\\235\267C\357?\365Rw\304\316i\357?\3320\253[\003\257\344?\000\320\224\270\373\231\350?x\014\225g\257\340\302?C\006n\312\037\301\340?n\333G}\217z\336?t\204\370\312\2607\324?O\253\304hh\331\343?\200\302\020\275zI\250?;\3711\347\226&\352?`\245x\236k\206\321?\030\375\202\303@\020\347?(\353B\336\\[\267?|\377v%\327s\346?P\021\370_Kl\333?\007p\241\326\362\234\343?\257\326#\0140V\357?\252\0022?\242\337\332?b\263x\220\000\331\346?x\310\274\325=\222\275?\337\003\332$\337P\345?y\202\314-@m\353?\254\336\361\276\010$\324?\252\n\021\230\357\337\333?%\022A\270\036\235\351?\370\017\350\303,1\323?\326m0$\312\301\332?\230B\005l\207*\327?\037\025\313\001)\235\347?l]\254&6^\306?\374\006\364\336\203\332\355?\267WW\374\217!\343?\341\241G\274s\373\354?\374\025\343T\375\002\347?\272[3\255\350\337\351?\256\325\312c5\n\332?\234\357N\375\010\305\305?\305\013\216\261\3414\353?lF\255\326\237\336\311?e\272=b\030\020\342?\345\266o%\304\205\346?\300U\242\322\255\224\277?|#\n\300\237\262\324?\3602\245\364\361W\322?%L\212\205\374\313\356?l\327\377Cr\347\341?:\000Q\263\201\320\354?\\\305\320.\325~\310?vG\026\212\271\t\344?|s\362\266z\366\345?\300\036D\317\357\352\355?% =\2228\"\357?P\312F\270Yo\341?\250q\355\033\375\316\300?\024\035\275s+\252\314?\230\361C\357*\206\332?\304\220\207$\311\210\336?@\311\334e\"z\353?\276\341[\032\202\235\342?\276+\356\226\033e\347?@E\233f\202\354\307?\344u\344\006\217\250\313?\370nW\"\340\014\272?\373\371\253\322\027h\344?\324\035\204\2241\227\332?\374\372L\341p\r\332?\360\324\251f\2604\267?\370\242\003\371\340\005\316?\000\036a\033\271\005\354?T7\340\377\227~\313?Z\376F#[\217\344?X\036 \345/8\313?xe\357\215\275\036\355?$~G\003\0067\327?p\211\257\263\373\034\353?\244\3002Nw\'\306?\224\365\350\014\310\307\314?\201\024L\205B<\347?vy\360\223\302b\355?\177{\007P\374\212\341?\370\335\316\357\337~\323?\253\332+\277\2503\352?,\340pd\302N\302?\260\211\246\234%\313\335?w\361fR\372:\342?\375X\005\343\334\036\356?C\244)9Y\037\341?~*@z\322\347\346?\377\270\356\303#&\341?X\253\364%~\265\336?\272>n\254M\234\330?.8D\304y\361\353?\002P\024\210\364/\354?\244\212\366\260\337\027\354?\324\253mQ\037\026\313?\001\000\310\322 \020\354?\311p\273IF\215\340?\024a9c\274o\311? ~\027\035Z\260\267?\267\0304E\366n\350?\220}\236\227\233\323\347?2\313\364\236\360!\341?4\230\271\025\300\001\355?\226<j\033\302\316\345?\230\330n\033x\222\311?\340\314\226\004\006\355\326?nAy\214\305\022\334?D\324T\210\021N\300?\230O\245\0354\313\262?\',W\024&\'\355?\365\034\234)\322\026\350?@(\231eMd\347?\244\366N\373|\226\347?X\2541L5\"\325?\2728[\032\026\350\322?m\337gb\244\263\357?sn\220\255G\205\354?r\326\305\\\364\355\326?vh\354G1\254\345?(M\333S\245\355\327?O\322\036\217^\230\343?\014\3449\240z\373\305?\272\225A\005\214\277\353?\332\235\031\231\365\275\334?\370\177&\346\252\371\342?s\331\250\"\005\331\342?\240/s4q\326\324?\366w\355\\\236\353\331?#\231\313\341\253r\353?\020<\371\330\226F\242?\357\375\254\355\275\010\346?1\367!\262\265\004\341?\336\243\001\223w\301\335?\204\227\242\223\334\003\313?\241\365\007\343:$\354?\036\304\375\352e&\340?T~\305\242\207b\306?H\245\177$&t\302?T\250\025\215<\357\311?\205|\324\026\354\327\341?\220\304>\005&\300\274?\370\031@u\225\025\304?\334\221n\036\342\322\333?\030>GY\331\313\303?L\343\361S\001N\337?,H\016-\316\332\354?{v\211)AT\357?=b]\275\361\321\355?\000\305Y$uc\265?p\357F\223\243\021\335?0$\342\340\226\364\321?\310\036Y\0367{\330?\306\246w\371\342\224\336?B\275[\225\177\017\322?\"\263\243\342\010G\356?\223\214\367\020\336=\344?n\237Q\211h\212\321?\321!\303\326\017[\357?@?\201<\003\271\230?,\212:\3177\370\326?\\\323\246L0\265\331?\377o*\224\202j\350?u\202g\210\262\372\351?|\314\030\020\021\027\345?\360\010\361\351\376T\240?\\C%\'\272-\350?\252o\330\220\211\217\327?\367\024\270\202*U\341?\2103?\360h\233\336?\255\207\275\031\2478\347?\030\024\374\213\230\275\327?&\013i\325\353\264\330?\340\262\212\016\277\345\342?\314\224\243\366\256S\321?\360\337M\376\021}\266?\300\370\350\352\265\314\225?X>\356\214\270\304\354?h\214\347[$\371\346?v\320\277\377\265\313\351?\344\235we\275\364\354?(;\211\001}^\356?\363\346pj\342\333\344?0\311\307h2\343\311?\210\361\260\257\004y\262?\027\270\370Qrt\356?\030\022\350\345a\304\314?B\271\260V\321o\354?p \210V\'\325\313?\034\341;\013\001R\337?\264\336])t\215\313?\243RPV1\306\350?\010pjSe\007\263?~\331\006\325W&\355?\353\224$q\331\304\351?\313\035#{Rz\352?@\034\270\036\225n\266?\366\245\346e\007D\340?\303Z\374\273]\242\355?\340\2723\3479L\307?\375A\321\234\030\313\356?\234O\r\r\357\370\347?\004S\266\371\360x\342?\000\316\242\374\311\356\270?\262\364O\037~\256\345?F\376\003.\320\237\323?\270\255\345(A\260\311?\203\361~%\335\214\346?\001c\301\0241\254\343?\352G)S})\342?\334\300\361\222\237\007\344?\327?i:\007\270\345?\032\306k\243\260\356\325?\340EG\206\341\374\275?\252\232\3029\247\323\357?t\202t@\205\313\356?\230\026\273a2\231\301?a\030\353\336\014\010\354?\332\255L\377\323\273\325?\002\245\213\260\377\305\342?cg\327\022B\354\350?\014[\353\352d\220\354?8\223\177\235\353\375\275?\364\355\215ka\215\345?\254\r\232u\321B\325?\031\247s\226\307\333\345?\343\202\222\215\322\345\351?h_\323}|\024\355?-\027\\=1M\344?_\317\274\362\3508\356?\210[\271x\276\337\263?\322<{3\247\336\357?x\341-\020\247\350\354?\322\315\301\301\024\361\355?\020\000\203+U\362\240?h\260\033\210\320\335\343?\360Z\367s\201\257\264?\370c1\207\317\306\310?\216\260\341Zs\016\340?\2602@\005\003\025\263?28J>2\333\333?\200\256\373\320\362>q?\275\232b\343\351\201\350?\314\317\260\232v\363\306?.}_\207\005Q\342?\0209\225\275\224\031\300?!\326\034P\217\330\352?\244\265=>\031&\302?\276*/vr\033\343?\304B%H\234\317\304?\251Y\313\207\223\221\357?\327\3358\022\274=\350?\242e\311\013\276>\356?@\003vOTU\313?r\014fV3\200\331?\310\323\204\265z?\326?\200\003\013\016\337\"\277?\350\'N\331\250\371\307?\300(\241\366\t2\267?E@-\353\035\374\356?\3246\014!\345\331\324?\374\033d\374\264\337\313?\270\331:{\233\033\325?F\344\241\017\316\312\324?\332\007\276\251\225^\321?zS\021\367\314\314\346?TC\014Hf\337\347?\027S\357\2121_\356?\204\014\2005\210\275\356?\301\305\354%\342\351\343?,z\375\257\334\034\307?\3118\270\365\233\233\350?\024\237\343\351\207\252\325?\264\250\036\314d\006\350?B\306\254X9\016\324?\250\311!\230C\031\341?7\242-y,\217\356?\213Z`\205 #\350?\333\036:\331\3055\355?\372\213\371\253^\257\353?\225\2739\013oM\355?\214\355\345n3\214\330?v#\224\024\230\351\333?\014\\u\276\324\307\315?\213K\213R\037\210\354?\351u\2055^\250\355?\310i\203\206.\025\300?\212\232\347~0\343\324?`\'[D\352-\325?)\177\236\366\231\261\356?H\030n\244g\253\353?\010\177\216*\301\r\275?\3673\016\335\301z\353?\305\267\306?O\241\352?\000@\251C\232\233\030?\351<s\361\260s\356?rf\234\262S\255\341?p\032\347-\262)\250?(\332\030O\014\341\333?\204\001\257ZD\037\340?9\310z9%T\355?$r(\325\277o\341?\n\222\360\t5f\321?\320\002\267\3039\350\263?\237\332\337\255\005\253\342?\254\360l\345\313\026\354?~pO\211\313x\322?\350<\246\230P\022\330?\360\322\212\212\323;\331?\254\370\302\202\272T\343?\256\024\316J{\367\340?\302\251\313\346\247[\324?\234\351 \353\213\033\304?,\331\335\024\367\331\302?\273\376-\265*.\342?\361=\301!\326\233\357?\265\247\316{\245\025\352?Q\336\371\253\210\307\343?,\371\303\257\344\266\316?\223\253YQ\303\201\347?\340\345A\275\032\034\251?\003nk\337\024\311\343?\250\r\343`Y[\276?\2506\237?\206\023\332?\273\373\037\3454}\342?\304\367\3177\241\277\350?\374+\256\335~\303\301?\n\341\203\010\353\352\346?\375\177a\210%l\347?`a{\374\257[\232?q\227\373\342N\264\357?\376u\023\331\034\247\347?\245\327\226\331mj\343?\346$\357W;\223\325?(\231\215\024\267M\276?F\304\332=<\356\335?zYHzS+\357?N`\245\257\222\326\355?\334y\201\205\367\257\354?\010[zZS\364\335?\360=\203\014\327\244\277?\010\023\276c\037\365\303?P\360\313\030\\\363\352?\351\360\032\013\277j\340?8\210\255\344\233^\355?(\266\316=\364{\331?\254g\233\274(:\350?\267\250p\260o\031\345?\350q\007i\234\021\315?be\250\317\3410\322?`\276\017\305\260\343\222?\3365\'\014d\014\340?\332\210n\026\023\324\335?\014\010\215z\205\336\305?\2429\245L\246\006\355?@\341\364E\244\344\276?\252\315\344\010I\274\324?b\215\036\215\004\272\331?\307\324` o\335\350?\370\362\030\033\375\030\271?9\024\'\340h\252\340?\346\261\177\310\314\322\353?\315W\246\360\231w\351? \005\314O\017n\326?Y\220Q\240,\242\347?\213\027>S\272\260\346?^\275\353%\021\332\332?rG\323\345ST\330?\n\314\255\336;\016\322?\350\330C\034s\371\341?\356\301\r\000/\373\327?\204b\211wvI\354?d\030\220j\357\354\333?\200\2727E\013\342\331?(\202*\277\001\202\304?m\327\235FU\340\350?\'M\360Y\2025\347?\305\240\256|3\254\352?\314\356\351EF\337\351?\215\354OyL?\354?\234\362\355\\qw\357?\331\037\356\352d\301\351?\321V\375.2\024\352?\200\327\206\207\345zr?j\034\357\316\300}\345?\3456\324\374\323p\341?\210\212\203e\t\322\275?\360\"J\240\325<\276?\021\344\225S\337\r\347?\302;\302\025A\006\325?\000\370I\240M>Q?8\014\350J\232\310\325?\277\361\245\210u\226\347?\030\313\271r\273?\317?@[\332\203\371\340\254?\201\206r|\202/\344?x\364E\273Rs\260?w3\356\347\354\345\357?\256\006\365\356\033\316\323?\350\306I\316\331t\276? \005~\235\226\232\330?(\341\207\216^D\347?X\273\375\360c\265\332?\220\267\215b\231J\305?\210\274]\034\264]\306?Qp5\220\314b\342?0&\303\264\251\265\274?~\205Y\347\344\223\337?\300j:\'3\316\231?\364\004S\020\264\351\356?H\212\266%>\315\341?\300\360;\220n\332\245?\3110\233d\021\325\354?(7\277]c\372\334?n8i\350?\206\353?~\211f\312\360\033\357?\320\307\227 \307l\312?\205\313i.x\376\343?\211x\337\347\212\333\356?\210\3661];\247\354?\236C\223\250\300\030\347?\200\233\231\024\267/z?4\200\026\221v\007\326?\341^\317\003JJ\354?\032\302=\032i\242\326? \tDo2\236\341?\2303\030\340l\000\345?\324G\027\'\336\365\322?\1775\366\257ef\345?\203\245\231>\371P\357?\242\347\337\267\243\027\333?y\332\024\205\004v\353?\277\014{\274\202\031\354?W\214\212\006Mj\350?\334\300\230\321\224*\344?\000\376\347\3729\003\352?\3302x\216\r\307\260?\244c\t1\210\363\332?\200\021\277V\350\246\201?\363\254\231\324\357\021\350?\r\312\373\223U_\346?v\3534u3\371\355?\305^53\366>\356?\320M\311\255\345\355\254?C\255\236W\007\275\347?%r~y\307\267\352?x\311S~S\253\350?p0\261\020\r\r\276?\233&\t\014\264\303\352?\334\027\013\020\250\303\324?\340\337\n\215\234\225\354?\354\332\274\036\3300\340?\270W\333\255\365B\337?\274\326\301=FL\303?\260\210c\321\024K\276?\002\215\216\343@\374\342?x\276\336GpC\333?\014&!*\310\376\331?x\253\204bY\026\334?\232\274\231\255\377\221\333?x\313\237l\2566\346?\255\337\025E\204\227\350?\352\335x\366\232&\355?\020W\253Bw?\252?\260\345\360\352\3039\356?\r\246\031\241i\223\346? \227\251\350\307\373\276?P\2251\n\371S\301?\300\274\363c%i\300?\270`\276\361\217\360\346?JR\353\376[\n\335?\344k\202 \221\030\330?L\271\016W\327y\345?\325\265\327s\225\243\340?\240\367\226\t\371\225\223?\372\231\344\252\265\326\343? %\206>\254\033\316?\026(\010\036 \212\337?Z\365G5\006T\342?\332p\304\240\334\226\332?\354y\214\302\003\235\331?\202mys\tl\324?\310\331<E\341\362\321?\006o\323\227\257=\356?\246\307\202\351\370Q\334?\332O\007\314\2439\353?xT\247\341\027=\335?^\265\253\317X\313\336?\274\317f\203\213q\336?\250\243\270\215\375\257\271?h\252\245\365\375~\265?\222\303\311\245;x\356?\350\363AA\017R\265?\010\017K\r?\250\311?\320\260\333V>~\335?\240V\222\235\220\203\327?\370G\264?\013\275\301?\016\264E\342H\251\346?\033\003\263\355\257\000\344?mF\014\221G\247\346?(u\201\353\302\261\347?\"\337K\000\277\031\327?\342\325\202\226\037\235\345?C\334\225Q\311\213\341?\302\320\343\217\203m\323?\222\024\352\244c\226\345?\\\262S\022<s\352?1C\354\326\341\313\342?\326R\266%0&\344?@\005+\3454j\210?\234\221\340\203\257\233\357?\036\242\266z\243\272\352?\345\334\314B\032\221\350?\000\330eI\257\212\330?\253++\330\236%\340?2\320W.K\254\332?\274>a\005\007b\325?\'\000\305\352\211w\344?\032\027\210s\3301\335?X\276\270\361c\232\275?\201\341\265\301J\310\356?\036\307D\"\265\224\346?\000`d\246)\235%?\2323xd\255\371\351? \220Re\352,\274?P\272\014\005}\220\274?\003\373\262s\0263\347?`\010\253K\236\036\251?\364L\276R\216\024\327?\006\326G)\356?\336?<\010\035j$\303\344?6\377tOt\032\356?\304$\013\377\033>\332?\210~\026Z\306F\304?Zr :\363\027\332?\266\265\305\324\335\032\347?d\002.\250\264\356\315?fZ\007\313\345Y\343?$\314\236&P\267\314?\036\037R\240\205\021\334?`U8P\334\016\262?&\336j\313\303t\333? \221Z\345\317\322\346?\2265\373\244\354$\337?\250d,\242\002\271\276?\344qD\327!\237\354?\222\376Qf\354_\347?\307\275\233^\026\217\357?M\375\232kR{\340?\204\363Yj\032_\354?T\250\202T?S\351?\3427\205\264\261\307\325?(`\362<X`\305?\344\260I\300\031\370\321?`Ce\210\307\r\316?\034\rV\371/\261\322?q\243\tM?|\343?\350,\023nL\377\262?\344\355Pp\366\n\324?\360u\0337\361/\256?\266\212a:\324\247\352?x\343\317[\224\202\334?\377\341\263\235R\271\344?\242a\361\020\253\231\331?\200\026~\304Of\231?\031Z\010\223\342\255\340?\034\227\353\025*\224\306?cA}!\334\341\341? \265p\337\2474\302?M4f\025\372t\354??\035<\257\243\343\342?\200\030\367\237G\373\251?\\\032Bs\033\200\346?`(K\323H}\311?h\373\371\223U\273\305?\214rG:\204\351\335?.\324\227b\206g\326?\207W\rI\366\203\345?\334\326g7A\221\305?\300\211_l\221\316\323?\350\335\271\312\222%\326?\360\025m\220\245L\355?^\304?\353\023W\341?\306\275s\232\323<\352?1\3576h\276\260\357?\000\326\325\272j\275\235?`\325\321\3137\002\314?\037\204y\0134\270\340?f\2667\276A\315\336?\010\001|\335$\\\350?\200\310\263x\306h\342?\355\326\3603\000\272\353?(\362R\327\305\300\355?\241\001\351\376\035\333\354?\322\325\257[\210`\320?\304\272\032r\244\037\356? \217mMt\016\226?\"=\224\326\035\r\323?v\347\362&\017\350\355?\360\315{\025\215\254\262?X\217\351Q\006\342\324?\220c\250\343Y@\246?\236\211r\216G\034\321?\310pz\"\362\000\354?\030\224\200\335\253P\356?\226\320\022nT\211\340?\211\234Dhnt\346?\234T\244\277\271\367\334?\024\267\312\376\217\203\342?^P\004\036r\344\337?h\211 \314\3003\304?`\214\332!\320~\336?\354\326\315\017R\270\321?\000\235^+\252\004\265?\360de\353>\371\240?\350\td\252W\221\320?|\200\024\262\370[\336?c\006\3624J\372\357?t-\240z-n\341?\254\250\t\243D\230\353?\334\216\242\270\347e\335?\024]\032\247/\246\316?\220\203+\324\232\027\326?1\342P#\320\222\353?\000\245\267\325\320r\320?\200\001\252\267\365\221\260?\242\237#\344!\234\356?\326\000M\301\224\243\342?\376\371\034\315hs\332?\312d\332l.P\355?\217G\347\346\317\264\344?\342\333\330\227\017\244\336?J-\267\330\270\032\344?@9\265\370\231\275\245?x\234i6\236$\331?\340\262|/\036\013\353?.\270\266L$&\332?\335p\033d\361\315\344?&\253\022\306\\\242\320?\260 \002\034\000\341\264?\034\317.\202\322\326\314?\233\037\016b\323\030\347?B:\325\233;\317\321?\2044I\247eI\332?\256\037eHr{\332?\210\305`Y\031\r\310?\330\325Km\377\036\334?\371\233\345\t\257\356\353?\270q\234\343M\330\342?v\210@d\317\370\330?\350\0109\331z\030\270?D\216\232o\022\351\312?\322z\363\204L?\324?\014\320\307\270\324G\357?<\374\302/?\016\302?|*\3379\023\256\323?I\354\356\305w\345\346?\270\314s\004\334\033\301?\024\215CH\004\342\302?\350\217\231?\226f\346?I\213M\204d\334\352?D\345f\020+\240\317?\032z\nZyn\357?r\222\364O:\334\327?\276#\036,\230\260\331?\302~z\335\337\020\337?\260\032dQ\340w\310?r\230\320n\313b\327?0A\005\031\262k\244?\375\255\254\300\320\177\350?P\243B\375{\266\321?\000R&\273B%d?\230\231\324\325\243^\343?\016\016\017\365\274y\342?\344?\001\302\306\371\346?\226\024\205\254;x\346?\373\203\214gf\322\343?\234\356\347`\n*\356?N\037mX\275\246\325?\2003\013\375\236\213\220?\232B\242A\225\341\320?r\265\232\262R\350\322?v\241\215\013Xd\346?\210\241\352Ex6\311?K}KpA\252\343?\244\222\330\247\331\346\333?\235\266\273H\226P\355?\263J\266cP\261\340?\236SX\367\273u\346?\3102\273$\304\207\275?\312S\245\324\247\340\350?\007ieQ\005j\340?\274P$\035w\010\356?\220\200\215\025\333\261\262?``\271K\331\030\264?\364-\257b\243^\326?t\305%l>\246\314?H\277\212\tH\371\356?hA\330\242\037O\327?\n\370\317\016\223\342\357?\304\005\030`\327W\312?\364\244Q\231\320\260\341?\324\220D1f\237\331?\034\234%1\230\233\321?\356\327\224bW|\357?\264\205!1\316\300\346?@\224\rX\355\270\201?\020h\265\315\031\373\304?\227-\361}~9\351?\240Q\254\371\200b\221?\270\267\215\263n\237\327?,q\033y\334A\351?\213\324\353\004\373\303\350?\312u\204\017\2215\350?|eKz\267\244\313?`|\274\312\007\005\253?\001f\315\001-\274\354?H\0054\227\'\273\324?^\032v\201\251N\335?\330\275g\261\003E\260?\234F\"\207\013&\356?\323\211\366U\000T\354?2W\224\374\377\330\345?X\333\021\310\023\253\340?\255k\215\225d\030\351?\364\313jX8\214\337?\336\035\022\364S4\336?+\224\264\372\360\320\356?\354\214\271\030qN\323?\000\021\364\236\233yf?)O\211\251s\353\354?8\276\320^sB\326?2\373d\353[?\343?\256\342\375\364\036\226\353?\205}W\234]&\352?\020\353\004\231Z\256\251?&M/\361)s\354?<\247\2145\\\237\304?\310q\354\261\270\353\276?\242sS\241(\001\341?\3669\325\302\3564\321?\330\364\201\033O\270\324?\304\372/b\303\374\311?6\250\336]{\207\351?T\261h`\246\277\301?\035\322\3607oj\346?\200\306\242\017\255V~?TDM7\010\340\306?\353\307\301b\327\347\353?\3679\300\\4{\341?\256#\344\2371\301\347?\217\013\303Yc6\353?:\360e\302<I\321?\256\226\202\352ac\334?nve\306;\017\355?\020\362y\346b\350\334?\246\r\272\3777\177\356?\020\227\260C\235>\304?)\201Z\302H\360\352?\200%:r\343\026\226?\327\363GI\227<\350?\035\311{\321\274\211\341?\374\303]5&s\322?1p\337\025\311!\350?\267Xg\335l\365\345?BX\326T\252\002\331?\255\352\305\365\370\246\342?`\345E\030[J\333?\223\n*\353\324\361\341?e\3122\200\035d\354?($\027\347)=\260?\310\216@r\034L\331?\363\273\314\036\032)\355?\324\327\356\005\342\315\341?IF\264Zg\027\345?\260%\002\237\232\255\252?^U\023K\3265\333?\004{e\366=\272\307?6N\223G\207\210\346?@\240\027\253|E\344?ho\035\322\017\002\300?\342\265n\356\'\334\330?{\335ckc\016\350?\240\332\347\345\340\324\232?I\312\213\343\341\017\345?\325c\376\376\246-\342?H/\304\037\214\036\307?@\3468\365\243\255\264?\207  9d\244\350?K\t\326\024\016\344\354?\343\237;\032\023\317\355?H\030\362$\321f\270?\370\362z\262\006\323\267?\233\365U\352$\002\351?\343\344K<\237E\357?=v\006k\320e\351?\324\324<\230\207\215\307?]/7\340\\8\341?\362\201+\223\300\212\353?(\025\2073y\377\315?N\331N),G\337?P\235\003Ft\330\246?\315\215M\313R\000\344?l9\313\244\276\267\324?P@\2510X\243\306?)o\007i\224z\345?\316}\2702\266\240\326?j\033\014\030o\272\345?\340\312P\204Xu\311?P\242f\267\224K\337?\251\303\254c\354\244\351?\220_H#!e\247?\336m\030\231\256\375\343?\337u\264\272\'%\350?9o\324=z}\342?\257\334_jE\266\357?\232\340\225\373K\306\344? \273J\242\213y\334?\200\256\023>,>\351?h\'\265L{\035\302?\033\202\310\204\345\213\350?\267\264Z\262\247\n\354?2\211,+t%\322?\354\r\367\241\372\362\346?\326D\355P\"\260\353?`Y\r\204_\253\313?\000\343= \344\202\226?6s4\212\253\262\350?\200\363\216\354Q\221\314?\030_\327 8q\301?(\265\265\366G\031\310?\300pkD\301Z\324?\246\201\237yK\032\334?r\330\255e\034,\331?\324\346h\243\311\365\342?\264o?\371\321\215\313?}jY\037\272!\350?\244\367\274\0346\346\337?\340Y>\233\030\010\250?\270\225\237\347IP\263?\0224\375?\370\002\332?\214\210\350\007,G\300?\030\374\337\271\262X\306?\330?\215Y;\335\341?\254G\004\263i\356\324?3K2! \255\342?\014\274\270pC\337\326?X?\367\340O\266\306?$\365Xb\320u\326?Li\016\251U|\326?\200\276\032\364:W\227?(7\331\240\374\222\337?*\307\0037)\312\334?\200\226iN\315\364\352?c\325\267\207\227\312\345?\326J\315\272,\016\322?q\303\267\367\222\203\355?x\345\321\320\315\005\344?\212\261\205.\316\375\352?\35091\355\002H\300?\260u\330\325{N\251?\242zJ\001d\235\355?\261\236F\314\214\'\347?@?\226\306\020y\302?\250\215:\241M-\317?\3070j9\203d\342?D\312\014\036<t\306?\240~\216\204\244~\226?`\205-\2045\360\275?\000\020F\177Ln]?ovp\322/\256\343?ckIMRf\340?\236_\243z\336\205\337?\277\036\366\337\234\000\340?\200\375\236M\361\326\310?\260\360\343e\352\003\272?\230N\360\013\021\300\277?\253\360\031\303mJ\350?\336\356Bc\243\'\331?\200m\305\002A|\265?\370M\307\247\366\262\352?\237\310y\255K\357\350?\375\003\177\327\233\210\341?\361\212\372\211\373\204\340?\0145\276,\236\013\316?\360(\017=@\215\323?k\246\252\217\267\022\356?\220H\331\227_\241\260?j\275\307\362\226s\357?\320\266\207\205\316\013\252?\016\361Pl\334:\344?8\326\274\276\033B\305?x\224@\210\324\213\300?\340\337\234^8\337\300?\200b\260\037Pv\260?\272o\263$%\240\342?aL]\232\033\360\355?\360\032\202\345\344\226\342?\300)\376\331\322\346\242?f\262S\211\031}\320?\264/@\220\006\010\340?\003u\341s5\276\352?\222\264\231I#\315\326?\350\377\377\201\026\237\350?\216}\003gB\002\335?\370\264\312\344/R\276?\220C\270\235\210\327\267?\230\243ec\374\262\315?\211\231\027dqo\353?3H\017Q\312\203\356?\35441\206\264P\352?l\372\242#\301r\312?\244\215gG+c\315?\374\245\342\316\203\330\313?\316i\240\310t\334\352?\232{\3370!\255\354?=5\312J\205\334\353?\266\301M\355\004\303\341?\310 d\362\262\240\313?\234-\236\361P\000\301?\000od\003\034\255\303?\232g\353\036\357\257\355?v\243h\032f\234\342?\200\236 \237\247\023\207?@\350\023\031\026~\245?\030\332i\317\3769\340?zV\200\357\n@\356?\350\006B\334\377\000\320?\216\004\013\035\020\300\356?\030\315\034>\341\374\335?\340w\267|\326\321\243?`\177K\210e\203\310?\210;\033\367e\235\275?:\206\301\250 ,\357?\340\304\303\0273v\327?\212\301U\0162\201\331?,6\265\277\334\254\344?\217\246\367C\233\027\345?7\371\240\201\300n\353?}\253\373\031\273D\353?\377\336cTX\227\341?j\206\301x\304i\357?\306,\262\353\320\265\327?\010[\232\221\023\220\335?\200\335\177\250\223\300\340?\004\025\t\362\360J\312?t\213\035\333\3615\325?\316N\360 d\257\354?\361\325\242\336\303\231\350?\240\226\207\037y\253\325?\013\317\351\315\002n\347?R\271(\324\375L\354?dLz\270\022~\327?\010-)\276#a\306?\002]r E\021\322?\177\253\334\346\347\200\354?3_48\033\026\344?x\020L\323\217\330\355?\304\207/\273a@\346?\230Q%(&\260\336?\200\nHexk\322?\024\225Ci\256\262\330?4\363]\006\332^\350?\304t;o\314\370\311?\020\"\254z\255\260\263?\300,\361+*\252\200?3\313\300\237\244\374\353?\376w\214Y\322$\333?\363\275\002\234\177\022\350?\240W\234T\003\026\331?\344\005\030\265\333\325\320?\304\205\226n\276Y\346?\236\"\356\256Y\372\350?\027\364\r\221\345\311\342?\312>\242CTY\353?\3204CV\255O\244?@\027\367\310*\026\241?\007\3260H+i\340?CQ[\237e\030\342?g\3633\252\211\266\353?n\331\373\322\240\334\325?`\016H\020\356\365\251?L\3544\341\342\301\356?\337#9\217\024\004\343?l\364\227+9\241\352?\250M]\267\300\304\311?\220\024z\010zs\246?=\021\260:M)\351?\212\372\301\025\031\243\320?\324\242\272\335F\002\320?\313\\\'\355\263\233\342?\274\254Q\317\363\242\354?N\200xV\247<\350?t,\351\363<\021\341?\035\374M-\345\354\344?\242`\336;\256N\332?\244\037\307\007\320Z\327?Q6\276\346\220\034\342?\234\364\276\177\020\304\330?\246\3565)Jj\330?`~S\014\310\237\265?\2565~>\201\363\330?\272\204\270\352\344\313\356?i\223\252-\n\263\356?Pq\350\031\003\035\352?g\3707-\331K\355?\245\021\233pA\277\341?]\316\261>\254\007\344?v\363\202\232\037\342\333?\360\021&\224.\016\271?\354\351\201\214Ry\322?\364O%\273\021\336\324?\347\342\031Z\0147\341?\234W\010\013\023\307\301?b)|Q\376\353\325?\037F-\332(j\340?\311\335\332T\364N\352?0\216\022\272\323=\240?\260ZX\037\022\222\321?v\354\022eUL\345?\026\330\356\327\027\252\350?\256&\367\303\266\014\324?\034\236IJ\266C\346?\250 dj\236 \351?XX\0049\235\356\337?\314\212$O\036!\357?\334\361\236g\301\t\353?\223}<Rcu\355?\265u\001`\263\326\342?:\007\340\234\017\212\345?\370^)\014\013\253\264?d}\022[\224S\336?\220\034\342`X\270\327?\270\240eD=\217\313?\300\355\214\333\211\272\247?\213\356\335-\334\000\343?\r\353\005\374\273\201\352?x\337\337q\252<\266?P\270v@\"\314\277?\364p\246=\264\304\313?[T&\226\220\356\343?\356\243y\306\372X\337?b{W\207\272\344\355?7\204@\342\302!\350?\354\327,j/\001\300?.\'`\216\252O\322?\336-\\\311\336\276\336? \330\321$\367\n\276?\220\357^>S\031\251?\\\345K\264\255N\342?\030\200Z\324\343\256\350?\331\327\232\201\021\223\345?%\366:\t\004\'\347?\242\200\010p\236\353\354?-v\353q\323Z\356?Q\2473\214k\367\347?~S\377\273\376\030\324?\264!\356Fz+\334?\240Vm\313\332}\246?\010eq\201\213\275\352?\201\217\306\2313\361\354?0K9np\250\320?\024\033\024\345^\332\337?\354\364\271\204`$\316?2\372\']\213\t\333?\374K\016\016_\202\303?h\243\326\330\366&\272?\235\002\033\340\350\217\353?\024\013\200\323\000\351\307?D\264 \t\342\245\310?\376H\257\177J\\\343?\026\304\340\243u\277\324?c\223\310\262\376\n\343?\250DH\255\314\335\334?\272\245\375\343\372\351\347?\206W\361\264\313\210\323?H\344\273\307\260u\264?\000\r\371g\360@o?\004\331\211\210\366W\305?\300\262\331!\254z\354?\334\241!M\255\250\302?\240\354\3534\267\345\357?p\227\221\2466T\347?6\264\242HR\244\357? e@\343\005\240\262?\306\262\302\222BV\350?\000O\032\226\240\231\201?\000\033-+\r\031\211?,\317\274TS\262\325?dh\327\201\3327\310?p/\371\227\257w\300?\'\2520\377\306\"\344?R\275U#\272\311\333?\370\2541x\362\274\270?\\\206h6\\\\\327?\021\230\211z\364\243\340?\\R\205\375\027\261\336?Z\216]X\244b\324?Sy\276\001dh\345?\000\rL\371U\365\213?\266\300$\"\277\020\323?\356\016\370\375\341-\342?$\241\235\266\236<\305?\340\216a07K\357?lv\365\326O\346\314?X&\370\221\217\r\324?vOZ\020\014\022\347?\270!B\350\212\007\351?,U\213G\367u\306?\356\240\375\006\311\303\320?b\007Sx91\343?\\.LM\030a\343?\340\250\031\365l@\334?\233\242\005\370\320\205\353?%R\366\365C\271\357?\314\262\245\211\252m\305?\306\301\030A\260Y\354?0-\3606Ld\243?\001x4c3\345\343?T\223\300\203\326\256\305?\020 \010\247\260\363\272? \262\262T6\254\241?J\326\267A\307{\344?R\252\374L\237*\324?mU\34051\\\345?\340\207Kt$\215\243?,\347\n\367J\201\322?t\260\252\262>v\345?\036F\036[7;\351?T\230\242[\222\231\306?\035,=\\\337\246\340?\240;y\363~\353\337?\340><=\262\277\222?\317=\211\371\256\216\357?\020a\356\241;\356\274?\207\336Y0\215\031\340?\000\270\213\177\205\347Q?\255{\n\231{k\355?\302;l\265\177b\350?k?\023\016~\374\351?\205\217J\305\037!\352?B\251:\010\265]\343?\370\272\007x\r\273\320?\020\262:c\025\343\240?]\301\t\360\230^\354?\324\212\274\314`\245\333?\274f\272EsH\317?\364\021c;\2757\340?,\237\016\200\200\026\337?\026\345\330o\230\263\336?\004h\n\256Z\216\332?\034@(\325\243/\306?wM\334\021\030W\350?\262X\373\026\215\221\323?L\201l\204\007\245\355?\to\300P\023A\355?dJ\003o9\245\322?{\301\030\307\035\r\344?\306ssn\252\r\343?\234\312\317\306\366I\310?\220\237%Z\361G\255?\322\300\320\026\242\243\352?\000*\237\003\363\363o?\366\312\2569\231l\336?@\243\226\357\3005\351?\320\023\327\272\032j\342?!)\252W\317\005\350?\024\203\004\366\324I\304?\324\352`\331$B\330?\t\303\254f\204[\356?\222\243\022\231(\350\323?\341V\211\344\245\316\351?l\264\232t0Y\330? Y\365\016\220\360\315?v\376\311\360z\000\322?Cd\277\\\016]\351?\230%\354\340\274l\323?\014\244F\323B\367\320?0\344\177\267|n\251?\344\220\262\0326g\300?\302\027;\203\224\004\330?\256\\\207n\220\247\346?\264\275Z\235\356\366\326?\267\314;\350$\033\356?\374\272s\340|\214\342?\310x<P\223\007\325?\334\206\367\347\274\372\331?T\250 VT\334\335?0\346\366U\001&\345?\372\333\337 +;\347?\370>\370#\336z\313?\004\000+\253\313\221\350?\304if\021#^\357?\035\225aZ\025P\341?\020[\310\017pD\352?dvR\314\0233\310?\201\301\314\341\212\242\351?\340 \341\323\\\300\264?\220``\n\027\270\264?\316\023\255\004y\013\340?}|\211_;\301\353?PU\343\223\277o\262?\214[\\\337\007\016\344?\260\034\240\304\227\211\357?\240\213X|Q\333\246?\205W\206\231\252\364\356?\215\266\206)\214u\356?\020)\030J5\247\266?\227\0047\266Bb\355?\216\205\274\036\251Y\353?Y\326\321\001\202\002\350?X\216\r\315\224\300\304?\272*|\216<\307\353?\230|\274\2453i\306?\2408)Z\241\304\334?4\222\334\231N\237\335?\341\325eT)\034\341?\242\004>\312Kd\343?\000g7\322?3\321?\326 yT9\357\336?\370_\210C\225\264\347?\306\001\237\202!\031\327?tQ~\364\236z\355?\212\334\352\335=\013\340?\2746\350\334\232\233\306?p\277\232S\267\n\252?,1\376RN\016\301?\240m\377%\024\207\347?e\335\306i\3124\340?\364\242\023\233\310\233\306?p;\001V$x\344?\030aO\035Ru\300?n&B\360\305\335\345?k\351\340E\177c\344?\0140y\032\203\036\322?\250\211w\307{\332\336?5\255\270\265\014f\350?\030\026\214}}-\321?Z\273\212_\364\n\352?\324\261\2014\275\255\320?E\222`\307!\205\347?\264\265p\273-I\334?\301\013\302Q\301R\342?\002\036\370\035\233\001\346?\nH\351\353\200\321\355?P\350\323\306V\210\356?t\266\306\302u[\302?\001-o\365\275\377\340?\020\334F\023\360V\307?Z)V\365t\341\352?\324\006_\301\314W\335?t@D\025\215\035\353?\020\357\34109a\256?\004\211Vx\360\262\300?\202.\375\010\352\235\333?\016\365[\213\224\035\326?\240\310{\326\221\235\221?\244\323\357\257\325$\347?\004\234\n\234:\227\344?\360\317S\220\211\007\266?\304\345\201\245w(\325?\362/@|\236\361\352?\374R,P\204\253\356?\314\316q\266VV\325?\317\201\326H\255\211\350?\276\275\227{L\354\347?\300\3644\264\r\022\305?`\371\375\214SC\270?t!\017\366\317{\321?\322[+{\245,\356?q\375\313\354\233\333\357?\215\257zK\327\214\356?\277\037\371\377\023R\354?\315r\301\375{\300\356?\350h\211\330\232W\341?\356\233U4\254\306\320?lM\206\014\177{\334?\314\010\277\305\032\347\357?s\032\025\226\310t\354?\315\246\273\266\332z\350?dT\005\242\272\214\333?\222\241i\370\354\244\326?B\262Cc\006\237\356?p\377\t?\274W\302?\226C\333\017\222l\345?cf;n\316?\346?\310\033\244+N\260\356?\177$\213\277\212\205\341?\210|7\355\317\\\312?\236\341%m\334p\346?\230\000\334\246\246\005\355?Bra{\344&\340?\033WJ\374^\250\352?)\253\013\377m\321\347?\2401v\276\232]\322?\261\341\271Ml\262\351?\004K$\365\n\177\323?\nC7\301\013\026\323?\360\177\374_\235a\334?\224\314I\200f\213\315?\020\214}p+(\264?\300b\270X\003\362\221?\364\320\247\305\354\024\306?\334\204u\201+)\341?,\241\370\342F\306\321?\326\313\263 4\326\327?:\260\362|\332F\333?9I]ZV\305\343?\024\237\346v\206\237\343?\310L\001\247uY\304?M\3343\177\374w\344?\223r\232\3521\257\356?\251\353\215H4x\341?\223\032A\352*\373\354?\274\215-\037\373\310\352?\3220CP;\024\330?\350\236\346\267\377\316\345?\014\375Yh\317\005\323? \222\324\014\333\315\255?Ep\245\357\343\240\344?\245G\305L\3127\354?@\023\\\256P=\247?8\227\0033sv\312?\016\373\371[\030\014\356?\231\320\246\306\242\274\352?4\t\321\345\217\251\330?3\360\177\250\321\314\341?2U&\333\027:\343?\330\304Sy\200\342\350?\232\206Y\'\233\202\320?.\t\247\275\005\332\342?p-\2668\327\225\315?\030X\211\\\237\341\276?\324\305\342\210\363\274\340?I^&\202V\356\357?\350\3229\005\0323\267?\307\345\\\204\265\253\355?ab\t\224AX\346?Pb}\360%\233\312?@@\313&\346\313\227?\360\367ER\245\302\346?\370FY\320\343\262\330?\243\013\320Au\210\340?\240\265_\030\376\255\275?\305\347&S1*\340?\306,P\203\261$\326?`\0215\366G&\222?\000\304c\312b\334\350?\332\007\031\364?\376\325?\235\234\226\014Tv\343?$\026l\014\223B\322?\001B\256G?\273\340?T!\232\037=\"\314?\034\313\257\006\214\367\300?v!O\316\233d\337?\026\020Y\262\250\275\333?\206\262@g\364\214\342?+LF\2518\243\342?\362D9\2533w\350?\272\201\034\274\352\016\344?\314\201\351\336\277p\315?P\301E\351\242\344\331?\037\216\250\344\266\013\351?8\340f\321\n\304\337?\360\357b\276\002=\352?\020\013\214&>_\272?x7D\201\013\355\325?ON\254\327\377\377\342?\244\357\340X6%\332?\351\322OKcE\342?\2706\204\257\025E\325?\361A\341\235\2473\346?\006\214\030\026\341*\343?\030\352J\021Q}\335?\030\234v\\\202\274\335?\036n\360\225\332\220\331?\033b4\243\016v\347?pN\013\021\362\007\325?\234Cn\'\303i\357?(GH\034\303\034\276?\236f1\024(\207\357?\200\254\276\220%$\324?\240\353u\'\327J\346?\036\366\342\031\346\300\356?\003S\233\227\200\273\357?\327\205\252\363\304\233\342?l\037!\232\030\347\352?\310\231\301\0355\271\317?\r\177\213\340\005\027\357?\306Sa\354\374\203\327?\372\213=i\261\254\355?#\225\317\341\275g\340?\036@\241\2170t\322?\211\316\362\374~\264\340?\000XH\257\264\373M?\014y\366\236\374!\305?(\213[\233\255\257\300?Yo-TYr\343?\266\035\257\224\n<\322?\335|\3453\025\364\353?\375\310@\346av\357?`K\314\027}&\303?\264\202k\271j\317\333?\340s\344\353\241\363\235?\357ul\241\243k\345?\350S\365\2151m\354?p\004l\021X\366\322?WO\212\340\006\177\355?w\322\354ch\314\357?\316\375\217\032\370\370\322?^\021p\266z \343?/\372O\302e\n\345?\352y\340\344\341\373\331?\020\014\006\342\013\032\311?|\213\332\304\221\240\353?l\277\354\310\210\373\330?\242:y\324\232\351\350?`s,8\263f\253?\324\006-\377\206\274\317?\000\261\317\217\257\366w?\007$\241\211\363\344\345?\260W\257\241X\261\240?G\272\241,\014\333\340?B\241\224>\r\343\344?0\2573km\320\356?4\322H29^\332?Z\025\343\216\314\253\354?\000\223\2675U\240\233?\224o*\271b\251\323?\024\302+\227\270y\313?]\226\3425=\265\356?\230\271\234\264\003)\266?xO\274b?\323\264?\300*\360\037\"=\223?\0200<\t\346\213\325?0\r\335\373\262\331\273?`\334Q\341\0309\323?\"\371{[\342\224\330?\204\267I\237\033&\302?h\360\t\352RR\261?\214\366\014&\341\022\350?\324\t:\311\363\267\330?@5\325\264\204\245\261?\366\006\371\242\203!\357?\200\305\213\306\336s\246?h\355\236Re2\353?\214\3001\014\377V\344?\374\245\217\266\316;\303?\337\373\264\243{\233\347?P\237\326\201h\215\261?\276\302\341\000\300\002\332?\326\211\004\344\267\313\323?\364\'\3746w\343\351?\335\366k\266Zj\347?b\372l\253\336C\351?\204k\026\337\271:\332?\377\304\357N-\263\356?\301\301v\267\355\346\357?\2242\312\261\"\250\327?\t\224\333\346\231\356\344?\nv\276r)P\344?T\306\337\317 \202\300?>\234pF\312\277\344?\r\270\330&\013\025\344?\331\005\377\223\260\242\353?\261[t\257,\223\345?F\014\022\217\323\020\326?\224B=\003e5\324?x\"mH|>\270?~u\365\341q\276\344?\354:p\t\374\311\351?\\\\\010\220\273\332\300?\264v\347\251\235!\352?\223Cm\205\347\010\355?\034f\366\326\224\371\307?\300\004\343\331\345\036\357?\336\200\346\316g\264\332?~\276fr\267\360\331?\320\024A@\370#\305?1\027\366\3029P\341?\224\007#\267x\277\300?\311#\331>\031\231\356?\354\3057#\275\301\353? \275[\217\235a\320?(\025[\336%\241\356?\000\213\305\345\362x\304?\225\032\220\275\'V\346?6\335V\213\250G\356?\334U\034A\300?\337?\226\355\202\242\345|\352?\314\014\377\300y\376\311?\323\024nY\016\333\345?\214\t\313\310\037\027\307?\177^|#D\023\344?\347\342\241Y\tb\350?P[Pd\360T\316?\370\003\360\361\211\344\356?\351B\330\365\375\340\353?\3407\003O\257\215\265?\317(\245\3530\272\356?\340\322\222\030g\262\272?\300-kWT\301\274?\264@`E\020\323\306?\300\201\220\264l\372\316?\014\351\224h\274X\304?/\020\311u\326r\343?\304\341\"4\367\204\347?\265\227\302Kq\306\352?ny\232\266*\261\340?\330\346\260\316\227A\310?\220\020]\217z\217\345?qQ\2559&\350\350?\340\224:U\364\341\234?\357\310\217\247\242\245\343?\374\301\2142\\\031\334?8\206\252\027\237!\300?P~\333q\242}\330?\310\2160\013\017\014\353? \207\002Tr,\321?>\034\177\231\222\321\347?\3659\370f\\\322\352?\250\251\244\222\275\312\264?\024\030\271\303\335U\340?o\022\203\306R2\351?@\220\353\333\357F\357?\230\024>\r\035\247\266?\244=\327\212\237\311\305?\310\032\321W\"\351\276?\000\376\340\212`1\322?\202f\225\226\370\221\341?M\206\207\202\317\367\357?U\007\334\'\310\376\356?\340){\212\244\306\316?\200\034\215\002\000\244\247? h\344J\376f\265?\300\231\341\0254^\335?\\\347}7\373I\333?\234~\351^\177\032\337?\311u+\201\200\233\355?hpqgvC\340?JP(\013_\222\323?\306\020 :\330\236\324?D\204\350\3637\272\355?X/\320\332F.\352?(\330\322\374b\277\350?\231\260\2704\302q\355?ll\247\260\262\336\314?8H\201\t\016\334\335?\247M\367\217\257U\354?\341z\240\317\262\300\351?S\334\251\231]\230\350?\364L\253\232\346\323\346?N|\327+\016U\357?lG\354#R\036\334?\227\r\005\236\000\252\352?@8\017G\221\355\224?\324\316\204\2745\304\315?\254V\327\242\035\270\302?-oI\376\355 \346?\237\271vRy\236\353?\200nj8\312=\266?\250Jv\362\314@\264?\200\250\323T\324\320\246?\326^\341!\032k\335?\034p\014L\\\026\307?\001\357\245\324\177S\340?\277\234\255\276kY\342?\032\260\252d\311\345\355?v\231P}\335\271\326?\333\024\370\0212\377\353?\260*\313\251\0028\356?\006\370S\235\333\236\342?5\001\210+\332\333\351?U \314\206\244\025\341?\270\366S\017\200L\270?\220B\232l\033C\336?f\r\352\300_k\356?*\010Wj\224?\331?\207B]\202e\002\347?\364\277Q\337\005\226\310?\360I$\341\314\352\356?X@\301n\271\365\357?\240\322\220\367t\366\350?8\177\373\026k\244\327?\371)\313\205W\240\352?l\252\010\016>X\351?\214\032\376cE\240\301?\276o\253\3120\302\327?\374?\345\032\207s\336?\310\035\314\320<\300\356?\226\030d\305\"w\346?\271\217\226:\246\225\352?\354\024v\270\023O\313?\3728\214\253\251\227\324?\314\'\266\245\230[\345?V\345\037\204\356\t\320?6Q\307m\315y\335?m\014p\304\331~\344?\010K\277\274\243\234\347?t1\306(Zw\300?\342\243y\010\220\321\323?\370}\273\332\346p\316?UC\223\240\302\236\347?\250\354t\334H\240\321?\362<^\262\301\231\353?0d\215r\276\354\265?\302v\236OM\250\335?\326\025\253\355\245Q\354?\203;\013\t\351j\343?\200\2132\367(\371\357?\266XO\373O\343\345?f5\205\n\271n\355?@\357o\267\234P\244?\200\301\310y^$\347?\376\353m\2545a\347?}\306\005\334e.\357?\254\307\364\202D\360\357?!\030\261?\372\205\354?D\256\345\261\350\253\347?\377\211*\223\227\272\347?\270\250\031\207}\346\301?0~\377\310t\375\245?\354\013E\272A^\345?p<A\202e;\266?\305j\277\244\362\226\344?\005\203+!c\265\345?\357\264=L%^\341?a\325m\374\031\261\340?Q\365\210R\207e\353?\322\251\217\264\373\364\326?\350\242\035\177\'\211\261?\230\362fe\021\206\316?\250W\203\202p\242\341?>\250\272\360o\357\326?\200\205\232\261\037a\246?^\037\226\250\370%\343?\2737Q\2059\251\340?\233\023\021-\344\371\357?\354\021i\252w\263\347?\216O\377[\001\203\351?1\227o\270\272\223\340?\234t\325Z\276\325\330?7h&g\327k\352?L\r\035\177\266\245\352?`&\355\266m\230\272?0\354\231\004\211\305\324?\216\303\373\345\327\352\342?\334\343\375\036X_\332?\334qx.CJ\336?\024\336\024\317\247\016\311?\360\2548*\003!\266?\340_[\240\270\344\350?\220X\375F\335e\335?\240F\000\201\222\203\254?`\210\204\250\034W\221?\376\375\254\377\366\207\350?\316RL\247\230\223\325?\334\274\333\315\357Q\313?\372\013\261C\361\234\342?\201\314l\207\026\001\347?LcIA\310\n\325?\336M)+\224h\324?\325|\232FJ\330\343?\274\267[2\344\310\347?8X\357\213\272\036\317?\310\345_\025\307\230\345?\264\245\313K\237\321\345?\304\326n\010{\346\326?T8<\245\331\315\301?N\010\344\304\204z\322?~\360\331\245\301[\327?H\305\277\357\353\026\302?\300)\rn+h\316?\014z\013\014\322.\321?@c\366Dxz\315?\210\372\244\376v\332\265?\344\227\305e\367G\356?\200\020Z&\034\257\332?\254w\035\306\200\232\307?T\353\315\334\030\002\335?\224G\226e\226\256\334?t\254\tj^\317\316?\323w\272\002\272\006\352?\346e\354sN\313\321?\276x,w\301B\347?\232[\371\237$\370\352?`!z\313EZ\307?\032\300\221Lz[\337?\260Ows\251\005\331?\032\002\240\"\356\312\346?Z\177\233N\234\006\337?E\230S{*\357\352?\372\005U\"\253-\343?tKE\362\244\030\332?0\275?y\324I\312? \302\033\262\314*\314?\247\025\247<\263\345\346?\222\212\026\005z\336\345?k]tB\242r\354?\035L\016\023Z?\345?\226\370\246\360\246\002\342?R\010\257\341\017b\350?<An\200\037\025\353?\000\365i\236F\257\356?@\254\255\320Z\025\351?\214\325\357\031U\320\354?t\370\377;l\204\342?\373\374KT*\202\350?k3`\177\241p\346?@\334\253?L\321\261?,\3142J\356!\324?\310\370Z\032\362\030\325?\006-\3211n\333\356? \334\037ahr\313?\000\300\320g\367}\277?\017\2471\025\321\317\350?\364n\301#\2705\322?\220U8c\352\307\325?\330x\'\321\377\345\260?@\"G\215\236\320\320?\245\323v69\207\354?\3600:\\:6\345?P\2315p5\276\321?\242%\362U\335\326\347?b\326tA\217\321\345?\304\324}xWB\304?\202\341[4\005\177\357?\344\021\004\234\354\236\340?x\314\020\t\023<\261?\340\325\215\316&4\271?\356\215\364R\025\216\357?\210\007\230 \241C\332?\330\366l\361P\211\331?\212\010\031\333\ng\340?B\"\2275\245\030\323?6\001\207z\214Q\345?\253K\005\034\366\000\344?bix\010\217\277\321?\314\262>z\002\345\305?\350\346\305{/\\\315?|\r\346i\336\206\324?g\267\253j][\345?\237=F\211\276b\356?O\205\306\360\210!\341?\224q\025\333\212\327\305?\336c\2404\245\030\340?\242jc\010j\352\322?\222\276\315\377\300\347\347?\366v\364a\206N\347?4x\215\271\304\247\336?\340?\240K\r\230\260?\2466\'k\222b\345?\340U\007\227`K\303?\2121\200Zvk\330?<F\343\242,^\347?h\243\270Gl\273\264?\026\316\364\340(\013\325?\304\026\335S\307\223\311?\007\323&(\241\241\345?\246\315\372\321x\353\326?\200\311\325fq\333\247?\"\352;+\257y\344?`\262\352\354fF\240?\225[\341\221\266w\342?\252\311%\212\'E\321?\377>\022A\363\356\341?\342i2\035+R\322?\207/\315;o>\351?\000\342\371\014C\230\231?\274x\312\276\225[\312?HK[\371\241\030\265?8\3551\010\210;\330?\255\223\032fi\266\343?@4\000\266\037\311\302?\340o+\256\214\000\320?\2721\356w\333\000\325?\024\331\000\303\377\204\306?x\036\206\0225\243\323?\334\306\214\\\351\213\331?\350\\#\225\342D\343?d\376\002}i\002\331?D\201\331\251\2535\325?\320\002\356\365#\360\241?\263\010\006#Ur\356?\216\332,\344\332\312\322?d\314\030\245\242\217\343?\257\310\"\213\252\346\354?\260W\240\312\010\317\272?\370\217\3126N\t\330?\027\211\277\313\031\343\346?`\210\256\003\225\254\276?\351\344Q\200\224\266\355?\335\244e\344\305\036\347?\344\316o{6@\350?\340;\200+\336\211\327?]tn\253\234M\344?o*\234\361\242\361\353?\024@\030s\317J\307?\235\322\272\273\353t\347?\230(\002\032\323\232\325?\212\377\026\243\275\340\347?\220S\373\343\026\014\271?\250\204)L\202\374\346?\3601\233<?\341\356?[\210\202\3459\245\354?k\231\237c\243\213\351?\236\350\231b\244*\336?\336\204\300\n\252\201\333?\370\365\225Y\010\021\333?z^=N\243\036\355?\030\326\207\003x\253\337? \325W\220\003\265\307?\317S\305\226\335F\351?g\352;MRB\350?\364\003\231|fy\343?N\013l\340\365\'\337?\356\377NC\213;\324?b\313\353h\346@\343?\3307\006vc:\332?{kS+\000\312\350? \333\236\247\323E\251?\254\305\230k\332\023\301?\223\263\224\364vS\343?h\263m\007r7\327?\307\316\231\0057\267\342?0\263\364g\300|\240?Wa\344#\\\357\342?j\351\226\371]\333\333?\222\304\n\3432\374\337?\251\220\312\250S\303\356?\240\221BD\350=\350?X\025O\0376\'\265?\202\277\355\n@\250\344?b\033\323Dz\317\336?\312Y\310\213\034&\354?\213\302{>\347\027\347?\261I\210\014A\265\356?`\312\324\206\222\370\230?\021>\3653\331T\343?\200\031\024xbf\234? \263\255\257\337 \351?\210\214\376\221\2748\337?:\200\233\021>\204\330?@\020w\035\211\205\223?\326\224\n7\220\236\327?f\236\377\340\334,\343?\211\355w\033\350W\341?\235\213\243\242\242\312\350?\016\254\234p= \331?\000\275X\272\030\235\245?\214\224\201g\342\365\322?pW\302B\250\315\353?\330\027@&\347\035\352?$\272\267\321_l\353?\336\341\312\035\323\251\337?Y~\202\331\266\360\346?\260\200\360r\265\365\325?\236\304\323\205\200y\352?B\005}ot\300\350?\203\010\332n\272Z\355?f\322\271\'?\005\344?\347\007l&\342\341\346?\024R\030\253\345\021\307?\0008\266*\\\364K?\3126\306\333\036\020\330? \345\302\351\003\244\245?\206\260k\031\267\306\350?\252\177\214\227\350\024\326?\232iq\343\026Y\346?yfVC\000\373\355?5\024\202g\313\255\354?\324\031!\014\245y\311?N\311\212z\022\274\335?$t\351:4\337\327?M\207\017\345)\205\346?&\250\222\r:\277\320?\323R\366u\331\326\351?\350\024\204\272\343\222\261?\nV\345\025\003K\343?LJ\247\213\275\000\306? \276\233\364\230\022\320?&!\017\320\303*\345?\200\343\221\014\\#\305?^\241\361\356`\032\320?v\315xu\030\355\354?\000\374\314o,H\276?<\252\032@KM\300?X{\031\243o\301\321?~\0225k\374F\352?\034\0165TZ\370\346?\352\253\205\352\306\207\324?>\365\377\227\303^\347?8ou\375\005\324\326?x\336\317\374\203\266\341?\220\260\221\2545\304\257?\'\034/z\207q\356?x\267\253\\\034\232\315?G\367\325s\"(\357?\001\256\005\217!\233\353?(\031-X\302\000\351?0\351D\235=\355\260?\200\354\263\273[D\252?\017\202\356\214\366\207\350?\220\364\231R\020\000\310?H^\363|\024\207\322?\334\035\264V\205\374\313?#\225\267\373X\231\357?0\376G\242\231T\313?\032~\211(\211\272\354?4c\322\343^\362\331?\014<^\272\022.\341?X`/U\323(\326?\254zh\033A\270\357?\010\314\rN\016\364\343?h\260\245\315\246\351\274?\021\277\247\241-2\340?b\217>\2063M\332?\320\350\001\200#\213\263?\336\373\031h\363\240\357?\344\206\241\"]\227\321?\034l\263Z%\331\312?h@\274\3002?\351?\310\000\343SXZ\344?\221O\323l\2512\355?\235\340E\026\274*\355?\221\322u<\315\240\346?\234\3176H\271\024\327?0\302\317\214FJ\336?\310b\301\251\370#\276?\240\247\277G\032~\252?\374\302\233B9D\304?\370!\322\305i=\353?\236\216\364\326 I\347?pQ\360ti\220\254?\006\250\336\224WT\350?\322\362\366\n\237\376\351?\264}\260{Us\321?\240b\272y\'\301\313?|\276\373\331\2123\336?z\377\215\233jv\337?\006\345\303\256G\035\342?H\360u\331l\024\352?@\332\\\002\276\342\260?u\013\202\n2B\340?\246\003J\231\022\211\337?$v\371\3376\300\326?\327I1\317/m\351?\340-\361\277_k\336?\031\305\371\222\333\314\355?\244-\370:=\210\310?_>\273\356\271\021\354?\366\240\355Z`\336\321?\034\324A\010m\n\326?&\260\313\326GS\357?\020\273>~\365\270\241?\\\312v\221\275\325\335?\3069\346\255\3674\344?\373w\213\370\032\'\354?\215\002x\226\237K\342?\274\t\216FX\275\335?\304$C\010K\324\356?n\243\327i!\356\322?\034\373(\251\332l\313?\240\260\t\026\302\252\300?\212\274(\222bq\325?\330`\222.w0\314?(xG3\244k\262?\360\006\211?\227j\273?\260\370\016\320\2642\302?\214H\274\251\320\207\317?`\265\213P\371\235\303?.\3216\315h\260\323?J\310\324s\273\344\342?\002\215\245\003\003z\354?\224\272\347\221\006\271\344?cF\037\233\335\265\347?h7\266\240i\350\312?nr\206Gt\'\353?KG\225\325\305\222\346?\037\250\265\203h\267\354?\037\300\377\203\312*\355?t{\254i]\375\333?\024\0300\231\371\260\352?[\324\031\360H_\352?\304[\375\200\353\246\334?\355\340\213\321\264Q\351?\250\311W\020\223{\355?\010\317\352\332\272\272\344?k\223\262\377o\006\353?\310$s\021\375c\304?\210\261\"\324\211\265\324?\207qO\327\370\202\355?H\005\226\357\373\321\330?\034\231/\277)j\354?*\264>\320$g\321?`\222\245qd\031\234?qEr:\312i\340?\000\301e;\277\006e?\326\201\312\374\r\207\334?\203/\000\225P\313\350?\020\376\006\014,\210\251?i\350%.\371?\352?6\354\177\263D\231\325?\373\313\377a1\\\346?9\020\235b\210=\343?Z\254\234q@Q\333?D{\212nZ\r\306?\306\206\350\332\351\316\330?\260\327D\3031\305\275?\350e\306\314\316\246\327?\220\330:\334\316\353\307?\322\304l3#\213\345?Fu\353\215\361S\330?\354%\311\232)\260\302?\214\341@$\001\370\341?\354\302gI\014\356\316?\220/\"\375\210\377\302?\260\217\177H\356\326\330?\370E@\2601\247\275?\031\017\302\371\257?\356?dA/:\201\325\350?\373\227\200\323#\235\351?Y4{\217\313\210\352?\024\242\\\377\326\242\310?@)\367t\302m\237?\336\354^\352\'\266\353?\\\334\307\307\371{\335?\026a\336\364\007\340\320?Llu5\332[\324?zJ\276\241\271\266\355?l\300)\262\357\215\312?\351\002\366\361\321\277\344?@5\224\035\217\210\354?\375\214v\236\260\201\355?\"\243\3062\274\204\333?@\235\270Z\304]\350?\233sD>1\210\355?~\326\252\033D\000\351?\334\272\272_Q\203\335?H\"\373\'8\267\345?\222wL$\212\324\357?\354C\210\027\215\031\317?H\262{\351-\234\344?\214\346\036f\0249\322?\266R\023\222/A\326?h?{\200D\\\330?\262B\"\017\232,\323?.\351,\307\003a\346?\226\022\335G\246E\325?j\004\331\257\3400\337?\300\212\304h\2003\311?9(F\371R<\341?\360\302\\}\301)\355?_\213\244d*\375\340?\224\267|\216\037\221\322?\244\245\252\206\345g\300?\200T\025\376\222l\313?\354\256+\314d`\354?\314pH\243\251z\316?S\337/\206\340\247\343?\024O\303\210\301\310\302?\264\362%O\377\220\350?8\250t\276+\256\317?T5\334\024\264\021\303?\376\256\352\303\264\036\333?\010\211\311TMF\342?\0178\343\007\274u\342?\261\014\357\354\252\223\340?\000\275)w\314\006\257?}\220\355\371\025\317\353?\3507\256\213AL\277?\014)&\216\235G\320?!\316@\023\275\022\344?;\305\272U\233;\356?*sB4A\372\336?\217\231\026\301\256%\354?\360\3679n\322;\246?H|`\365\364J\266?lg\255\272\345\263\320?\210\007\276#\225\246\356?\235\360\n\377=t\344?1\2334\034\000\353\354?\344\352c\343,\214\334?J\245\340\376\227j\357?(6C^\273\205\347?\244#\257\304\267\013\350?\004\212\225s\037\214\320?@\376\0304\2273\202?B\323\302\252\230#\356?\354\250\250\324\204\301\323?\260(\337\022\247\313\326?,\030\254\261\000\347\353?\243I\201\034:G\352?\014|\030q@\037\356?\014\301\267\373\033R\346?\005p\013\323r\017\347?\220\347\034\246\257\234\321?\3646\302\222_k\310?\274~%\305G\001\321?\n9U\370([\331?D2\2346\022w\307?!\224\000\350\277\372\340?Rv\221\241\006\264\325?\276\334\017Vg\023\332?\006\2229\355B\\\322?\255s=\367\335\024\342?\257\312\3361@\302\342?\374\217\226\260-\201\327?\336\250\026$^\227\356?^\035{\276I[\353?\225\273P&$R\346?u\020p\273s\264\353?@\266\036#\245\033\260?\256\253\310??\222\335?\2133\006h\252\201\357?\336,=\226\3276\343?\200\004\301\314W\265\200?x\313mJC\007\276?Y(\227\r\005b\352?\306\325S\370\027\023\327?Ck\352\037\226\307\341?\344\323\212\035\252e\324?\0160\022WK\305\357?g\260\217\003\0236\341?\246Us\341H{\342?\013\310d\277\021L\343?L\211\336\021\352\245\311?\t\316\213\204\231\007\344?\374l\347\360\206J\303?\371U\020\276\320d\356?\234!\373A\004\306\355?\245\345}\035]@\352?^\362\324\342\200\330\324?\2722\265ye\227\353?\226\375\361\221(\001\346?\2402\272\035\354\337\246?Hk\222\350\377\306\337?\034\270J>\2433\352?T\214\002_\364\343\321?6\352\001\372\305d\342?\0225\270\204e\027\344?\264w\334\335D\277\342?\204\227\365\326\022\377\347?\212\205\371~\271u\322?X\364\354\375\346\n\351?\026\307\361wFA\345?]\3513?\016\271\351?\254\016\355\361=\345\352?N\364\225\016\257y\335?\330\225\277C\366\363\271?w\351u(\323\372\355?\220\212{ \000/\351?3\337\330\350\201\274\342?#\340&\014J-\345?p~\312*\023\320\324?r\236\314L\t\335\337? \311\276\315\n^\274?r#\300\372G:\340?\200\357\031\202\027\247\256?{\320\373\222\276\365\346?s\276\030\210\204\305\356?j|5\340\245\356\346?\360q\256\303\361=\340?|dE\202N\203\357?\322\017m\027a~\333?\032\263\363\314t\210\350?aG\364\304\203\204\342?\230\263P\266\352\014\306?:\220\244\033\246>\325?>W=\273b\307\354?N\352\211\022\260\236\355?\252Gn%\037n\357?\326>X\303\252P\343?\260)}\024<\210\310?\000\240\301d\030\322\311?\321\333S\021*7\343?Kxb4\262\021\356?\004\344\001\256\361X\314?\221\225I\323\r>\342?F\020]\332 \030\350?_HAz\025\260\343?\270\202\365\217\335\375\321?\200\r(d\007\330\241?2\356S\256\361\307\345?\25117\350\267\247\354?\024U\203\253f\272\352?\213\331\3118\301\361\350?@\325\336#1\345\330?A\336\302 \311\232\351?\027\344\222`\340\232\344?\371Mh\323\035p\356?\250+Y\322VJ\345?\262<\033}uE\335?mu\013\005Qg\340?\204\254+!M)\332?\320_\036\270\005\344\261?4\303\375B\036\264\304?\330\325\020\255?\260\357?4-\302\363^\314\304?\300Q\263\317\200\325\316?\312\234\006\006\274$\333?\234\020\310\367\207\246\304?\201\253\311\016_E\352?\210\177\026\004\216\204\352?:\367\352\233\310^\334?$\n\224\362\232\r\357?D\376B-\344\024\345?z\033\245\016\376/\357?\220+\207\335\310\230\316?\007Emz\277\216\354?\333\302\rL_\342\350?\2609UyOi\257?\230\257\320\340\376\243\263?3B\200\033s\000\353?\376\220\345\342\331=\345?\210\310x\371\010\375\260?\312\034\253\273\267\002\326?\0259\203K\275W\355?h/\020\213D+\267?\320\373L\203\203\022\352?\220Lx\333\037\361\253?\001ohG=\235\344?\311)\336\3161\221\353?Y!\203\232\361\234\344?\032\010n\316C\037\335?r\343\007\322j\321\344?Z7\311\021\323\263\352?r\223\274\003O\022\346?x\022\206YA6\267?\000\205w{\241;\311? \264\323\224\206i\234?\361\376~R\363v\344?\366\026\253\225\305\366\351?\320\224\245vX\273\344?\3145iKf\306\345?\212\374\214\250xs\322?D)H\361\2524\316?\025w?\314\030\024\345?\320\250]\225.4\324?\244\264\363\365u\023\332?i\336RwsX\347?\370#\213\333=\320\303?\310\000h:H\311\343?$\312\204\336\016\221\320?h\325J\350\365\221\347?Hc\244c,v\326?\330\\<\304t\303\356?`AS_\035\211\241?@\2526{>\014\266?!\235=\0038\261\344?\2342U\367/\272\357?\364\233w2\337\323\332?\340Cb\306i\266\337?\266<_\016\217\305\333?\352\317\n/\305\237\346?\010\\\2235\323\350\265?\276\360\326\343EL\322?\350\3441\264:e\307?S\215\215\330\'\177\340?\260\t\371\376\275\267\311?\230\031W\262s~\275?\200n\213G1j\231?\\\331\372_g\255\332?\300&s\3441s\231?\250\326i\312/\213\324?\320\326\201o\214S\320?~VC.T\275\350?\024\300\253Y\271\257\302?l\247q|\365\244\350?p\336\023\225Z\240\251?\002\335\034\361\206.\337?f\304\251\360\332j\341?\367g\370\263\357\352\357?\3600V\025\353\220\340?\024\247\357\327F#\331?\364\341\342\315\315\357\315?2\003w\303\010\257\356?\217^R\227He\352?\323\241w\272\3644\357?\014)\343\315\033\022\315?\231\004\255\204\017X\341?\374/9\024\227(\351?\2307Bt\352\005\331?\262!\334\335\372\326\350?J\250\320\334=B\355?\3233v\346L{\357?\273}8\263+\233\344?P\023\336\232\034\025\277?\006-\004\335\364\304\351?T~\363<=\236\324?Dc\332\227 \323\300?\004*<\035\034\220\327?\354M\233\r\327\344\334?D~\004\262\357\031\305?\340\301\020p\235=\256?\0060\2554^\027\336? J\326\331\337\037\345?\370V/\206I\337\336?1\232\345#\230\014\353?\376\330\367\351\257\301\334?\350\\\341\013\361\236\353?\344\223`\250\213\205\313?0\235\350\303\327\"\326?N\032\036\263kf\324?\320\210\367\214Nt\314?\021\316_\304\311{\357?\014^1\207\276\252\344?\210\t\224\367\344{\302?\360Nd\004\020\227\344?N\345\331\004\346\177\343?\334\217eb\235\215\303?N\217\177\334\024\275\344?\026\201\035\014\036\313\351?d\317\014g\342)\344?\260\246d\321\340\351\340?\036\223(\362\271E\325?j\250h\216\020\366\351?:\257\245R\213\252\355?\230\271\325SD>\340?\216\326\271eo\210\342?r#V\302\024u\323?\345\215\324\231[\210\342?\004G\222ci\030\312?\'#\017\244\231\030\357?\374a\257\251\213\222\350?\375\263\\ \263]\342?%xU\006\371`\351?8v\237S\t\323\307?\320\222P_\301\343\254?\316\301\025+\007\227\350?~G\377\240\307\315\330?\314\246#JL\374\357?\204\036\364\264\206\204\333?\375\014\367Z}_\342?\360\332\272\034\265\256\330?\330\265\342l\305\227\341?\272\2449\222\026A\355?\271\330\337Z8\322\344?\306\200\"\tg[\327?lH\227\270\\\350\353?K\306M:fg\345?v!\233dG\260\351?\022\237\314\346`\213\325?\252\237\234\017\243\325\327?\364\210\232\356S\014\344?f\211Z\216\013\376\325?\036\270\037\325\354*\321?\252`\034\323w\365\325?t\021o\3660U\332?,p\034o\375\263\312?`\344\212\205\342n\264?\307\202\216\204\201\206\344?\276\320\017\362\2010\341?89\307K\266\025\261?\334\350\302l72\353?\210\307\030\314\245F\357?\200\022\335\304\340g\254?P\361\344(\237\017\337?\214\366MH\274\241\347?lv\233$\312\364\330?f\223\243\352\3351\352?`\366^K\372\302\340?\352.\177X\335=\332?X<\240\263\244\266\271?\371D\020\306.\311\356?\230%\204\0134\366\317?\210\213\355u@\336\304?\360\315\354?\342P\335?Lb1\371-\213\346?\353m\232\327\256\255\340?\333R\002\210c\236\354?`\275\300\327\035\231\246?b;\246?\335\371\350?\027\255C)l\330\341?\027\346\t\000\360\376\346?\022\353}\2127\376\352?\360\001213m\325?\310\242\260IS\265\357?@\367\335\262\275>\307?T\233\026\333\222\211\331?\3126d9\241\314\322?\314\031\374\314\356n\350?Tx\354\241\304\276\332?\241\214Y\317\302\272\341?G\311u\021\257\247\351?H\207V}\307\266\343?\377PB^\212\356\355?@\337\004\342\203\263\220?\374\007\271\226\325@\304?rUmt\202k\334?\363Ox.L;\341?\353(}\260\005J\341?\252;\256#\3065\321?\002\246\2151\255\221\352?\342\353\370\305\002\345\325?;\177\212\302w7\344?.\231\265\211;\260\330?\240S@Gu\245\261?\'\356\036J\266\007\343?\006\365\224\266\305\216\341?}\327R/F\341\353?\342\277\330\250\204\t\341?\\\223\347\243\270\021\344?\024\016v\362\314Q\345?\017X#\363<=\350?\341\246\230~\006\325\345?\263\017\000U-\251\347?\220\010\274\2207\002\354?x4\251$\272_\260?\366d\271\273\246I\324?\350\360\000\317\272\211\261?\226\351@6\377{\341?\217\322p\265 A\342?\016\347\004\252S\014\322?\236\205\360\013\030\245\333?\242B@[\020%\341?&$\362\227\201\342\333?j\262\340\325\277\337\355?`)\263D\367\206\316?6\276:\305\177\004\351?\316\033\246\324Vj\331?\017\002\301g\231E\340?z\330Y\014\236_\351?&\343\373\377\344*\330?\334\010\212\343\205\211\311?\204\205QV\361B\317?@(\"\023et\257?\304\306\350\234\355h\353?\324\265Z\037\255\257\342?\214k@;p\336\310?\320\251)\253xH\270?\365\004\272Z\023\236\357?<\347o.\375\200\330?\324\320\301\\\323\272\307?\332\255\260M\267\r\341?\366\333\237\003\275\321\321?\"\311\350\035\310~\334?t\232\006\314\036w\346?\303\013n\017.\246\350?\266TtI\317\267\322?\210\234@\004\321\016\301?\032u\327\003,\017\347?\337y\314\032\326r\344?\375r\'\237Y\326\356?\362\003$)2\215\341?h\362\360\210\322\002\343?@ \003\ro\240\357?\000\237\251v\354\024\272?^\000\232!u(\344?\030\355\264\0270e\335?\332}\320,8\302\356?k\300:\205{\231\354?\355\016\301\354\276*\340?\313\200\016\212\230\010\353?\200\004H\243\024\224\177?\222\366\224\263\247\202\343?\006/~\253\336\\\336?X\252K\362~\206\355?\270> \302v\354\314?\3607&\223\'\321\306?.\037@);\367\325?\205\256X\350{\277\357?\212:\237\327\\\344\345?\253[\006%\033|\345?\202g\n\3646W\341?\356\356\245n\242\321\335?\316En9\305\232\327?\302c\371\362\032\333\346?\264\211\017\336m\243\311?\244~+\332\266q\305?i\024\210\231\313\214\356?\240#\330\276tw\240?\302\344\230\323@\345\337?\302|\013~B\305\347?\216\354N|\364E\324?\210\341~\3615\t\305?\002q\033\226\344c\334?V+\246\325f\334\341?\313\001,\257\314D\342?\274|\363\251D8\331?\t\020\022G\2520\352?L/K7\035\021\326?ea\007I\213!\353?\260;\372:\232o\330?\252f\022\014\313\307\345?$a\\\377j\010\334?@\273\005\337\017P\342?\276\030\217Y\356\376\331?\020c\270\017\237\232\261?+\320\356\021\333\027\357?\026\370\177@S\242\352?\210\234\312\363u\272\346?N\315\233g|1\336?\314]\307\232J\265\305?\220\023\235\210-T\273?\300M\240\305\016\277\301?@\236\326L\024V\345?\240\212rj\204\222\356?\312i\314\3237\213\347?d:\264\203\327N\305?\307>\321\307f\336\347?\300\243O\347\346V\311? \026F\257\202X\310?Hn\305}\021#\346?X\255\034\2578\350\336?<Wg\335\233J\314?\030\360P\313\202|\312?\030\246#`\362\202\264?\370m\216\367Uv\330?\340M\344\314\213\310\314?\206a@A\244!\323?\032\243H{\375\337\332?\356\203\366\271\241.\342?\024\203\354\367y\206\320?q\rI\217\367\202\342?\256\315\n\261\014\303\350?v\246P\271\313\207\356?\312\217\023\312&\205\346?\000\362\354\023\363%\203?\316\001\010C^\211\344?\266\033s\334\207\005\330?ay\262\215\247\355\356?\310H\240\200\301h\340?0k\216\376\2656\252?|>V\340m2\334?#gc\351e\257\346?\265\2074\212 \357\352?Vl-\023x\033\347?\t\226?\326\216\213\352?\360_\344\2629\370\321?\370N_\004\233\023\331?\022\2533.F+\330?\272\233\323\277\255\220\336?\252\266V7\332_\330?\3502\274#\000;\333?\240\026J\023b\260\273?\253\241-\313\255\001\352?\245\'[\237\274+\342?aL\'\256U\216\357?N\367\360\241\235\277\330?\r\257>\032\270\363\357?\370\325<\377\334\267\267?:\007y\331\370t\353?\3044M\373\341\240\351?\"@0\006A\266\333?Z\220&P\3126\343?d\205\020\347\300\276\324?\274\361\246|\3369\302?%\355\367\315I\360\351?\274\356\311\256\022\313\354?`\336\243B\312\245\231?8.-7\344\235\330?\270\344\353Qan\266?H\302\276w#?\357?\235\337\006\271\036\354\343?\033\332?\027a\244\355?\207/\345S\336m\347?\230^\307\003\\G\306?<o\303\321\021\221\315?b\347\347\327\006\374\323?\313\326\035j\016\260\340?\007(\036\211\375\021\352? \3316\374h\302\352?\000\327\375?\201\344\205?6\231x\371z\364\351?\225\317\022`\372\037\346?\000v)\261\346G{?\370u(.\202\003\306?\030<b\273\3219\355?\2308L\2135\347\343?\010\017\206\302N\235\347?\016\004h-&=\351?5\036\363\"\263.\357?\336&\204\302\0365\351?n\013\003<\2206\346?\374\375\266+\0256\312?-\301Un\373\235\353?\010gF\270s\365\272?\252\323\262\250\344\214\327?\034A\245\336\021\020\325?\352\227\0371\322\342\331?\240\354]\250\346\021\233?z\2017\013l\375\355?\200\237g\177\231L\226?@\262\026U\206=\337?\200\265\026\366\317O\322?\214\355\233\275N\356\351?\000fC\177\231\035\316?zb\256\306t\004\352?H`\334\273\3414\303?\330\312rl\251[\315?X\313\033p\267\036\330?\216*j\370\363\343\324?\t>\320\312\010s\344?\312\277>K\302`\344?\036\254\213\223i=\331?\010a\025\315qn\325?\340\004=\306w\247\250?\310-6\362z]\270?\221\364\212\241\030#\350?\362\027eB}f\335?x\205\341(\250g\260?\250\320\026\024\207A\262?\316N\305\276p\214\327?Jl4\026\320\016\357?P\223\027\306\204\037\343?\030\177\305\261\342\211\321?\350\262lm\247\013\274?\254+);\335\300\333?&\212\243\301\323H\357?\022\356\261\364\301[\332?\302\017xi=\030\344?\225\274\212\352\270\375\343?B\206!{\356/\336?\377\363\357\027}\226\352?\301\333\235^\207\003\343?[q\203\234\346z\342?\250\224\357E\215\215\327?\212V\201\347 \261\330?jh>B\335\010\343?\350\013\264\2165\037\337?\204vj#V\216\343?#\2509\331a\351\353?8\216N\025\002\"\341?H\234z>\3232\276?\337?\211#\207\270\352?\2305(\377:\363\332?XC\232\363\342\233\333?\327H\022\366/Q\342?\016\315\341Y.A\357?\312\252\000\022y\321\320?\036!P\205F\026\355?\000\215\213ilz\301?\343 M\262\271A\354?\357\243j!O\037\351?\2007:\343\3271\346?\200\213\241\326\264\252\342?\206>\254\377\300\345\350?\034\305\255\005\2618\327?\340z\0170\013\246\334?\220|6\344t\036\251?\221\024FLc8\346?a\265\334\213\200u\346?\240\363\354W\241\307\307?\215\237\235!,\"\347?Cx\365\2618\310\351?\250\371\256\212\222\014\350?\210\344(\203g\020\324?L{\343\033j\217\347?\243H\351yy\212\354?\026\305\360\265\363\257\323?5\365$\033\346o\344?\010\256\315R\374\243\343? 8\227F\002<\325?d{S\221\233C\341?\264\233\354\037%\324\354?*~\3600\236\037\343?\306\2439\356w\225\354?\322\016\214\312\272G\355?X0\262\256\244\265\334?\200\330Q\0177\210\260? \240:\335\010\205\237?\340\223x\236\343)\310?i\1778\033\220\033\351?6E\217\265\376\237\357?\252\\\230\361\276C\345?\276t\364T\0305\336?:t;\020\002.\320?\002!\347\240\334\007\342?v\022\234R\264\030\333?\304\3307\016\251U\352?\227(\214D\274\217\342?\340\356\232\3325\024\253?\214E\243\320\344|\327?\354\211\355`G\257\306?hH\320\224F\231\264?\376\240FQ\317L\353?\233\2169\302j\036\344?\r-\262e\256\314\351?/\327\032J\024\222\345?x\342\352\375<\006\266?L\251\275\004\324J\355?c\334\335zU\350\346?\345\347\204\1774^\342?z\206U\204h+\355?^\033\346<\303\n\346?\337b\363$f\331\340?7\215\022\241\227\203\341?\306t\204\374rZ\357?E\336\234\360\3428\343?Zf{~j1\343?$\017\351\374Vs\347?\360\310\364n\271K\331?&\343\000\335\205\331\351?\340\361\375\347L6\320?\032z\235 Zu\355?+\330{4\364\306\351?7Vc\000\321\004\355?\204\226\225\254\177\313\332?\000\200\032\261\"\310\267?6\003\240\363\305Y\333?l\013\304\370(C\352?x\004\374nj\332\300?\350\312\344\332\013\024\341?v\244\254\237\3625\322?\355\320c\036s\234\345?%\251\035\300q\237\356?\214\212j\237&\332\313?(\255O\213\343;\332?\3520\204\232\236\\\330?\250\226\024\313\177\345\306? \341}\2064\201\254?\347\236\355\307\353\250\342?\000U\213I\272\356\316?\020\003\326\270\031P\304?\032\251e\0369Z\322?\034\200\367\303\312+\326?0&\017\010\023w\246?\340\347\372\243\031\032\355?\260\014i\305\341\266\331?\334C\234\001\232\"\301?p\326\007q\347\250\244?3XEY\302c\351?\336\257 \017$\360\347?\204\331\032\306\321,\345?\342-6PtE\326?\325\260s[\367\353\344?\222\r\255v\214\035\344?\020\256\303\242d\364\246?\350\"\271\204\266\005\341?\n\003\277\342&\261\353?\340?\373\377M\342\353?(\375\313^\254:\272?\334\353D(f9\304?]\320Z\337\007\347\355?O/\214\336\231\346\350?\362\204Y\3178\355\325?+\276\355\215\006\227\355?\331\362\343%\026\036\353?\003;\276Rv\030\357?\245\177\277\202\240\255\341?\304\233\024\242a\322\333?\212\\\377\270P\263\323?\007\270\263B]\212\346?\335\272<\357\271d\340?H\257\022\260\376\014\313?\227\2242\256a\211\340?j#\252\220\267\347\354?\004\357r\2479/\326?\005j\370\311G\304\343?\\\233;\217Rj\352?\014\330^\"2\227\352?e\316\273\224\032\017\341?\324\362\345\210\352^\323?~\006-<au\336?4\363\342\321ha\314?\260!e$#\353\265?d$\232\305\017>\321?\360d\030$Ld\332?\351\340\275\362\0053\351?\024\215\234\273\nu\353?\'\346\014\277(\350\341?8Y\342\312\303\317\341?P\326\343\216\241.\310?r\376\326\213\177(\345?\200\311\253/\372\332\251?\341\035\310#\315\347\354?s5\201v\2135\344?\220\322\357B\302b\311?\035w\311\275q\271\347?\354\276\247L>\244\355?\344\243\207\303y\247\352?%\006\360\306\004\230\352?F\3573\216\373\264\322?\240\025\205\231p\212\252?\351\226\267P\"N\342?n?\272)\230\336\357?\346l\275\020\340\211\344?\000\363\021\026\026zl?\024H\021\227\366A\303?\030\336\240K\262\"\300?\340\260t\343x\255\275?\312\001\\\313\362h\325?=L\037\352\237\221\350?\212\3136|\320\226\343?\236\215\034\020f\257\335?\340I7,B\365\320?Z;\261\230=F\331?PZsr\333\313\306?\374\202\270\267?\340\316?N\022{@\372\355\327?\002\3249\201N\276\350?\246ZZ\242Z\241\352?ln\360\232&\342\334?\270\351\266\355\270\"\265?p\210\340\340\312\034\351?e\273\200J4E\341?\310\204\241k\003\023\302?\'\344\306[\\\257\356?\350\241\rc\002\366\320?\227d\004K\321 \352?@Yp\370\234\356\237?\006\344\311\313\271\377\351?\226\200;\255t\307\334?\257\242\017\272x\032\345?~=\346\322\024\034\326?\320o\324L)\247\273??V\311*H\327\342?\360\372~\266v\265\253?h#P\003\252;\310?\344i1j\003\276\336?\270\217I5\221\255\323?\\\216\327p\340\212\344?\033\223x\323R\377\356?\014\027\t\327\311\263\304?P\n$\344Y0\355?\007yT\233zI\354?.:\245\"\007\000\353?`\225\210\326\003\253\337?\306\221\300.\326B\350?\204:Xue\257\347?\007\030\307R\316\352\342?\270\237\323\345\334\221\325?(#\221\304Vb\301?\362\226\007\273O \322?\340\3400H=j\351?\212!.\317\000\276\340?\312\031\222\314\355\330\321?\021\230\371\240\205\324\341?\337B\214\367\264\210\357?\222Z1P,\263\326?\270e+W\304\275\341?\241Q\361\321y9\345?\345+v\347 \'\353?|\356\255\356\344K\340?/\342lW\r|\341?\237\242\322\204\256I\351?\343\242L\025\000\302\357?\366\021\315\350%\320\324?=\\\033\336\2147\352?\212\361\254\'\255\030\341?\010\365JO1\253\337?\016g[:\336\245\350?\204S\230\007\335\304\335?\214\016D{\r\003\305?\350wY\362\277\315\337? \350O\362\220\267\225?X\305\351^\025~\324?@a\331\371\003\017\312?\307\311?\274%&\342?\002@]\027\300C\356?&[\226\026\307\313\351?,\261=\024P\277\334?t\017\3750\302\255\341?\'\353\257\355\2118\344?p\013\030\231c\200\320?S\310\007 \200\010\346?i\000c\205\241\342\356?\354\234\303\347K!\320?+\272\317\334\035\213\345?\014\210N\027g\365\334?C0\323\237\211M\352?>\344-;\322>\356?\2016+\200\220\314\344?PT\367p\333)\302?\250r\333\223\007\317\324?\006\026\307\260#\363\356?BlQ8\367\006\347?\305\230\346@\355\332\341?\230z\006\325\017O\302?i\250\204\'\350\265\345?p\177p\200K\325\276?X\367\371a\345\331\356?Q\354f\232\371\377\346?8\2566\0232\354\331?\204D\'\r\017:\350?\037H\375\030j\211\350?\300\007\252f#M\234?p \036\314\330\n\256?h\003\342)\206\275\322?\360\001\005302\324?\221\260\307\253\312\004\352?\315\242RT\204\353\352?\013\251\222\352\207\213\347?\204\213\272\370\357\177\326?|\276\310|G\374\310?\310\363\371\222\030\017\335?:\034h\"\316M\356?X \\\212d\014\327?\354\002\210\275;!\333?\31283\304\n`\323?\256\221=(\210Z\324?\356\210\271nVn\332?\270\364\3414\370-\275?\234\235!\347Q\221\345?\247\003\304X\277w\343?\000|D\324\305\211\272?U*\376?Q\334\353?D}pg\323~\353?\333\203\260\226\3440\346?b\334\270d\256A\342?\351\003[6\303l\355?T\3166\234\234\372\351?\236y\002Y_ \341?\037J\236\262?\264\353?\326\340\232\201\262\370\346?\274\277r\320\010\377\322?\000\3132l\000\013n? \333\340\224a\216\311?\276\300\223\246\346z\333?\000\004\311\332\001\316\234?\210\301\316\214u\316\327?\263,\262\005\235\360\343?\354\343\016}\007\344\341?\"\261\264\016\365\315\322?>-\003\2118N\350?T>\327\342\005\357\314?\207\366ot\275\244\347?\204[i\335\010\250\303?\252\230\254~\237^\356?\234;c\324\246\273\345?\034v\334\225Az\302?^\357$\235\365&\341?\222+\274\346(\246\353?\326\203\005\356@H\342?\034fD\355t*\303?\254\307\320\225L:\304?\200\345\257\227Ibx?\\\327t_\360\211\340?\336h\304P\2165\337?\214Uy-C3\303?\3646\331\"\213\245\334?\333d\204\032\370\377\340?!hC\372\201\265\342?\020\'\034\376\307c\247?\2677\204Ua!\347?\256\206QAp\031\352?\325\010L0(`\345?\264\247\312l\251\262\327?\374\022\'\234A\271\316?\266~\317\032\253\253\333?\265+\330\203\033\360\343?\200\321\270\331)\354\273?\000\013\026/@\323\254?\256\223\300\027\215\003\325?\370\022D\215Sz\260?\003cC9j\245\344?\222L\0175\037\346\327?0t;\306i\332\317?\233u\003\216$\010\340?(\326\324I\363\n\335?\314\335R4A\323\326? \'Vf\205$\354?\246Kc\010\225t\337?\244\037[\221P\026\321?\001\277`v\211\221\347?\300H\017\314\235\337\234?\306%at;0\342?\252\337\352\'\247=\352?P\270\246\371u\262\356?\000!T\215S\232\251?\330\324f\211\331@\310?+)\277_\206\265\355?\300\267\t:\241\'\265?\214 \203\263G+\334?\334\302\335\332Wk\314?\001\360\242\005j-\355?0\267&\024\032\206\267?\200\251zA\356\212\211?\n\261\306\347\r\005\331?\200*\263\363\344\300\274?4\036q\215&\301\347?\356\033\261\t\207G\347?\200\212\003\357\\\215r?ic6_f\036\343?\350yx\2333\351\356?6  \274=\365\324?\200\021\032\034B\344\306?\326\3575n:\324\337? \221;FB\013\223?\304\331\351\315\252\305\334?>\253\237\210{\322\352?*\026\'\331\247\020\354?\272K\210\215\237\307\355?.\333\302\006\242\351\333?\244<\3433?\222\314?\020\216\004\306\226^\315?@9\206Sz\242\252?\200=\303i\336\031\317?\374X;\216\024\243\346?\271\265\360mh\203\345?h\2229\252\006\325\301?B]\371\275\331\323\344?SVw\376L \356?\374\213\231\206\1778\340?\264\002\355jk\022\334?\360\026\340o\341\212\346?\020y\313\304\333\251\324?\2017\313\214\237^\356?\204\357\357\001\323_\343?{\302a\207w\331\357?\356.\032\263\200\270\354?\231\364\274d\220\032\347?Va\352\346\304\005\344?\360\t$\321A\233\355?\314f\322\211e\225\317?t\311\247}\332P\325?\340\264\205\361\035\360\334?\300\243D\357\353s\224?0y\373\311\244\252\333?Do\221\350ry\346?\025\254\253\366\227v\344?*\310\200b\262l\337?ok\361{d\232\356?\326\310J\327Hq\326?\264\t0\303\230\334\337?E\246\001yH\237\356?\212\276\202\266\301\024\346?h\241n6\351\303\351?\026\337\244\245\376\001\351?\010+4\340G\246\313?x\333W\3026\364\326?\340\r.D\013s\322?\0226Z\321_\213\342?\213\21303\024[\347?\217\001M\323p\272\341?\030\341\237hEd\346?j\306\253\351\'Z\324?\324VS\324\333\345\350?y\\\222h\333\242\346?\276\003\305q\021\337\351?\264\232,\374\205\024\333?\300^kR\343{\351?1l\013\374U9\341?\334Zh\276\000\320\322?\331\3278\231!\370\344?8.X\\\n\217\313?\233v\304\306\317\355\351?\336\332\344=\376A\335?\340m\337\330\300{\250?\340\370\313\301GW\323?\230\336\220\351\374s\312?\266\300,\266\367\253\332?F\223\352\227\t\\\345?\312\"GVq.\356?P\305\356B\264\206\305?\321k\322W\233U\354?\300\2676\341\'\322\211?C\no\273\033\335\342?\354+\232\353}\361\335?\277\241\240\227\233\206\347?9\205\240y\301L\347?\370\340\277!>.\330?g.t`\tO\350?\254\363\270m\356\"\305?\250\261\007\336&Q\274?tDwa\377J\316?\002S\323\007\2425\320?\300\232\231I&\252\270?lo\3723\361\010\305?\222\206\225\226\346\202\336?\343\t\234\256\375\217\340?\215\343\200\303\204\310\343?\324\250\301\342X4\301?\240\226mS\231\271\300?\360\300\350\024\"e\271?{\256\2530\322J\343?@8\316\333\370\227\262?\300\317\226 $\273\261?\312T\362\334do\325?,\342\267\367\360\262\322?Z\034\347\301\274Q\325?\335\314\341\013\257\330\341?+q\240\006\317\031\353?\364\027\337\250ZE\312?`\203\367i\272\013\354?\250\034X\372\370\316\300?jqfJ\\x\336?\244\037\323\014&\010\314?m\232\200\317w\333\355?\332\276-\036R^\322?)0\341z]\030\353?\360\252\355%\244N\354?\242\223\311\221\307R\330?\250\236-\226\326\017\336?)w\013\224?Q\345?m%H\203\362)\355? 6c9oK\275?d\035\202\225\204[\332?\214V\335\261\276\232\327?\370\235^\206\242\212\327?\370\322\220\021\000\031\272?\320\037\233A\'l\307?\276<\375Q\337\030\320?\261\336\246\025\223\243\341?\332\372\322\373\023\253\333?\306\004\245.\326R\325?\334x\252\262a\317\334?\030\031\327\3364\210\357?7\202C\231\222i\341?>\357\221!x\250\343?\254K\276^\257\017\302?\246\227\354\243\034\202\353?\365\274@O\272W\343?\254{C\246C&\334?8\246\206\242\310\217\331?\327\373\020\214f\376\346?P\370\334@\226\262\337?\302\207\177\233G\351\357?\314\320\344#\327\346\354?\352Aj\032\354\334\320?\277\002^\221\215\377\341?\274\264\255E\025\226\302?\261\230\215\365m\240\347?\010\203\020\036\312\000\343?.\227\233SB_\352?\303m\211\032?l\344?b\377g\375\222\246\342?\350 H\340\036P\337?\"7\216\277<\216\334?\014\214C\327\320\233\345?G\306 \004e\250\344?\3529]>\233\223\333?\nxZ-\224\004\332?\254T\"i\202\204\301?\367\002\341$\333\340\341?6\230\327\367\250^\342?\034@Jbro\346?l\0216S\367r\312?\020:\245q\305\'\342?\215\260\275\021\333\312\344?\235Kpb\3372\353?4\211\342B\220\225\304?\320nk\277\247\r\327?}?\337\266\330,\342?\233\332\367\237\026\253\350?\376\200\212p\302\233\340?u\347\001\326\330\370\347?@\220\275\313-\360\250?\370\017\370\271\306\345\311?\n+`\325B\211\325?`H\313\332{\031\354?\242\254\322\342\024\037\336?WE3VN \355?8$u7\214\224\342?@\377&\320 \377\231?nl;N4\\\325?\206T\340\221I\\\320?+Y\332\005%\310\340?\224\363\034\326\310m\305?[>p\254Dl\355?\254\327\263\301\371J\351?\r\206\334\312\024\360\355?%fC\305N~\352? 6\220\020Km\321?\237\270:T\376\001\347?l\'\321\027\240w\354?\242\224K\261\305o\350?\260\000\013j\360\327\305?\033G\221Y@\010\341?\302\333\"\374f7\327?\304\240\373]J\207\307?\030\245\236a\231X\317?\220\203\363&\307\304\330?\r\244\365T\314g\344?WJ`\3124!\345?\260|\351\313@\270\330?\217\2268\336C7\341?\370\245\007\035,\303\275?\255\204\236rS\242\350?\262\372\247\266\345k\347?\306C\231\227\003\004\346?\231\310\372-\2719\354?p\303\217\360\352\351\331?\010V\310\343ss\336?\000uT\365B\362\272?\027\031\224f\316\224\357?\001\356c\233XJ\355?$\325\357\333\206m\337?E\031\276\014\"j\346?\344\374\276\247y\234\343?\372#K\375\343C\331?X/$z4\361\316?Un&\225\242\215\345?[a\235j>z\347?\014\036\206l\306\026\347?8\010\347\267\351\002\273?\177\022f\361\226\\\357?\250\347Ve\322\266\320?T\267\257\337v\213\327?\013z\312\265X\277\352?\330 \206\251)\346\272?| \255\364\353\224\312?\260\312\240\007J\'\257?\352\361\033\005S\200\335?\000l\223\270\305v\253?`[\355\321\"P\333?\332\214\331\003V\234\352?\302,*\265\002R\325?\000 \23491\330\021?@\024T\022 \362\251?\344\320\357\270wp\313?\240\271\230l\354\243\254?\320i\302>m\340\246?\010\223\\\254\315\333\260?|\304\300|\021&\344? \324e\246d\300\301?\260\244\365\"\360\216\341?\210\247}s\031\211\337?n\323\303,\266\260\330?\t0\310\372\344\207\354?XM\207\n\345\326\260?\346\217,*o\333\347? Y\"\317\255\364\331?\244owP\345\001\345?~\003\004*\246r\353?\263e\211E-\233\353?d\210M\004\0324\304?\266obD\351l\347?\n\310\024\210u.\342?P^\365df}\276?B\335z\244\"\216\336?)\363i\250\024T\344?~\335\007\203\245\001\334?\314\306\332\006\306\014\346?<\253%\305Q\352\352?@\356\214\363\026x\244??\177\177:B\257\351?\210\310\352\014\272|\354?@\335\321\365@f\262?\332\n\365\371\276\322\334?\250\026\037\261a,\347?\034%\233\2118\000\324?\236B\005\205\362\351\347?\010\036wv\327\035\353?\224G\371\010Wk\354?@A\304\316\3073\245?\204\362D`\344\003\301?\200\341Z\266\341\201\307?\335\017\300\177\024\371\344?\236\022r\317\034\000\351?`\330\246q1\273\330?F\276\343|u*\331?\2124\264)\365\237\326?\033\333$\273V\032\345?S5\251\257b\306\347?\324M\351\352\005\367\315?\322\320=\021o\237\323?\314\322,\373\360\\\332?\346,d\254\264\265\322?\220\233*\256\236\300\335?JYe\2163a\331?h[\260\2158\245\304?h\343.\375-\024\332?.zM\302UB\337?0d\026vR\247\272?\360\314\346\364\241g\243?|\376l\372)M\332?\210\315\255\034_\330\333?\352zH\177\204f\333?\322)\237\274WZ\344?\010A\244*\367\313\272?\031\224Hc\323Z\356?\361\356<L\356\371\345?*\242x\304\'\234\344?\014\232t\207!\374\353?\202\021\017}\261\264\353?)\360\304c\265?\346?\216!V\307\234\021\354?\214\007\324\214\332\275\347?J\357\254\304\347\225\353?\314rw\257\272\313\325?2\362\370\201\234\326\347?\274\307p\230\365\236\353?\000\r&<\0133\276?r5\215\224\007O\353?\004\200>\255\361:\316?\014c]\3624m\356?\200\3141\333\310i\213?\376\304\246\001_\351\341?\2413q\351\225B\347?\217\214\237\364C)\356?\324\271\376\315\005\263\305?\262\273\026H\341t\354?m\240_@\036\202\340?\313\021\230\363\347r\353?+\350\231D\375S\353?c\025\206\302 \002\343?\364\243\273m\334\372\334?\322\207\347\374\377\235\346?\241\357g\305yg\357?*\376K\236\024\325\330?\354~\346\000\224\251\354?\033\0365\354\271\002\351?\333\026\365I\177K\340?\204\332 R\001\223\340?\207\254\256\366\231(\351?81V\264\310D\336?\000\026b\265E\267a?\004\213\343y\202,\310?\324\203\3565\006\001\334?\200\316\030\310\232\260\331?\310}\027\204\235\212\343?\310%\374\276\265\220\305?\326#4j\'k\325?\000\363\002Q\323\220\355?\244X\325\320.x\334?\372\324\024gM\245\353?\340\005\327c\235\202\353?\220\364\016\323\221\303\251?\020\002\367\353\356*\244?\264\3266I\262\250\357?B\002\216w\004\377\335?\250\324\272R\340\000\357?\210\235\372\341l\317\343?(Hx!\277\337\304?\326\234\005\375\210\270\337?8Q`c\334t\262?\330\374\261\236b\344\274?\230E\030&\253M\264?H\350D>fx\345?\314 \326F\036\357\350?\352\306\313x\205\013\336?3\311Q\302\224\374\345?\362\253\032i\306\341\322?\250\266\240\\\301z\357?\346\332\220\305\235-\335?\000\2154\037lBc?\3246\326\257\326\254\317?\007W\200\034[\341\357?\024\204u\030\272U\304?\224\277cP\373\323\331?\347-\375\357*\211\346?\024D6j\271\036\353?B5\016\352][\327?8\221\314\373\006\347\350?\250N\337\016\007\233\307?\314f\213\301Y\213\355?\311\266ZAz\306\353?*`\332\230\036^\333?\377\025,\222),\353?\000\252\017,\314\337\270?\"\003g\2072e\323?HK\252\353o\232\310?5?\233\351\320k\356??\307\203\361C \351?Z\354[\247\216\001\324?\000\350\372W\365\021>?\204\266\340\215\r\327\322?nR\326\312F\363\334?\314+\233\232\220\232\327?\355\235^.\017\002\347?\217\355\261v\356\211\353?#\267`\341\222@\355?\256\206\356s\210k\336?\200\002\314\301\211\361\313?S\205v\267\t\000\344?\334\316\r\276\2501\335?\000t~u\325\243\247?\304\"\247\227VC\332?_\261\302E\226Y\353?A\354\216\270\034\n\357?\253\362\230\020Bw\347?\362\034-\332YH\353?&T\304\005\345\006\332?\260\002\310\310\306\246\355?\224VTx\023\212\310?\347o\030\r\202\004\340?k\274\270\304/g\342?\3367+|\264\375\333?\300\322\036\337\330\n\355?\230M\344\2260h\262?\241O\205q\344o\340?\344,\320G\231\322\356?tX\0309wg\342?\354\223\034\346\335\202\313?\035\263\331\013\270\344\346?\265\370P\374\320\243\351?\356\007\032\020\247\211\332?6\364C\177\235\373\356?@\254\211`\377\376\216?\271:R\365H\322\357?\200\263u\322\221*\276?A\353\226\372{i\351?H\177\356\370\007\221\355?\276\0240\237\350V\321?d\315F\367\237\351\317?\014\301e\0229\365\351?po\n\337\306\304\355?\256N\223\033\254\n\333?\300\177!Y\241\312\316?\225\n\202{\333\335\350?\221\314\231\357!\340\344?P.F\2068\210\353?\252\361\272\305\025\214\354?\014\010\212<\237x\300?P\350\340\334\326\342\332?6p\210\351E\332\353?\304\242F)\240\211\344?\032v\375\03321\336?\344C\270\250{p\357?\365\201\255\177\351\336\340?\206e\202*Hf\321?\272\342\216+\026i\324?\273\341tO\n\t\344?\314\215\206P|%\333?\372O\235\253v\r\347?R\000M\267\014y\351?:\361\'\022\033\"\326?C\266\213\214\270\177\342?p#\016E\"\007\333?\303\016\301\033[\257\356?\304\244\374j\r\375\351?\351\3418y\245\346\340?\0162\273M\207\037\340?\344\375gpL\346\320?~3cH+\002\325?=\335\263\024W\001\343?\030G\234\013\373\340\317?\010h\035s)\261\342?\264n\2134\274X\302?\360\374\366\271u\265\262?|4\314\001\325\320\311?\351\274\242\3600\220\355? \370\237r)\351\263?P\315R\036\356\372\244?n\247\325\302\014\334\341?\240\002\251\275O\210\332?\240\370]H6\222\277?\016g\177MY{\331?\336\001\n5\001\234\356?8\021\211{xk\344?\263\341\350\267B\355\354?0\004\322\307$\252\311? p9G\200\022\347?\300\345G\341\037\007\312?hq\201\372\256\272\337?m\314T\'\220\231\352?\000\316\005\277Y_\273?\npR\2518\202\326?\320\267O\307\373\326\315?\223E\371\212\367 \352?\330\273\255\214\023\346\347?\3073\252V\317\354\351?\323;\313\213:\333\356?\355\366\306\377\n\224\343?\221\023dkH\025\340?\220\311S\337#\234\352?\315\217\026\266\371\332\347?\265\362\346\262\376e\342?}\266\252\357\273\306\345?P\335\025k\t\360\247?\346v7M\336\344\354?\247\220I\177\243\023\341?\020\341\363\235\325\271\307?\374>K\264e<\313?\375E\017\304\327\350\346?\340zG)\223\022\221?\250\256\332O\033\332\344?\016qn\026\275\310\320?\022f\206Y \345\352?\214Z\310\356\273\223\326?\250\314\327\014\313/\313?\320\321\306\204y\026\272?\2025)\016\211\344\345?\214\016VE\303\214\347?\310]J\234\362\231\327?\366B\247\267\362<\327?\210\315\210h\375U\335?\230%;e_\376\306?su73\374\317\343?\304\300\246\324M\360\351?\\\361L\016\272\021\350?\254=\206\034g\031\344?\314^\357\330Y\246\347?\\\037\226H\252\365\314?5\3207\245\235i\352?[>\02729\250\341?\006\326D\210|\231\324?~\340\333\310K/\347?\300&\003\217\261Z\312?/\n\305\3167\305\347?ZA\252\310\036\203\335?,\371\361\260_\270\313?\007DG\365\371J\341?\240\323\316\341Q>\225?>qu\246>^\331?\274\225\034p\203\003\341?\246[\003[\230\226\344?\215\320\306+b\320\344?@\301\215m\372\r\307?\037\232Q\374\037\373\347?\000\231\264\366\337]\333?|\005l\356H\300\354?\000\212\300\'\237\033\263?\352\310\226\335v\n\333?\316%\024\035\375\302\345?\000\014\246N\334\242\300?b>0RCY\340?\177\203\375\234Tr\347?\274\360\262T\347\372\345?*R\253\33760\354?\327D\221\327\367d\346?+\021\177\'$\"\355?@\362~\001+\222\311? t\216\336\370:\252?h\027G\"\247\275\333?P\346=n\331{\331?M\300\365\244\264\227\350?\247\033g\211\266\333\357?\\4\037g(`\341?\010\233ej\265\231\260?n\326\332D:\210\343?\3207\254\337\025\272\275?X\345F\033_T\323?\351\232\370\376{\337\354?x\255\306\337)\355\263? \347E\273\032\201\257?\033\\\314\3110\244\353?\333\332]\326\321\267\351?\316;\023\371Wq\352?\310\2142X\222\t\353?R\377\325\222:\001\356?\250D\267\302\243\023\352?\331V\005E\241\206\344?\216I\274\243W\373\335?IKo\201\331\247\356?\312;&\210H~\345?\210\227\311.\247U\343?\251G\213\246\365\375\342?\177u\035p:T\345?\274W\341\316\232\201\355?\010\330\216\252Q\376\270?3\355>8\356\336\353?k$\261\324)*\354?\016\233\026>\333W\326?A\252\237\226OH\345?\030\271\020M\007\364\301?\034\332v\207\005\257\344?>\033\376\004\262\225\337?\221L\266\215\177\270\356?\200\362Q\261\203\362\207?\256\222c\263\224\310\355?\260\202$\372\253\362\324?xKkZ3*\305?\204\370Lo\021m\330?\272\233\353\'z\204\340?\274\246+\212\217\222\340?\312\316\365\363\013\010\325?\364\252HJ)\243\343?\350$\242\033\364\367\356?tO\355\266(\'\325?\300\342\210\247\370\323\315?\322\270/N\003\016\337?\354q\357\203~K\351?ma\354\014\374 \340?| \264W\272\361\314?\030\272\317\t\300\277\303?\256h\214\356\021\022\344?6\030\375\347\234\330\342?\235\215\325\340\231G\344?\002]\214%\005K\326?\347GsA\272`\346?\0245\226rAn\352?\354\242\215\251\302@\311?\177\245\033x\321g\351?\206\364q\332\226\274\322?\231\331\270\266\373\020\347?\362\206\335\205A\354\333?\2107\252\300\3244\263?\014\365zS\354\334\357?97=\020\206\372\343?*&$\2508\273\350?\356\220&\322\247\020\336?\257h\364\177d\\\353?\360\023?\315*\312\271?\3145\324\346\357\255\303?+\222z\311\235i\341?Z\255\224\222N\365\355?Y\025\007\207\263\353\354?\000\"\247\242T5\263?\266g\001\355\360h\347?P\225\371njb\277?\300x\254\204\250\317\262?C\320\332.\227-\345?\213\242\216\241\372\220\357?\252\320g\323S\356\340?~\331;-\306:\321?\364\347\354s\211\223\354?2\227p\350\237S\332?\202\344&0\2010\341?\221\264.\342\025\337\347?\372\267wu\204`\357?\310!\275\221\304E\314?WLHEh\231\355?\204\274\325\365\0227\333? \367\374!/\236\270?+L\212\376\"\223\347? \202\243\002v\332\237?Sw\032\256`%\343?L!\213\267\027\326\337?\034\337\205\367\212\340\346?*C\346\006~\n\343?\340\276y\222A\321\315?\346\202U\261\023L\327?\224&\322\317_\363\341?\034\221\367u?\370\314?e\236\002V\351\366\357?\335V\306\023P\350\351?jf\317\200\222\221\325?y\'\"T\341\264\357?\223\260\206L\032\347\353?\367q\262\031\005\000\352?\315\027\371\273\202\377\356?p\021[\266\304\275\245?t.: \372Z\317?\223cq\365\323\232\341?f+\215A}\t\325?HD\014J\022|\331?Y`\261\226\243\262\344?\322,\225\370\300I\343?\030\310\200\261\335I\300?|\020\245g\3152\315?\'\332q)\230\235\340?e\2776r^\025\351?\254\253,P\307T\334?x\232a\033U\000\331?\300en.3\"\303?@\361:\256\204\306\264?Hi\237\034\263\031\264?&\032\201\202\277\006\344?\344\022\022\347t\220\346?\254<\202\326\203\320\336?\000\\\253E\216\025e?\270\315\037\371\211a\324?H\366\034\014Q\211\334?(\316\266\2204X\314?\200?\353g\260\372\335?Lh\311\242\272\220\334?8\016\300\356\243\326\337?)\r\276=\357T\354?\020\344M\325&\201\256?\367%\347\232\036\325\345? \322\244#\220\231\326?\340+\0001\207\334\233?$\214\177\356R\"\340?~\271\364\315v\207\355?d\203\336\264u\322\351?\334\355\310U\306\376\330?,!\220^\311\217\331?\250\202\362\251\366\217\321?\024\365\205\311\035\263\347?Tx\226\317g>\324?\274~\202\216ws\304?\236\203\323\311\250\016\322?\017\215\016\217\223/\345?l\207=\206\326\302\335?\013\232\211\036C\014\356?R\220\3228\214\006\336?\360\370t\351\361)\343??\032U:|D\341?\200\325\013|\206\312\313?n\033\013\377\337S\341?(\313\326\366\031r\344?\017\002n\350/1\353? \333a\376\337\377\224?\000G\014\360R\337\304?n\265;IT\342\341?p\257k\265\316\277\350?\321\366\350J~\231\347?1\260\013jWS\346?\300`\261\325p\270\327?\203\340\275Z\316d\346?V\267\361=#\311\337?\350\354y\310\034\227\321?%\354\027%f\224\345?8\314\305\265\346B\324?b\355\231\223\365\002\326??\242%#\216\265\344?\0029\254a\034#\323?\000\271\310\260\251V\311?$\350LS\223\213\314?&\220\324c\277\231\331?Xh\210\017,\236\264?\340\345qAR6\272?(\346]\236qa\351?\177\216@[\314n\350?\367\376\254\223P\201\357?\213%\216\201\352\016\342?\333\002?/\261\'\344?H\226\220\024\307-\316?\310Q33Z;\303?\312a\360\363\216\360\355?:$G\344q\276\356?\260I\325\374\347\371\257?)\031\325G\330\245\345?T\270N\"\037\243\330?\250\210Zwo\364\324?xW\236R\373w\270?,|\337\001\204\317\313?D\200\004\311\343=\313?:\371\257\301\221\207\356?P0\021<\351\347\244?\303\266\020\350\035\274\352?\246\277\023\352G\350\332?\200a\302Y\211A\337?\214\315B\0201\224\304?c\361\035\3773\301\352? \264\225\360y\207\312?\332\334\355N\206\036\324?\326}#\255\361\313\350?\250\031\235\222\236s\326?>!\231o\350\342\353?3\375D\013\355p\347?M\352\265(h\352\353?\000\341\311\0240\206t?l%\"\033\354J\335?\273\217\356v\367&\357?:\2651\0146>\334?\205\351\003\361\222.\341?\2556\254\010\274J\352?\260\306+\221\316\346\241?\"\315]\014\013\326\352?^\264,\204\032\031\352?\330\305w;\313\254\351?p\242\256\351\236Q\274?\320\374\023\007\0002\341?\260\316\215\352_\261\266?\000\245\032\010\266\320\255??\277n:\327\322\354?hz\316\214fb\337?l\267\303O\006\370\312?\243{K\236\266\257\342?\274\276)\361\236|\304?L\0213\215\323\361\356?@\320\355G\022\254\255?\007\330\376\253\375\260\347?\025\316\363\310\362\233\344?\006k\354\033\311\005\321?\356`\203Hv\260\325?\255\214\261\315\302I\350?\320\2441\350\365A\243?\n\'B\277\004\311\352?\322_:\\\243^\334?\247\247\020;w(\340?\236\316\266@\036\367\327?b1\316tZ\000\343?\007&\003\256W\330\347?\320\237\333;\345\232\301?\2409\230\254q\343\343?\203u\360\037En\353?\n\222\365\356\341\353\320?\350\232\256Z\304j\304?\204\331\005w\307\006\355?\300\304\235\237\317)\264?\255y\202M\367\003\347?;-U\007\001\303\341?\270\t\277\250\350\266\305?\034\226\260\244i\032\302?\332\361\342\032\264\363\355?b\360\353\327q\250\345?.\361yN\rv\334?v\306\n&\202\322\336?\247\240\262\301mN\356?\250\244/xj\246\354?\263N\340\367\205\340\346?zqD\225\376N\356?\003\t\033\017\0067\341?\204Ul\217<\222\317?L\230\276\256\323\311\302?\251\226\213\340Q\375\346?L\322 \250\274\373\315?\322e\210\355\230\271\356?!\002(\343\203p\345?\027J\373\026\tM\357?\266\342\324 \264\231\351?\355\341\367y+\025\350?\324\217\262\000l\256\302?\214\313\204.\200\261\331?\033\t\017\330!k\351?\273\322\333I\305}\342?@\2669\365\233\246\354?\004:\322\3766\177\337?\3248\346#\001\232\311?O\336\357\260\261\370\352?\023\206\357i\202?\355?6\234\371:\027\353\352?3\212\244\3162\340\346?\320s\340\004\350\350\340?l\203;\037.\241\333?\300\276\017\243TL\247?\253\347\217\3766\n\347?\013\\\\\030\227<\344?\000 \313C|\370\227?\264\362X<i\365\354?hY\007\357\370\023\305?b\031m\202[\001\346?XH\361\013/\013\265?\246\310El\367w\327?O\235\331\234#9\352?x\336\033t\030\006\336?\3209\'\0347\352\252?\354\361),kN\333?\337\004Y\352X\r\351?\001y\264,\023\235\342?8&\"\374\337\322\273?\262}o\232Y\036\357?\024\3644\342v\314\305?X\007\272\377\263\354\267?\\{\3233\006J\326?\020\224\324[\217\371\341?%\020\305$\326\201\341?@\317 k\034\311\243?P\366sw\236L\256?\306SW\277\026 \324?\036\020\235}?\020\342?q\217K\326\347\310\343?\005\230\264\226J\202\345?\342\002<W1>\322?\240\224J\016It\336?\366\253\376G\203\252\356?\314\306c\037\257q\333?\221q\027\335\307`\342?KH\235_z\014\356?\234\346{p\257\263\305?\016;Y\253\\1\337?\360Rb\251\263\235\261?2\\M\375\036\352\335?\263\250\003\330\177\266\346?\363|\337\334I,\351?\000(\343j\366M\303? \277\370\227\217\261\316?\354?\220F\302\003\350?!H\224\304\360\344\345?\000zZ\250\306\220r?\240\372\332\326\374\017\304?\211\347\343\2461\235\355?5\n\3567\320\336\347?\300\352n\t\271\006\327?s\370\025\017\226T\346?\023=\271;\371\372\341? \336\262\334\263C\276?&\345`/=\343\343?\360\354A\3000\362\303?\364T\240H\344\267\331?P-\267,?\361\310?B\206w\225\234A\342?8\014\025\0338r\276?\0040#\274\250\335\313?\265\216X\241}\177\340?i\346\275\346\010\030\352?:\324\310.9\205\322?,,\201DF\355\301?\340\261\370+\352\227\265?@\001\021\277\212\225\331?\241\3648X\241\313\341?C\037\242\245\2665\340?\327\226\225\332\351\317\354?,\3004\177]]\320?P0\335\204n\313\322?d>\312\"n\250\347?T\313\372\211\344\023\336?^]\353\344\363\347\356?I\216\270\301\345b\343?\204\253\357\033_\256\311?\306\2245]S\020\336?d\034\n\314 T\342?\220\235`\034\302\321\347?\327\270\031\237/\270\346?\032\341\353\321\341_\333?\032T\220#\317\222\333?\252\351\'u\240b\330?a\232}\t\\$\343?\356dJ\030\025\221\327?Y\262Pp \211\357?`n\225\226$u\245?\353B\002\006\007\302\347?\322\360\353\226\364p\344?@G\221\017g\352\316?\\\202\255g\031\260\314?\332\272\210T\365\005\336?\364\006\236*9\201\347?\013\270\243\202 \254\345?c\222\2171\371\233\344?:$\025V\322L\337?\234\302&\272\214c\304?\320&\210@\036\016\323?b\032\265\000\'9\324?f\320?Q!G\321?\276\261\177p\235\364\323?O\235\327f\014\241\356?\360Sf\\\337\"\330?P\355\363\331c\322\334?\r\216up\032\326\343?X\227I\024\036z\320?|o\203\265\034\267\312?\245x\271\350\272\231\353?\376z\216\020\346\310\357?\300Z\r=\204&\270?l\003\207\234K1\336?\362\037\314\324\n\014\352?\244\234\267\334\274\034\313?^\247\323\225\251]\355?\340\222\311`L\300\323?\004\276\303\323\307\010\305?\'V\027\325\334\322\356?\226\344\243\246\240\213\345?\000\320\033\030_\375\332?\356Q\231\022\210@\342?x(\373\252\325\177\276?\204\250LB\235,\324?\210(?\037\006:\264?\020/\237iL&\343?\372I0\253y\314\354?\256\360kWZ\211\330?\000e4m\255\212`?\027\203\264g\2346\356?\254\371\262\207\371N\355?\270\310\224<\275\256\324?\200\370qT\223\302\233?\020\002\330\324\372\204\350?\260\367\351\221\316\006\312?\365\237\2157\"\247\353?\200%]A`\021\242?\325\356\2567\230{\347?\264w\360~\206\375\332?\024\337\321\214,\302\347?a\253\222_#h\351?\035\254\212\316\317\370\356?\r\347`\217\257\314\341?p\224_\211\307P\270?\334}\220\331\036\301\323?x\355\316\035\255\341\355?\024n1\337P\252\310?^\220\220r\002\260\337?l.b\201(#\322?\254\335}\010(\261\303?\250\315\\\313~b\275?N\310\354\000J\274\326?\342\232\371\202\000\376\344?\360z@*Z\001\332?\"\311\274\253\234W\337?`\344\225\212\017.\314?L#\022\332o\013\332?\030\032\033\340Z\241\352?\254\226W\365\215\250\304?\220\303JzQ\360\267?\\\205\200\226\305*\340?wi\207.\350\336\342?\224\254\236g;e\340?@V\375rJU\332?\037DG\240\306^\355?DW\301\n3\034\347?\200\317[wS\001\250?d\3358i\360\270\350?k\346\330\324\027\303\355?\2425>\245c\246\352?\235\317\003\346.A\351?\365VI*n=\343?\2640\004XU\337\353?4:\211\277\0175\316?\212\000~dd\265\352?\246\t\264\234@\211\323?\014\337D2\225\243\323?\253 8\223e\260\341?\307\221C%\006\232\350?\205Y\206\300\262\246\346?\340\277\304\337\367\t\347?\370p\323g\223\352\344?\320\352\266\322\242\031\335?\032\267\223\350s\323\332?\250\270\002\006\207x\325?m\262!\224\212W\354?\202\235\022\276\321\276\354?\306\364\315\366\345G\336?\330\365\'ZN|\260?\023\\\242@NF\342?\334\266\035\326\215\322\306?\254\371\014\177\303\356\311?\305\343T\267\346\373\340?\006\363\206\2539\213\336?\340\025D\311\037\372\331?\336\026\236\324\306g\350?\200l\225\3247\321\354?\"\311\n\032\303\017\355?\317\207\221\022\277\273\347?\n\020\331\221\353\275\340?\320\367:4\203\334\336?)\r\350\346c\310\354?(VH\216&\201\320?\300\333\253\347\246X\323?\036W\251\201=\351\323?p\346\231\020\235\275\303?\310\310\3517+\025\277?h&\005\302\247\300\300?\373,\253\326\312*\354?\322W\263c\3646\327?\337*\212\021\345C\341?\377[W6D\r\353?j\020\325\305W\242\356?\004\335}m\240\303\314?\204> \311\314Z\314?\270\251\360HQ(\340?\211\021n\022O\024\344?h\036:\205^\340\352?\344\020a|\230\341\312?\2357\363Q\377C\345?\341\335\266.\275\311\351?C\262\217\243N\256\344?\272J\200\213\260\337\334?\032\017\353\226Y\251\333?\331\205\026\315\0014\353?\212\354\276\240]\342\346?\\\347Gn\254O\306?\222\361\335\014\260\304\333?\224J3\02391\316?\220\377\026z\304\037\324?\020<~\361\326\205\327?D\244f\216\004t\345?\267z\013\272\346\377\346?.\030\232\305 f\330?\227\231%S\030\312\354?\361$\037R\364\262\347?\24021\334;Q\253?\301=\307R[N\351?\256\236c\361\201\221\331?\376%\351\317\312\202\353?J(~\236\2771\336?p\276<\300\255\361\333?\006\255\3312e\335\355?.G?\201\323W\356?\200\177\202\033\345\311\267?\266B\010\017\357\005\337?!I\303\001=\360\351?\336Yv)$\253\332?z\351#\227oC\334?\3148IW\200$\331?;\\\032]\277\'\342?k\211\001\223\326\263\340?}FB$\303\352\352?q\211\317\232k\354\341?\220\375\014|x\236\261?\340\374\030\240\210\245\241?\n\3224\035<!\356?\3432\360sc\035\346?\236$\216\244K{\323?Sr\333\353\0162\352?\031\337\322G\212\207\356?\3414\275\264\340\313\344?\330\222\216\266DZ\355?\245In\244\201/\342?@\217\261\234j\363\235?B\226K\241\222\256\357?\207\325y\346\010E\344?\3301\3729C\320\264?\026\325\212\022u\234\350?\323\335\240\030\023 \340?<\350z\364,\020\321?L\265\356cm\232\347?h\306\353\213\357\240\311?\350\303\260\255\335\263\266?Fct\021\305t\326?\260\325\004\363\253\340\254?\316\027\323\2455\341\335?M:W6=\214\344?\350\311\312\020\317\264\343?\000\225ad\014\022\203?\030\234\273\263L9\302?h\241w\221\270)\272?`\336\340rn\212\227?\263\310\220\273\351\222\355?\226\277T\251\n\201\330?Pr\206\225\243\360\247?\224#\361\265\027-\301?,\274\343\333}\232\321?\350\334\220\343\017n\337?\313.\2239\324\202\352?\300\177aN\323\235\263?q$\ru\006\324\355?\360\335^EN\003\324?X\361\221\177o\213\342?\300\305V \021\374\275?\374\274E%\002^\326?)r{V\\S\353?\237%\320\206\364_\340?R.\245\025\014\241\346?\203\201RO\202\314\357?\307\276\033\310\346\346\351?#\311\256\025-\270\342?DG\270\353\265]\347?}>X\025\3725\354?\223-\014\265\227\246\353?\237e\300\311\313 \340?\222Q\244Z7Z\345?@\036BF\270\316\342?\364\377\347o\222\225\340?\260#K\325\346\253\310?C\301C\273\347\211\346?\n\022\312\0342\004\320?\332\2310\007\313\377\342?<\366\027T\252:\323?\277\267\013@]\224\347?c\2477\263\275\007\352?\016Y\010\3075\027\331?\262\206\266\354\232\177\331?\260u\356q\212\021\263?\302\235\001r\305\032\353?\212\344\215\341\323\317\341?\320y\266\210\225\233\332?v\210\253>4\002\341?\300V\252\022Ij\344?P^\021\240\336\331\245?\001,\342]T\'\343?0>\201\033\0060\315?\342\231\036y\303\017\356?\362|\232B\026\036\357?\272\341;\331bL\353?\204\345\031\321\320g\343?\n\361\311\0247O\334?\225b\363\270\300Q\343?@\355.\353I\252\301?d\030>V\230\242\320?]R\322h\216\204\357?\034\324\315n\342>\353?6O\265\355\321$\346?8\307>\355ov\277?\372W+\037b\241\342?\250\217I\243lT\334?D?\364\020\270C\350?\244OZ\266O\030\305?\213\3340\245\013]\354?\360I\235\241\370\023\343?\326\264\366\311\322\t\340?\371\031]/\003\344\352?&\347\320\322Vm\350?`w\265\253:\000\231?\377\325&\371\204\023\343?\273\361\337\364X\353\350?J\003\374L3\355\340?\342\227 \357\262\267\323?\341\034\341\235O\363\357?\375\363\313,\\\337\345?\261\032\252,\272\"\345?\205\311\236\016\270\305\345?pGL\037\342\326\311?\034\211\316\r\245\027\333?\240v6\237\303X\357?\230\210\334\370+n\272?\200_)s`B\317?\302\250\315]\007\316\354?C\346A\3038\031\352?\320slJ+R\334?\273\004\305i\010\303\355?\200\265\304\374l\263s?\204\331\021\253\357\303\341?\320p\323C\315\307\311?\355\310b\320\347\356\350?T\275\2428!S\327?a\371\241s\243]\347?W\240\320\266\275U\342?\263D\327\240#-\350?N\332\023WAO\323?\2305c\375$+\325?/\252\2276I)\353?\236A\351\203;\321\351?\320\005\t\210\307\206\271?\242[Le$%\334?\344\204\n\035\022+\355?`\334n5\034\025\334?\177r\221\300\223H\356?~%\303US\324\345?\014\036\232&~\335\304?z w\334\']\354?@.f`\276M\314?x\013\204\256\350{\260?8\363H\221\351!\300?\210\224\232G3\217\350?|E\341\021\375\263\351?\230\343z:2\337\353?l\n\273v\212n\327?,\004\315\235T\202\331?\350\212\256\2321\221\336?\301\375\355\337\273\235\356?\311\347(\241\004\237\355?\330\035\3145E`\355?`\340\030\n\372\216\341?\224v\214\227\342\225\310?\2403\234\324\250F\322?\214\030\342\276~\n\331?iye\356u\355\347?\2350\367\325P\300\350?s\031B\307\355\364\350?\0203\335GB\204\243?\277\275 \244\263\273\343?\004\250F\007\342\230\323?%\302\320[\rG\344?\254\233?\2630\224\357?\305\211\031\255\375\276\356?:\250`\000@\251\331?+\022\230\221\254\327\351?\260Cf(]\251\341?\347\0267\001\025\021\343?h\370;\304\365{\305?\260\223\322\377\347\373\322?T\343m\217\2300\303?\250\253t\r\231B\277?H\364u\025\335\330\322?\244\261\333#bU\326?\342\025\206_`\225\321?\210\3442\274\030\017\313?\270\n\203%\255\232\304?\260\031@\306\365y\260?\004\320\244K7\346\352?\031K=\2252\020\346?\360\312\214\253\366\033\266?\326\3538\335\370\356\324?\033\330@\247\313\343\354?\300\201\272\\\262i\321?\236\030\367/aY\354?\200\343F\360\330\235\201?\304c\017\210\356\361\333?\250\270\362q\223\322\341?\223\030a=\022$\355?\370\237\033D\210\001\275?\266\326\216\3303[\327?:e8\"\230M\347?\334v3\204}\210\314?\034\242\\7\007\357\312?\200\026\276\000\203O\347?\230M\332\010\n\207\321?`-\374\310am\234? \334\274\017\\b\240?\"\274\345\311\240\014\346?\315\260~\036\177w\350?t/\355\245Y\367\334?\324\213\035zGS\337?rz\204f\274K\341?D\273\350\237\206\307\307?L|a\235\234\013\341?#\036\222T\270\323\352?/E)5`\246\345?\362\247\361a\027\324\335?\213]\344\345;\200\354?<\307\377\221CF\305? \370\275\262\345a\222?\335\345v\234h\243\347?\312=\361\224\223\236\350?\264a\n%=s\305?T22=\321\245\344?v.\356\024\324\335\351?vz`\200\264A\325?\250c\033\365\355\346\343?7\025\374\350\320\240\346?\376\264_\305\374\005\343?\374\326\254{\003;\305?\205\251\266HH\211\350?\314\301\273U<_\310?,\263\037\261[\230\310? \026\315qV\321\316?04\355\025\222\006\305?\\\302\362w\302C\343?\276x\220\305\001\000\352?\370\256%<\006I\341?0Y\250\024\316\376\274?\000\005\033\352\351\257\274?\370\256q%\277\266\277?\337s\256o2\337\342?\364\235\025j\021n\310?\332\354c\n\241\357\325?\270\027b\227\034\333\333?pu\331v\320z\347?\220+\036\341\242`\341?\225\336,\270\342\240\350?\322\237\362\010Z{\327?\304\033\225\252\207\027\332?^i\273\362~4\355?\374[[\025p\276\301? Xq\207v\330\225?\261\317\336n\332\232\345?C\253\200\337\001\275\353?\265`\320|!\037\354?\230z\373\325\305\371\277?>\366\031?,X\324?J\352\343S`\310\321?\235m\261i\322\252\356?\213\355\\W\233X\356?\026\215!Z\\p\333?lp\200fg\354\357?`\305\262\311\0333\347?\261\365/|zY\353?\253\216\254\347X\352\353?p\260`\000h=\314?B\017\027\334>I\335?\212Y-\027\003\361\351?A\241\271\014S{\342?t\204\353\376\213\217\341?&\212\226\037\354\210\327?\262^\340\274|\266\337?f\240\336\304\314K\336?\320\335;,x\371\350?\335;\360\226\335\247\354?\240\224x\334\233/\321?\273\235\005\377\332\207\341?X2\230\263\261\"\334? \006\265X\240\246\241?\001\337\321E\271k\341?\250\022\376#\333]\342?\037&)\302]\332\350?\226\214h\247\243\255\344?\020\034R\247\315\343\301?\254\326\0243\350\267\325?d\022\366X\204\376\352?t\001\222\235\261\032\302?-&E-m1\344?7\202$^\353\023\350?\200\371s\327\'\376\224?\330V\244\210>.\262?\344\237&\345\323\373\325?\300\224\337\370\317\007\241?\030Uv\031\355y\323?\000\330q_\020}C?\240\243\264+;\310\227?\244|\321~]\354\301?i\204\364\177\251\305\354?\256o\202Ho}\324?\345\3520.\231\261\353?\010@\367\357v\360\322?\260\203z\252>F\266?#\311\220>\027\330\344?=\305\226\204\036\316\353?/]?\341{\364\347?\223\373\027!\205\372\345?)\275\206s\275\265\343?\267|>\373k\332\353?\340\220\035\252[\025\302?\003\244\364\276\325\201\345?\270;Sj\343N\321?\301\372\026\010\033\337\342?X\024/\304|\314\334?0\326<\217\231\273\354? \350w\271\364;\305?:\r9\357%\212\330?\261\330\231\2063\263\357?\244\207\225\356t\013\336?\346\265\007\310\235D\332?\371!\r\0237;\346?\373k.A\256\302\350?\224$\206E\021\302\322?\017|!\373\347\033\357?\253[\325\303\025\205\351?H\003\345V\310j\345?\026\310\235\233\2436\343?8\321\330\277\202\203\327?\331\302}\177\254\247\340?\200\236 \356\027\262r?\334\026J\217\003\333\327?\022U\240|\365r\350?\300^\036W\327\022\337?/8\350\177y\'\345?\207D,\315G\331\355?\0204\264\003\264:\340?P\326\304\\${\331?\340U\315$ `\263?\320\014+\310\333\005\267?\272\004\231\027N\030\341?\214\212\3454i<\340?\304\325\002\351L\023\327?l)\266\264\371\336\317?\357\310\235\"\034\307\345?\225\177\260\335\274\212\347?2\200\224T7\000\321?\214U\215,i\334\357?\230\342]\026\350S\345?hnM\253\0132\336?\222H\205\036\025\302\337?g\347= \341y\342?\2735\t4\277\216\353?E^\344O\335T\356?\222\250OmG\001\322?\316R\270\244\332&\351?\001\255\363W\177v\355?\250w\314\316\355\310\322?\237\202\267\222\340\340\347?l\257a\2278e\352?R\374(\024\020\265\332?4\340>9b\247\341?\260\026\204\3549\003\252?Mj\215#\350\362\352?\020\312\367\335\304\361\357?b\227\231\244\036\002\332?,\253\030\026B\316\356?\216\002\340\313*\025\333?\240\020JJ\351\'\333?u\270\000c\201\311\340? \222\311<\274\313\273?\306E`\341\006\234\337?\246 ,Y\212\013\356?y\013\255k\251\233\357?t\216\267\355\006\031\304?\360\375\302l\326\335\337?G=\336q7.\344?\260_!\276\341\036\277?jC\234\240\226\350\330?\373K\005\325BE\351?\220\314\n\035G\225\257?\266\204\366\273\203*\326?\250\n7\277\364B\315?`\257\327h\234\301\302?r\200\230\016\026\254\346?\300\030c\343]\346\347?\334B\016g\202_\352?,\334\211\033a\252\326?j\260C\177\036\331\351?,\'\326\232\351y\307?\340\231lQ\237g\276?\230\247\271\201\r\005\351?\260\303\205r\256\005\317?8\300\352Hx\332\264?f;\361\345\032c\322?@\373\204fY\304\260?\\B\021\362\322y\344?%0\325\223\343\315\353?0\272Bw\204\177\344?LwL\222L\027\326?l,\'\363\304c\307?<\340\213\243\365\366\306?p\017\3663\314\360\246?\336\340-\304o\202\327?\303\030\306p\002Y\357?\004\"\324;\324\257\324?\224R\306\357\365\270\306?\210\300\\\345O\350\305?\n\366J\220\2016\330?\220\337\235\014)}\347?\010\033\022rh\303\265?\326\225\250fhG\342?6#\020\245\314\317\321?\030\203\014\033\220\013\330?8\223r\334\005K\356?\\\3035e\244\231\351?\324\037Y(sb\315?\220\317\315\036`\372\300?\001\031\277\247\021\370\346?(\262\347\305\377\177\272?h\370i.\333\317\344?\324\344\2261\262\220\301?\226\326\221(\3449\334?\2209\222\004Z\272\251?\334R<W\3772\305? A\230\326\305\256\313?5\262\321IW\010\352?\002$\321\361Yc\334?\030\214\366\252\370\326\262?vF\360\275\2160\353?$\221c\225\215\271\306?\310:J\277\210\233\341?\037\274\005?\235\221\354?xz\346\247\t\273\303?\350\017Y\304\206\002\322?\034\274\355\\\305\234\320?:\240\010b\373@\354?H[s\254\217o\354?\316\315%hL=\326?x*\'\033h\225\275?\004\032\0340\336\253\310?p\273J]\261a\310?\340U\211n\362\267\303?Q[e\366\307\014\341?\312G\271\343\346\272\343?\257\336h_6\004\356?\340\320\372\264\316|\353?\3424\372\005\342L\342?\'b8X^\362\351?~\036\206\0039y\327?@\353\353\327\366*\352?d\216y\026U~\350?\277o\314\340\301\322\350?6\344\302!a\345\324?\272 \374\005\324h\354?\214\367F`S\003\331?\376}V\326\300\001\320?\313\027F\226\304\263\345?:\204\261o\360\337\333?\"jY\377M\361\324?&\301\366\020g7\323?\246\322\035v\347H\331?`\252\264u+\207\331?\340\354\001\246!\005\317?\322\025\2213B\211\345?\030\207\007l\036Q\262?\004\017<\004 \242\306?\263\260\263\234Yf\355?Y5B\003f\256\340?\032>x\'\272\r\346?pf\244\217\376\234\342?h\244\020>\020c\317?\014u\033;y\005\304?\000\177G\214\336\360\327?\203g\376\003\325o\354?\330^$K\317\360\323?\010\010.\326\301\310\265?`OU\332\036k\327?Y\306\221&\367\243\353?\274m\354\231\367\265\336?t\224p\230\010C\321?\313\217O\243J\006\344?j`Z\252\241\300\335?\016\n\314\001\236E\337?K\244\352b\277\215\343?\030\322\311\204\020S\353?\316\264vq\355\023\321?P\033\212\312\017D\243?/+>]\013K\357?\316\207\230T2\306\341?^\035<\203\226\236\343?\330\360)f\203F\331?\016>\303\314Vx\353?i|\327\366x\217\355?\311\024\003\324\364\356\340?\214\334C\207\225\275\342?H\276\037\352\343\251\267?HP\225\327\263\313\337?<d\364\0178\352\323?6\225S\314\215,\335?\024\354\021\243\177\024\325?\207\336\n\222\013\322\353?N\362]%\315\315\332?\350\255Z\361)n\323?\366`\344v\004c\351?\340\023\205\204K_\243?X\316r9\263\345\330?\273\373oc\237\314\356?\223\313\225s5m\352?\340\022\240\347\350\316\353?hi=\"\325\361\355?\243\365 \\c\004\342?\243\360\341\327\330x\351?K\301\372\260\242\321\356?\0308Y\020\017\025\306?\244\375y\207\207\177\341?\354\346\031\030/\021\333?\254\257\216\005\313\202\306?\014\207\307z\373\342\327?0<\366j\022:\335?\220\235+\346LW\246?^\205\227m:\236\356?\362\366\001\222\245T\321?s\267\223\347w\304\345?\rWm#/\352\355?\027Z\207\200\3307\345?\210\220^\240\257-\337?\300\351\037\\\3005\242?\020\376|\2408\227\260?\235\320K\007Z&\356?\320g\007r\352\034\322?\010\0244\305\361K\332?\271D\264\254A\341\351?\336$N>\202>\357?Z\304\363\332\n\312\320?\252\303\352\'\037-\354?\223|`\372\311\022\341?\315`\017p\211\254\354?\234$\201\333eT\354?\256\357\t\325\037\257\351?\014\221JzB^\347?\006\217y\026\332\253\347?\213\217\212q\017b\343?r\226\022\252\342S\334?\000\234\247\267\213oI?0\234\373\220=\306\265?\224\025Vs\204\360\353?\2004\227\252\273s~?\030>\345\020\255B\336?0\340\215\226\233\266\255?\264\204\333\370\t\376\304?\3740\177q\036\014\331?,S\031LQ\313\313?\177\322\023#\355.\341?\206\006I\033\317\334\347?d\241\337\244\2175\304?\2145\032\\!\005\307?+X\302\271j\241\352?\364\313\200\303\364\310\311?\317(y\331/\034\354?\313\004\225a\256\205\347?\0217\371\322\211\226\357?x\031\203\263\r\341\314?,\353F\026\304\266\352?\300\035\313L\"v\256?\324\033\330\366\316c\316?w?XI\261{\356?\014\006;\024 A\356?d\372\252\324\265\263\326?\330\004\341h\0262\334?\321\017h\223*\216\357?\024\305\336+\314\237\344?f[\006\303=P\336?\242\223>J\352}\351?\221\203\243\0061\371\341?\346\227\217\377\003~\347?\276_\276\327\231\304\322?.dG\321\235v\336?(\247\335\020\275]\304?\r\2303\3670z\346?\220\023\275\005\022\253\276?\364VA\330\340\006\315?s\210f\213\305Q\357?\274\354\217\317\327@\333?\277ih\341Ge\352?\0241\262\207NL\330?Z\201y\271H\342\344?\220\312\227\343\016>\311?\360\370\302\177&\216\336?I:T\307\200\301\355?\240fT\213\017\343\235?\"\231\317\204\345\267\326?&\243N9\013\361\357?L\277 b\371y\352?8F\014\2373+\311?\206\000\257\335 \017\326?XO\206|\224\217\314?V\362\3759*^\354?\326\340\367G\213\221\337?\001g\337\344\203\013\353?\000\360H\005\376\241\355?\340\330\200.Z\224\356?\251\365`3\306x\341?(1\217\223\345\006\274?X\212\337\313\331\306\325?<\346\006B\256\'\330?%\372\"?$!\351?\227?o\227\212\216\355?\277\357\333v0:\341?\035\375\212J\t\324\342?\210\271.\306\327\202\301?\332\361T\374z\347\354?\370\205\316\327t\213\336?\356r\374\230\306V\337?\200 \017\335\205o\263?\276\275\231\037\336C\342?`$\276^\307\305\326?\214\347\272\200\000v\333?V\344\243\232\225(\330?\342\017\346\030l+\335?\230F\201C\026\233\357?V\010\372\221g\230\321?\252\364J\300\353\271\344?\0245S\266\266\245\356?@\246)5\247\311\260?\310\212\353r\201\305\270?r8\274\266N\354\345?\304M\334\221\272\316\345?dG\230\215\021\376\345?\000\027\322\031\006\331\234?~\200\250\313\023\035\321?>,\326\006\347\340\331?\227Ir\327\022\001\343?@\212J\311F\227\263?/2\361\245\330\t\353?\304.\2547\2470\346?&DpO\260\210\336?\230\212E_\033E\261?\275f\036\224\213@\357?\267\277\350;h,\357?\264\3056B\326E\346?\320\026\304\327\037\006\321?0\255)\014\177 \253?\336G\274s\374E\332?\002d\032\307\342P\333?\322u\272o\236y\320?9\232k\372K2\356?\351\340\220PB\260\344?\350\335\344\210\013\274\341?$\247U,F\t\307?\315\026\366|\264\247\347?J\210\320\370^\322\351?8\037\237\260\017\376\271?\351\251\234\220\345\034\342? p\001T#\272\246?POl\227A\223\307?\220\303\276\247#\200\353?\235B\351\266G\326\344?8V\t\030-\017\300?==\256\217\241H\344? \257q\342\342\270\322?W\254p\330\004\374\353?@\253v\251k\341\256?%l\255\324\367\257\354?\240\316}e\223\203\251?\344\231\223\243\321\333\347?\020\253&8\"\301\244?`\326\370j\325\214\275?\340\226?\000\3032\312?fJDG\243\030\343?\244\353\372\256\352\355\307?3\034\200FL\372\351?\250\306\3141\007O\325?\262\250\261k\275\211\326?\336;Z\n\333\372\342?FY\237\326X$\354?\360\241\270\236\3037\314?\223>\321\371\355,\354?h\221@\277p\335\320?S\212\322r\361u\353?(\337\370\360\007\374\261?\340!\257\246\200\361\334?{\252\230\350A\317\355?\300\2560*\241\211\236?Nl\201~O\343\344?\370\232_5m\255\300?V\371\020\324\231\316\336?\204\036E\376G\211\324?\270\023\024\275\350\312\336? \325\026X\005\344\252?h\004t!\336j\332?pd4\337\364\227\262?\314\352\365/\334&\332?\324\371aS!\375\341?xA\223V\202h\335?\300\3373\315\251\213\261?\374\360\204?\276\373\303?\240\205X\t\nq\346?{\227P\356\350[\340?\222G\326\002M0\351?\023k\303\233\017f\347?\352\016\034a\243~\344?8S\207\234\344?\341?C\217u\361\005L\353?\302\2343\246/K\350?\010\003M\377\333G\262?\276\302qT\317\031\335?P\222\322\245\244G\276?\330\216\330\331\324\032\262?\216\271R\341f\243\352?\000{\320KOC\260?\256\331R\230\233|\320?\021;\022\223\2617\342?\370|s7\276<\265?\234\327\3613<W\327?\356\261&\357\301S\347?\300\032P\371U\260\354?\000\372\252qV\234\311?\034}*\244\001\206\331?h\236\306U\271k\314?\032oGSk\357\333?u\215\27304\305\340?\324\231@\243\305\312\306?\322VvR/E\347?r\217>\236T\024\355?8\344\3734;\276\266?\000\352\2065\2051l?\274|\225\311\200\211\311?JZ/7\006+\350?;\215\032\002\373\264\355?TR\024b\277\263\353?2\241(\365\374D\333?\274\247\264\326\230\230\333?\222\252\343\275\313\304\351?\000\273\342\211<l\256?\020\245a\240 4\300?8\020\356\301\323F\260?\330\244\371S\255\232\260?U\2655\010\266q\346?X\235Wq\375m\306?\234U\364m\247D\315?CkaSPj\343?\240U\234\224\312W\243?x\036*<Jp\311?X\203x\302\376F\336?\330kv\316\010\213\347?\024e\216\270\234(\346?eN\375RU\201\342?\014i\320M\360h\346?\036\220\364\366H\001\357?\207(I\334\023\261\350?\032\242\026\324 \243\337?\036\347\342`\323y\354?\002n\215#>\324\332?\3254\232\335\205\314\343?\022\245\210_\020Q\357?\362k\326=\007\326\344?0\301n4]\315\257?\021\234\366n\332n\350?5\206e\333\3229\353?\332\267\256\326\214G\332?NAM\266m\302\353?\003(\243\262\0072\353?\204-\364\226\024\334\350?\000z\367:\006\274\276?W]\203\254\261\361\353?\364I\031.6}\300?\320]sPl\204\276?\216\210\336{T\362\322?\264\014{l\232:\340?\352n\240\267\253\375\320?^\177\361\321\205\035\350?Lc\035\213\002\325\357?J\016\334{+P\332?\351\027\332\200e\300\347?\201\365\265+\366\302\350?-\364\220}kP\354?f\232\177\320\373i\334?\225\373_\333\023{\342?\330(\310\266#\354\263?\330/\371\2556\201\271?\037\334Rq\000l\352?\234\001\201}n\032\341?\320\313>Z]\276\273?c=\270\001\346\263\347?\277}\251QfB\343?\254\221\341\330\262\367\351?\025\3561\377\033\320\352?\342\313JM\344\265\357?\240&g\330@\033\243?B{\302\273\222\207\334?\227\3727fO\323\347?\2002\214mdR\257?%\027\370\\\024\257\344?8\313\3363\\`\336?\035\313\231\335#\370\342?\262\016i\332\010X\336?=\231\351\250\372{\346?\326\212@\n\014P\345?1r\372$\236\363\344?\350\246= \241\230\313?\034\231\377\266\336\353\357?\332H\205\362E\313\345?YX\0171\310b\340?\010%\317w\004e\265?\201S[\213\031s\343?\332\300\344\014\177\231\355?-/\234\2062s\350?\350^\254Jk\237\314?\025\351\204I.\\\352?q\035\031=\021\266\356?\347\230\240uZl\346?)?\215\367\005\000\354?D\221\235\365\322\233\327?N\261t\013\352\312\344?\324Z\337C\202|\311?\212\312\357\244#^\321?\001\203wqu\245\344?\265\335\027H\202\001\356?&\315eh-\214\342?ct\242\242\355\252\351?`\025\252\267\323\262\276?\224\246\023\377\021O\317?\217\017>\225\245\"\345?h\257\326%\346\341\352?\330\232E\374\220\307\267?\266\255\204\347C\361\353?*`&\037#\364\336?\221\201\366\300x\270\350?\322\013\245n0\341\323?b-\343\310\353\335\320?\326/\370w\273\'\333?9B\007\211\355\210\345?\371\246\353\322\355\024\346?\236\325\nZ3\353\352?\274{\377x=\273\355?\270\206K\367\375i\277?\210X\267\242\311x\306?\n\031\002a\326\227\354?\314\226|K\242\001\330?\350\252\222\2646\227\346?\233\265\340\275\312\033\354?\360\261\312\203&\025\273?\"\260x\230\204\246\351?\212\034\316\325\241\205\321?E\024\327\261\342\013\357?\317\315Od\213\315\351?\224\204\232\336\017S\333?\255\322\374=\250\314\356?\250\205\230\010rR\324?\200\3425\353\317k\351?\234\276\223m\241\342\306?\350H\331\227\315\303\333?\3357\336\301\007\224\352?^\216K#R7\357?\240L\036\353J\205\353?1\255\001\212\333\330\342?\366\221\022\207Z\353\335?(\232\2641ge\315?\230h\027\\_\255\313?@\331\177g\277\202\205?\234\227\024\372\035y\326?\230\022\375^\267\006\266?\020\330\034P\320\213\245?\347\241S\2313\325\354?\277\310\256J\374\214\353?\213\317\345\354\210\335\344?\322\202\001\3643p\344?)\324k\374P\367\351?\367\026(<\027!\347?@9\234\347\324y\251?\214M\257\005\203\302\332?r\230\310S8\004\354?\342d\327}\374v\323?\343\237\327x\324\303\350?=\242\n94\374\342?\244m]$6\237\345?4\000\216\310][\336?\0109\013\032\316\325\270?\357J/\337/\245\353?0/\204\n\337\003\303?\200=V\210,\274\322?\336\354\212\234\271\240\353?\356d\3710\223\275\327?#\352\362H\213q\352?\200\250F\033\204\026\215?\331\234\300\024\250{\344?D\375\331\202\260\272\353?\0329G\225=\006\334?^H\244<T@\324?\250\273*\316\326_\305?\232bY%^\306\336?\244\r\t\013x\003\345?\023\203\023\321\030\201\355?3\315\033_\314\034\353?\232\251\335\312\\r\334?Q\253\245`\237\350\350?,\351\264msg\330?\316\325\3759:~\343?\3652g\230\360*\347?\030%C\016\020\216\301?\354t\207g\254k\310?\314\213\213\201\247\221\305?\3629_\371\177/\340?T\321\226\365\265\374\307?#\356SG\001\302\356?@)D\362C\220\316?W\260\004a\367\363\341?\210\201\202?8\325\307?f\246\263\227\344)\320?\316\374\r\207\354\322\321?\214y\303\002\202G\333?\364\2360>\226#\345?\2408%\321\251\261\352??-\t\034Xx\356?D\256\001\3271?\344?|\301\177\232^9\354?\254.&rE\257\325?\253y\265\320|\302\350?\304\3111al\222\353?\277\204M{\232\274\355?\\^\324\267`\377\342?ve\030_\201\t\341?\200W\311\004\265\206\334?\270a\305\243\301\252\315?0\344\203\347\253\303\253?(=Q\303\314y\310?\005\201\036\022\313P\347?ur\016\343u)\355?\024\034Ea\374M\335??(\355.\324\351\354?XM\\\360?\375\313?\222P\207\004o\307\343?\340\335\n\345\016\210\341?\367\347\nR\265\232\345?|*\"\020\032W\350?\314\n\026cK\204\321?E\2641~1\000\347?\000w\"k\002\206\237?`\360\"6\312\340\301?\320\335\004\213V}\333?\034\200l\006\2756\342?`k\364CLe\304?Q\344\262\340\206\316\346?\320i\364|\310l\316?\034>@\332\337\010\351?%&U\275X\335\346?\273\032#4\300_\346?U\313\276\013\350\031\342?`\320k\234\211\006\306?8\244\211\332@B\326?@\331n\365\312\\\264?l\022n}\310\246\331?8h\024>\244r\310?\334\021u\344j1\307?\334pt\206\371\325\331?P\365\007\265\217\337\327? u3\210\202X\235?\346\265l\337Y\346\356?\014(\213\001\214\023\340?7\013\365h>\367\343?a\226\356\240\307\337\345?PN/\262\273C\261?68x\003\362.\336?\036hb\377[\013\352?Y\314\240\237\017r\343?\250\252]\363\305s\262?\370mb\3560\231\305?\335\302\301\006lw\346?\340S]\276\207\327\356?\020\257k\232@\216\303?/U\261\374\031M\357?0\300#Y\360\342\306?\321\357\237\366\237(\345?@_\361\260B\244\261?\310\305\rbEp\346?\030h\2675B\271\306?M\t\345\212\n1\346?Li\355\245\202`\345?\036\334\324\245\325`\357?@\220\316\257\017\366\355?*\003n\006\340\315\326?\r\023\230\334\346\325\353?\334Zu\tb\224\312?\216\t\307\213L\326\320?\300\2107\033=\037\250?\304\035\035\006\363\302\342?~3D\177\353\313\352?r\372\227\010T\001\322?1\2758\225\247\340\343?\237\023\304j\342\323\350?\024J\334\276\341\251\347?\026\021\370\355J\334\357?\230\361X\352\332#\271?\004\033\206;\203g\345?\320\017\305\331\213`\312?6\370+\205\232G\353?r\303\374\035\261\"\341?s\210\026/\234t\341?\206\252{\377\2221\335?\363H<L\324\241\347?\020s\376\267\327\241\262?I\336?\227ot\355?!O\263\020\337\\\342?l\\}|\ni\321?0\331\241\362\313\035\276?\200m|\276Xz\346?\342\373IPV\025\326?\271\222o\3126%\343?\327\010\327\307\006 \354?\035\177f\2202v\357?^\316\251\252\037t\337?\264\264\212\225{\003\333?\010N\220\230E\237\353?\034\240\247\221#w\347?\006\342\365Z\377i\344?\326-\373\334-\355\321?;@\342/l8\345?\305!\351\234\\}\356?\204hH\026W\030\344?\315L\272\027\277m\355?7B,@\300\221\354?\013\006\242+\321\235\346?\200f\203B&\221x?\350\346\361\263gB\334?\237\316\343.n\331\341?\371\263\023\027\343\342\342?\270:K\241\265F\357?H3\324\212,]\350?Sm p+V\342?P\231\2479T\361\342?\2167\2320R\276\324?\"\241\230\006\240\022\350?\206\023\022S\246\344\357?4F#\026\030a\314?\370r4\001\265\327\336?\320\344}\007$}\351?\257\002VI\262P\354?\303\343\000\232k\354\350?u\264\003\230\233\226\342?;\230\014r\261\301\350?\234m\021QP\257\322?\222\373\313fz\216\350?\250\224xh\345~\276?\030\222\347\014,\247\340?$\206\274P\247\216\335?\344p\221\377\007\243\324?4W+\006[D\315?X^\211\375\2755\267?\240\311CL\004g\243?\226\277\231\333|O\344?\014\353\364\210::\353?\200\217\324\260>o\242?\020x\254\014\261\010\344?\014\353l\270i\026\312?\000\312\255\330\030\033\254?\320\r1\200\314\205\344?\020N5}-\301\276?<\\=\273\272\320\310?\".\360\210.l\336?\222u\234\215\365Q\357?hz\312\323\251\235\357?\267e0\000\324\350\342?\276\3305\221\225\247\341?\262mx\245g\315\345?,\262\245Q\343\221\350?0\312t\202\206\357\243?}\337\300\231\337\363\346?\340\220\230b\356\303\302?\354\013\357[\322\376\347?\020\221\200%\025\257\345?\350uk\357\033\356\320?\254\350\034\364\362/\322?\226\005\306[n\204\341?\247\303\021\272\2740\345? \r_(\363\223\231?\020O\257\257\370_\326?\376i\311\235\276\365\321?\000\357\323dh\337\314?\246\371\214\306\030\026\334?@\275\373\355\027\341\332?\010e\\y\205n\275?L\240G%Ia\353?\000\374\255\223\276\346C?\360\231\233$\220\022\267?j\264\035_\032\030\356?\244P\216j[*\324?\241\311\252O\274;\341?\200_[\3510{u?\214\216\307a\250W\330?\026O\207\341s\200\330?\354\266\326\314i\266\347?\026\213\232\243)\207\343?\336\214\241\340gp\321?\324\020*\301\263k\352?\310\300I\217\324h\341?\267\205\352\346\034\243\342?\200\273\347\rt\362\215?\372Xef%\225\335?~\304\204M\362\305\326?\200\335L\371\360u\246?\252\214\272\022\350#\337?\202\300\026\235c;\342?\234\203\212\230fg\313?#\3646\262\032\300\340?\250\007Bh\355\362\327?\250\004\263\276\014\342\341?G2M\354\306T\340?Dw\367\212-\221\311?\302T\347\257t\221\347?b\\\245\305d\205\356?\020\206^\356M\356\330?\204S\364\277\333+\347?\014\324\357\335VN\331?\275\332\207\215\002\243\352?\364%\240\222\"j\326?@\177\256({\345\201?\010\245\032\022\357X\317?\255OQ\371\264\340\340?\346}6\261\200\005\322?|gP\227&\325\322?09l/~\310\252?\000\351\231G/\227s?Js\346\347\323\327\341?L\354\2063\247?\346?FO\335\317\3015\357?\224d\254\310!\374\327?\0058\321\376\213[\344?&h\251\330J;\342?\326,\327[-i\334?\240\305\r2\'M\266?\025}g\006\377\262\351?\264\202\036Hx\227\314?\036\3108\301\3518\352?\200\356\335\222\235U\271?o0\002\032\325|\341?\215~\353\r\206\235\355?@\275\376Z\304\347\234?L\370\330N\335\262\343?\264hQm\273\n\302?T4\371H\327/\344?\234p\301\033\315\257\315?Q\274\234<\210\202\351?`\313wk\306\267\227?\267p\312:\330\035\354?\343U\277Z\031\234\357?.#{0\t\325\355?\344\241xh60\312?4S\004\013\352\357\317?\2071\344I\316\320\342?\217\212\321$\3419\347?1\235\322;\034\366\347?@a\356,\255\031\212?\0009\204\031\0376q?TY\312\376\000y\331?\234\245\327\211qZ\322?\274\327\314\252\361.\345?8s>h\306\357\261?\350m\306P\020v\327?0lM\375\222\341\325?6\344\014\'\347\216\333?P.1\242\241|\330?\330\215\244\345\004\210\341?\242\'Sj3\242\357?\274~N\342E\332\355?\260\205\210\350\302-\323?\030k\200\224\262\322\260?\306\346t\334yY\335?\337\242\251.~U\357?\220v\202w\031\206\246?D\376R~\340\267\324?(aE\254h\304\324?\003\240G \237e\345?\000\237\003\200O\237n?\276\233\372(\235s\330?\326\367\376\224\237\374\345?\211\214?\267\354\252\346?xXC\217\'k\321?\200\327\304N\2030\271?t\001i\357\031a\344?\275P\236\230\214\350\346?`\003\256]`O\261?\330^C\305p\317\351?\350\211XZx\026\342?\320\333\002\254j\036\332?p\265\271iq\244\312?;\256W\'\215M\353?rx\263\3354i\352?\262\033\2250\312d\353?\026&w\0354\352\333?\226\240$8\235\206\344?\256\312\272\311\305\254\355?\330B\263\311d\326\316?~OZw\305:\331?\300\037z\204\252\337\340?\206%\031\264\331Q\321?\364\\\332\034A\034\334?\206\234\027\345Q\017\346?kB^\002+\353\357?\3603\034\313\351E\347?\013\261\235n}\207\357?2\237\035ad\201\341?\267\034#\377\250\213\350?E\243y\177\265I\340?<\226\013\006\007\277\300?A\266Qq3\232\355?<\335mf\006\000\344?\376\214L\221L\370\340?\010[\240\324O\330\353?\2421\332\303\356\274\346?\321a\240\341\3461\347?\300B\362[Q\245\222?\271EfR\177\322\351?^\307\\Ju1\332?Jw\261\211\261\254\321?o\232 \003f\335\344?\202\2610(\2402\344?x|L\362\037&\337?@\354\362Eq\274\325?\030\237\034)\277\363\276?<HO\233\005\377\351?\364?Q\003\264\316\310?\206\021\340\3227\330\330?\256\357s\177Fe\321?\326\321\256d\001\036\324?@\"E\370\021\374\220?\276\222`x\315(\324?jeo\332\302\316\331?\376\310\362\367KV\350?\270$\231r\223\341\276?\330\261\031t|L\357?\374\234X\317\356\342\351?\206\376XQ\374\344\346?2}\323\377\315\376\353?\227\255\337)\022\021\345??s\356C\260S\355?\271\026\213\306\245\033\340?\374\'9\037\312\330\306?\200\221\343g\243\275\307?\003\277\255\205\003\246\350?\212\"k\271o\372\346?\300\213-\230o\206\252?\220\324\027V\361^\256?\362\377\307\363\261\301\330?\024\201S+~\220\316?v\325\236AFh\323?\3461u_^\026\321?Y\0276\264\0008\355?jY\037M\341`\320?\024\005\263z_I\332?xx_\332\250L\343?\310Z\225\377\371\034\267?*\271!i\005\353\356?PQ\220\004|q\304?\306\036\214\236x\375\347?ho\323\007\227i\316?F\255\342eo\261\336?Lz\037\264\n\203\334?>M\207\205}#\341?\253$b~\005/\355?\314LWRM\311\301?Dx\334\314\031?\343?\240\363\037\273\204?\335?\204\n\365\370\234?\315?l\244\254\346\322\227\310?[\032\200\242\3539\344?\010\000\345/\200`\330?\312a\322\367g\"\354?l\202&\010\247\023\331?\334EB\261A\026\341?\177\363\016[ye\343?\326\333|\1777\\\325?Y:\343\355\231\325\352?D`\030}hO\344?\200\336TC\247\214\256?d\260\207<K\216\324?\226~\206\210\235I\340?\001\005\303\233\024\320\353?x\256m>\ry\345?\005\224\032R\376\367\357?\000\336\355\004\232Fu?\014\325\333\224\343\224\317?\004\035\275\372o\377\316?\330\036\335YxB\261?\321\345\014\3661D\347?\214@\252(S\200\325?\020\222\312\362\3039\336?IQ\003\323p\313\350?\311\224O\230\215\302\341?\322\227\260\226(\241\356?X\\=J\034\256\322?\316\345l#\031b\334?\344\371\222\350\032R\330?\203~\326\303+\364\357?\334\332-\323T\353\340?P\177\n\025.d\256?\201\271\215\216u\340\356?Rv\003\277hQ\321?X\321{-\237\213\353?\300\237s\031\230G\325?\371U\333\315\306,\350?>\030Mm\243\235\353?\'\315\373\017\245\251\354?\350\336_\311st\277?\253\327\220\363\202\315\354?\3648C\364\314\332\302?P%\335\245\372\246\331?A\334\206e\256\322\353?\215u\231\341\322\307\341?H\303\245\21539\350?\014\311\244\320\037\004\350?\"\225\000\274\241Y\354?\270)\316YI\021\321?\232\331]\270\212 \355?g\"\364\314\243\231\352?\373\352\035,\022\254\340?\203\245TO8\364\351?4 \251\356\222\251\332?\263\241\246\013\225\021\340?,\241s\255q\337\313?~Z\033\321\234h\355?\034R\357jO\330\333?x\007\'\230\242j\333?4\302\376\027\364\253\353? \211\316`\260u\243?@\256\007\250 l\231?\000C8\257\037k\264?)\242\344d\323\315\342?IX\244\305\267\246\346?`\204\"\037\354\001\330?\316>\257\2649}\326?\320]>I\353\223\310?\t\260\373;\233\005\355?\301\311\t|\177\242\355?X\361|\276p\362\334?P\337\r\006a\331\270?\200\3513\324\270\307\276?\304N\373\245.A\330?\221\211\323\365\341\032\343?4\312\262\313\275\264\355?\003\207Y\234\221\346\343?\234\317Q{\371\355\317?\334\003\014\016>\353\357?\303\245U\313d\360\356?jq\205EY\234\352?\204\217(K3>\312?\324\036\024\274\003b\316?\210\371\270_\251\346\275?\236JT\300\033h\323?\220\362\377\363\022\225\250?\326\005\035t:\241\332?\271\025\343Nw4\341?`\014\345\335\216\357\241?D\005\236nk\001\352?7\305S\217\034\351\350?0b\031t\2730\324?\204E\351\025\232\341\354?\t\311\002\207\2408\346?\342\3512\350<\245\357?\266\363\351+aI\326?\265\330x/\334\232\343?\340]GS\302\345\236?H\275\315ay\314\342?~0.\256Cf\333?)\007\273\206\334\242\350?\240\255z\003[*\254?0\223>\2057\347\250?\254\343\035E\037^\326?\240\334\025\"\230F\255?\232R\206rf\320\357?u\356\3011}\341\346?\310P\231\006\352\370\301?X\337\215}n\225\277?\340%\306\243,\003\314?\300\242\377\221\247\253\301?\240\325!\013\177p\332?N/\202\t\221f\356?\206\344T\304Q\362\350?0\372\334r\340`\353?\004m\274\244Z\244\343?\252\023\366\370l|\353?\000J\302\345]w\250?f\276\2068\323\300\343?\241\311K\2059\242\340?\002\337\n\344s\255\327?\200\025\"\312K\236\317?\274\322\366\261\2735\344?\360\027\007\226\315[\271?\354\223\204L\033\213\302?\200N,\256B,\222?h\3177g\310\247\351?\026\356\314P\006\t\335?\304\3545\227\272\343\325?@<V^I\265\264? \304-\224\261\256\305?\340\320#?G\237\306?\325\340\344\316QV\355?eb\022\341\244k\343?0U\370\032\223\256\275?\204\323\201W\361\211\324? \313EE#\320\334?\334\243n\373e}\305?XjX\025\326\312\270?\372\224\235\233\305\273\356?\007\212aV\235\013\345?\016\004g\206\323t\336?\220;\305\020\322z\244?\372V\265\334\026\026\330?\250\016E\345\233\315\333?!0\216\302\\r\355?DA\004\254\016\027\315?\246cL\003\372X\322?\301\2132F\325\364\352?S\211\367[d\231\350?\200\313HZ\324\247\274?;\312\017\201)\304\345?r\206\234<*z\347?\330\330\3579\010}\274?s?m\005~\321\357?\r\301\265\217\314\255\340?d\261\306\271\213\325\353?P\305_ (W\345?\020&\267/] \343?&\020~f\226\222\353?\234\031\356\260G\322\341?\360\005\017Q\273\033\344?\264\274\026\032\271\241\351?\000l|\260\r+C?\244\253\023X\332\370\343?\332&\234\313\221\362\331?\320W\000M\332]\316?\000\243\215\334\210n\341?[\024\177DK\023\345?X\026Z\002\224\324\306?~\2128g\370\001\353?PE\266m\211\227\302?\220\022\241\215\007\256\265?\345n\245\241Mt\350?\370\361\335[\247V\346?\274\250\005n\260e\354?\376\n\027;\313\256\353?\262\020\273\207$y\330?\310d$\217@\242\264?/\262\032\007I\346\340?$Ydk\3572\353?0\027\243b\001l\257?\216*\350\222x\217\350?\226\362\373>\346\340\346?2b`pTo\352?\027\216\237\357]\006\355?\032U_\007./\327?,V\351i\270\351\303?$l\377\302\330=\355?~\013\034\372\265u\327?\342\273Nw\002A\356?V\367\363[\351\332\355?\245\347\001\320v \356?ta\003\272[\203\326?v\224}\333a\201\345?\354\306g\014\323>\351?\220\246\320)\372\251\326?\340uy\205\217\375\342?\300\367\013ggo\342?\354\227!\363\276|\336?t\032\261\335\240E\304?dI\035\322\301\020\325?\260Q\tB\321\372\352?\217&[C\250r\340?\371p~\354\000\327\353?]\250\334\344Yc\340?\273/\314CG\222\346?D\027\271\0323j\304?eK\211\301\030}\353?\270\273#t\332\344\357?\300\307\254\330\260\271\232?\024\353\227\204\177\356\354?@d\366\247\236\327\211?\346\002\373\201e\272\334?\377L\014\271\372\226\344?\346\220jWR\031\347?\255d\372Vrl\350?\030\343u\213\337\367\345?\310\331$\302S\001\277?i##v!\240\357?\220\272\371\002\257\277\336?\377*\005\314:\353\341?0/S\230\240\310\260?\261\020{B\010j\341?(\275,\\\315\263\271?\274%T6\256o\306?\006K&\2120\226\331?\304\372-Q\223\t\321?&:\212]\317B\350?\364\004\266\262\313_\351?\020/\rN.<\240?\017\275\214P3\217\340?\013\237\202]]\023\343?\324\371\370\357W\021\347?\330VjTSQ\316?dT\335\273\300\276\334?\363\027\'\013Q\362\353?@*\214\276\351\362\234?\323\216\341\363\321\357\350?&\320f0\303\r\353?\200\363>ai\271\265?\357P\253QR\272\346?\003\352?e\347L\340?\007\224\312<\2110\341?\374\352\'t\212\n\354?\360\311G\234\233z\265?R\343\363?q\200\331?\264E.$!\227\322?\250S\235\024\002(\325?p\023\353\017\331\356\357?H\020\007uk\377\277?2o\265\270l\324\334?Vve\024\225\317\320?!%\212\235\322d\346?\225\327\254\021\262\375\343?\374y$\266\222k\320?s\311\273-n\216\357?,\373\262}\262\035\302?p}\225\352\347\337\251?\222\022\253\227w\233\342?\000\226v,\242\313\276?\004\232L\213\224U\341?\225|2\350L\225\345?`\363gf\2403\307?\201J\257\215\333\274\350?\020\325\231_L\226\243?\371 \235\221\236\223\345?:\215kU^e\320?f\207oH\231\243\332?\254\205\321\315\303\002\304?\312\017\3006E\001\332?\341!\272^\317\216\342?\300CJs\354\037\216?\373\273U\272\300m\355?\031\221\037\327\315n\356?4NNj\375R\340?J\021\346\2249\262\352?\034%\000\371m\202\343?f\326\226\222\261w\357?*N\022\233\343;\334?TA\200\341t\226\356?\236#\325\024\200\373\331?\317\307\006:/\254\342?\336,\255\333/4\326?\350\026P\313[Q\266?0\241\220\341x\177\304?\316\240\010<.F\354?\262\233\270\262*d\330?\244\277\237 H\n\320?\340\026^\035P\233\303?\300j\2003\353\346\272?|\rF\204\303\317\335?\327\334E\331z\r\342?B\210\010L=\277\340?@^q^\003\t\206?5I-\" 7\340?`7+\373\320\206\254?.?\222\322\022\367\345?\211U\004\355\035\252\346?$\222\224\3103\303\345?>P\360uT\350\330?\255\265jf\324b\352?\316\250\354`V\324\340?\204\252|\316\345\307\331?R\343\246R\246U\326?\204t\245\336\370E\330?\020\177`\207c}\312?D\345\002K\273\312\306?\200]\303\240\221\355\317?\377\372%=\027x\353?RJ\016\260\204t\331?\340\313U\014\236<\337?T\367\230\357\007\260\321?v\376\365yV\335\354?v_\321T\354\007\333?E\"U\3504!\344?\234\310\350\333\351\240\342?\2546D\306\035\346\321?\262\362#\314\016\313\321?v9\177\250\004v\341?l9\3275>\246\304?\323\013WiSg\354?\313\252\247\254\"\014\350?\000\31346\374\345\254?\314/EZ\375a\304?\026e,\\U@\354?\362@\316B5\330\345?\326\276\\\n]\243\355?\204\335\256D\177\037\320?#w5\276\330\340\343?0\030A\311\207\\\351?\230\307\241v\033\004\352?`?\000k\2350\325?8\265\237`7\226\323?*\021F\224m\002\357?L\016~?\227\271\326?\364\324\263\006\004\312\317?\370Z[\314\265\363\345?\342\275m{s8\330?\010R\207yy\350\346?>T\364\276\200\250\333?\224\212x8~\365\306?\220\rS\321\357\244\342?t\213\344\251\260\256\325?bpf``\\\337?\032\001\024\330\005\037\342?2\271\242\356\234\r\320?$,L\200\262\360\324?\2211\331\204.\355\356?4\245t\365\202\240\342?\010\370<X&\270\313?\270)\331\212\265$\264?Q\343~_#\204\344?8\003y\035X\243\356?\014\177)\361t\032\323?\030q.\234\202\234\272?Py@\233\232s\304?\234\'\357\223\227<\356?\321!MP\345\305\353?\321\346\266\203\206\371\353?(\370\275\343Jk\355?\005,\311\022\377\026\345?U\301iN\270\234\344?y\364\257_\007j\357?\010\242\343\261\265^\277?\3748J|\356\205\323?\205\340s\247}!\347?\301\327\2217Yc\353?\210\357P\002\240\037\302?\340-\265\213\306Z\346?\n#\210\371^\216\353?\230I\261\207\\\036\346?\214\307u\033b\240\302?\3005\035S\366(\203?\317C9j\225\370\350?\240\331\034[\2716\322?Gzf;D\270\347?\024b\315\2139\325\342?\302`\231KN\277\357?\360\220%\020\014\206\314?\300\306b\232aZ\226?\000\344\364\331\372\270C?\254Ki\224q3\335?\317=\271\354\275\215\344?D\237y\360\334\005\327?r\016\324Bp\006\324?,\233\274:\030\364\304?\206F\261_\364z\345?L\n\254\177}\277\331?\020\251t)\234\210\341?\215\271\247\007vz\345?h\253?j\235\325\331?\217\257C\260/_\346?8\272m\233\327\254\310?Z\272\275YCR\327?\234\331\207\247\000\005\356?\000\016\320=\370\036\201?X\233\276n\030\340\305?\210{H\020\203\034\344?\362\2733\026k\025\346?\330\330\035\000\017\332\317?[0Sv\272w\350?\347)\020\304\217\266\345?\300|(\003tF\265?\243z\352C\351R\354?\304P\353\234m\261\350?w\227?\233T\t\340?\356D\314\213(\344\333?:\220w\216\030\265\332?\225\255\200\020~\006\355?R\3032Q\355X\334? H9\244\375\237\243?\321+w`\273\357\344?BAZ7\315Q\357?\274\370\235v\r9\351?\340\352\364F\300u\245?\033\020n:l,\342?\272\231i\305Z\321\357?\270\250G\2335\325\324?\220g\276\250\" \347?\212P`\352{\357\336?8\357\274zu\327\335? \016_o\365%\354? \" J\335\305\332?\234\013m\337\364\023\325?|\255\234\024\223C\305?.\004\004%?\251\343?\020\023Uc\340\222\275?t\016H\273\177=\330?\332\314\177\233\266\216\343?\010\377\201\231\332\351\333?\210\357\300[v\322\334?\031J\232\324PO\350? \020\201\346Z\364\350?0\001\262.t\"\331?f\324\3166\002G\320?\3400\355_\3547\316?\232\016\336\340\020\266\331?\260\020\253\302\212\237\276?^\rE\257\363P\350?\010)\365\030)\305\352?\016\237hW\363\227\352?\035\367\274*\024s\354?h\322\036\022\217\351\266?u\3279C\2501\355?\361\353\274[-\031\347?D6\231\024\254G\307?\004\033]y\320p\324?^\375\231\240\\\023\342?\204z;\035\234-\345?#\017\313fy\221\357?\355\025d\351\257\017\353? \364R\334=\316\316?4\300\322\2278o\321?\2675!_Y\340\346?\317\2362\273\"\033\346?\203\331@\0059>\347?\177\024\220\226\350\216\356?z\373\3077]N\350?\000\264\273\350\243\236\225?\356\330\312f\214o\333?@\363\361\360\373\207\255?\350\223\275_\322B\357?T\021\374u\306n\345?\006\342j\2775\254\321?P\327\006\314\337\010\301?0\014\251f\273\233\322?H\037C?t\327\302?\354\266tu7\264\344?{+\241\361\226d\345?.4\215\343\202\331\346?\236\277\001o\207$\322?\300\\\035\272\304\347\261?\320-i*n\366\300?\230\317\343\021\031\177\326?\236@\311\253\314\356\336?9\030Dk\305\237\342?f\240\314\361\207X\335?\360s\341\317:E\325?\304\351H\366\353\030\336?\320\341\330\032y\007\301?$\010(\254\223\350\341?\014\237\205\262\231\330\334?\332gp\254E\246\334?^{2\320\376\244\333?6F\'r\2048\353?\332\215\321:gQ\356?\\\0318?8\263\304?\356K\324l\033}\327?\204\211@\320\364(\341?b\375\214\371\376\004\324?\307\361p\204<\307\352?\330iDw\363\272\340?\355\207\212H\330\232\355?E\337|p\014\267\356?\211\030m\037B\370\354?\376&f\305\211\217\325?\344\322\323\230n\226\321?{\234\245od\331\354?tC\347\366s\004\325?`3\177E\2325\242?\\D\326\210&\317\312?.9\377\374\017\356\321?\214\016\331G.\361\340?\304@\223j\2315\351?\034\305\202v\036\252\333?\250(\306r\265\362\352?:\307\256\210X\360\356?\023\221\036\330D\336\345?<\333rw\r\255\351?\002\377M\341_]\351?\202\037\262\300\304\353\333?\266O\024\242\311\222\341?\006O=\212T\235\342?\364& \310\252\205\305?\300W\034I\344H\302?\0365\330\017\304>\346?n\307\036\365\213i\332?`\233\345($Y\332?:\313\342<,_\342?\036g-\262z\022\321?\307\257\372.\231\350\356?\345\r\2006\326H\346?\014:0\305yu\340?<-\323T}\351\314?\306`\215}\350\267\324?8\335\265\352\000\330\264?\005\t\rpZ\253\344?\226\310\020\005\326c\344?\330\246\347V\244C\267?\326z\233V\\,\320?Y\332\203\266x\036\344?`H\344/\016\031\260?\2749\021\335\244\216\347?CS\233\231\035`\343?bPlH\261\232\346?\007\306F\027\243\203\340?\350\034\207\302\242\216\276?\260G\267N5<\347?\300w3\231\226E\252?\341\356M~e\224\352?\307\332\020\005\205\304\340?\017(\311\334\013^\351?O\213Cp\335\234\347?\t\230\375\256\236\214\356?\000\255\342\203\332\234l?\270\271\235\305t\004\301?\360\3742\256}p\264? \335k\270\003r\276?\252\202\277\267\302\277\334?<\013{o\272$\351?\000%\301yR\246\264?\254m\315;P\221\323?\025\302\332\303\005N\342?S_\340\212\025\361\352?\356\027\252\355\272]\342?\374C\2256\213\322\303?\033\237\217\302\234\246\343?p\302\346\342v\315\242?k\004\273c\246)\357?Z\365V\255\3466\355?\230\330\201cg\201\310?\215\210&\323\003\353\346?\246\017\357\374B\344\331?\014\376\244I\276\204\325?\346@\342\215<\346\354?\301\014hK\373w\353?\020\026\372A;I\257?\243\220\377Bx\207\355?\214\030B\267\024&\330?\366L\230\223~,\355?\240\"e\017\251\311\350?\030\315\247\351>\336\306?\246\264\221\225\256\344\341?N\016gN\323\024\330?\234F\215\220o\316\303?\006\036\350\363\253\371\355?d\307\302\245\020\371\357?\034\326\251\263\204b\310?\250U\234JZ\034\336?n\204\323oYQ\325?Np;\227\210b\341?<\341\0022e\344\310?\016a\241\026\322\256\342?\010\345N\360-=\316?\030\321\322\350\003\344\331?\227\236\313\305\224\256\341?\330\267\2538\256\222\331?\266\215\352i=\345\332?\360x\214\374\302\357\324?\355\203Z,\307\252\355?\022\350\242\341-\005\341?\273\333\261\331\371]\350?~\003\354\347\231G\336?\320\353\321\224!\007\244?cC\335\255\235\262\344?U\377\266\364y_\351?\270\276\304\211@\200\304?N*?\322<\363\342?B\325\334\227\0165\341?\376M\265\013`\315\336?6\353B%\220\030\335?h\365%\340m\272\352?T\363\236\024\363 \311?6\255[\224\355\206\323?|,\032\354\324E\344?l\341\344h M\314?\330\205\336\207\272\234\300?|\010\251h,\217\331?\010\302\325\350\306\342\347?,\275\355Q\337\356\304?\010\241\315\235|#\316?p\367\205\321\375\377\250?\232%\215\245\027z\357?hu\344\232\020\\\325?\004\357\210\271u\366\343?\024\203;h\224\343\355?8p\354jv[\277? \233\3005\234K\305?\216\220$\312\336\321\330?\000\037gh>\336\233?\260\306\237\013i\302\301?6\376*G\277\027\321?\2013\356\202\211\271\353?8\336\357\322\220\241\346?\366b\025\274\373\350\327?\304\177kb\333\215\355?\"\2560`\211A\355?\340~\213\021R\300\255?@\231\272\257i[\277?\302\363\330\340uO\333?\27651xe\344\343?\3424\001\357\364\367\325?\374\233\263a}\362\355?@wu\024\256f\327?\3203\315\267\023\001\321?\001*\370\313\022\255\346?(\275;\361k\333\356?4\276O\315_~\343?\344\'E\376r\317\310?\252:W<k\006\322?\3535\323\340zV\347?\006Y\257\304c\032\347?e\361\305:X\257\354?@0\021\277\242m\220?\372S\211\\#w\323?\364\200\351M\246a\314?m\236\366x\323\030\346?\353w\273>?\236\341?\274\265\nC\202\372\316?`\234\242BQ\236\255?\371\200c\313oF\350?\005\360;\036\311\236\357?LQ\261hU\017\313?\204)\326\342+\304\333?\336\025\026\213\356\210\346?\347\354\024\235\220\314\346?xt\376OR\345\320?\334\373\tk\357j\305?\010\021\024o,|\321?\364\346\231\364vc\313?\2119\242\203\326\320\347?\236\221\217\362\375\020\345?\023[_\251|q\352?\375\256\345\240 \220\354?$\273e\352\311\037\324?\314\010\031\336\266x\307?\342\305\340o\017r\351?8\351@v\006\327\304?)\243\26070\037\342?\352\272c\200^\352\350?\317\350\336mQ\320\351?@`\210\032T\244\326?X\341\220\234\247\031\345?\"\240\003\273\270\310\325?\240\264\207w\302|\227?\374G\031h6\222\335?`\330\356\250\215\364\316?,T\006\302{\266\340?\365\267\002\376\267\272\344?\026;\0273\r\027\332?8\016o\342\264\271\343?\n\330\340}\227\260\327?\001\323Z\353\216?\357?B\327egr\346\344?\210&#\201L\312\271?\225\276\304\030m_\355?\356J\023\315VB\340?w\035/\274\005D\354?5\2638\027\227\376\345?Z\016\254;\231\355\357?&\340K2\233N\345?CNg\374\327\375\354?Z\331\304kS\365\336?\264:IU\373\243\341?te\227]<W\302?\215#\303\224\312\322\355?\255:!\315q\013\351?\010\371\352\350\334*\337?t\341\344\317\271\357\345?\\3\030-sN\310?\226\343-V\364\257\340?`\036\001[!\267\265?\346\240\277\300+9\353?\302\216\025\017\3465\325?\025%\350\303\341\226\343?w\177W\362,\352\356?\230\255\001]\027T\300?\323\320VQ_?\356?\262\327W\016l\270\357?\256\036\023\212n\233\332?\002Ke\220A\331\324?\226+d5\2764\343?\270\201\223\362|\326\301?2\017\226\222\217\030\341?\250\361:QD(\300?\267\250\330\024\304\273\347?d\224\361\233\025\244\340?.\366\233j\250\177\354?`gSZ!\026\250?\234\261\271\366\033\211\352?\373\207f\263\212\027\344?l)\365^\252k\323?\341\246_\207\037\227\340?\372i \t\003c\340?\3602[5n\302\334?\024\362\3158\203\355\301?\270J\362~\206f\303?\265\3229\307M\030\354?\264\302\207b\t\250\317?X\006\247\211Yj\356?s\315k+[\305\353?\220;\231\355\334\346\310?^\001\216\\\303\263\325?I\217=O\227\364\353?\360\211<A\216h\332?[\370\247\216\252\235\353?\254Y\345leR\306?mtMR\361\220\343?\202p5\210\031\340\346?U\260\333\242\303\310\354?hi`)\231@\327?\240\203\303\2728N\303?D\375\261eQ\207\350?\252\266\013\207\256\271\356?\335Q\007K\222\227\357?`\373\305s0\274\267?`\005\330\274u\201\243?\032\373\223\013\211\317\326?\340e\r\366\n/\230?\340\031d\017\356\344\220?\000\331,\227\225\247\261?L]\234\3009;\344?Z\025\311\343F\246\351?\222Wz\376\020|\333?8\234\3506,\343\334?P\317&\014\253\366\275?\230\tJ\027\2538\301?/j\240\202_\306\350?\321\362\346\216b\036\355?\330A\372\234\261\337\311? ^\271\362\340\020\264?\360\212\007\341\303-\247?\212\240\273\"\247\213\330?\030Z\214\310i(\344?\010M8\263\203\262\336?\305a \001><\342?\360^\362\2152\200\252?\027.\323n8<\351?,\024\257\221K\032\337?\257\203\243\346\010 \345?\206\370\310B:l\344?\177\211\020\331r\302\341?\342\375KFT\215\322?\360\337\245n\\\330\321?\350_=\346F\"\277?\256r]\263\365>\325?t \250M\205\225\352?\344P\351\347\234\002\341?\213\226\2259\306\215\355?\220\022\014}\271p\242?b\274\352\310\331B\345?\240\001\261\037\230?\271?~\253\273\327V\207\341?\362Sa\004x\347\356?l[^d-\227\306?\370E\300v\212d\316?\320\255)L\233\315\304?\207w\014d\177\034\347?\000\n\336\250+\360\303?\000\022\204#vu\341?^\305\203xy\323\341?.\370\235\336s\027\332?o\323\232k\217\272\351?\017Gl\235~\204\354?\344\264j?\373p\324?y\243\032%U4\347?\240iLs\013!\253?\225\266\351NfV\356?\023\342\252T*d\344?\n\265 &\251\244\350?^j\273|\363\324\335?A\373p\031\027\275\353?\2234\374M\"Q\357?@\'\307\017\035g\331?\216\244\202\370\230L\327?\370e\336vt\235\261?\nX\021\352C3\325?\2701\240\205\206\365\306?\231CUe\362\302\345?\255a\265\254\222\341\356?s:\361a\342\361\355?!\244G^\223\307\356?h\177\252\223\206 \272?|E\230\214nj\323?\352\016\266C\307v\335?\220R)p\313/\277?:r\223WAd\331?\373\364*l\032\027\346?h`\232\361Ft\312?,0\341*\2364\327?hEZ[K%\270?8>^!\177U\311?\340\026=\006\277\226\262?\352\036\301H\002\210\322?T\007Cr,\350\323?\246\305Sc\355\204\351?xr\357?UN\263?N\036kS\330q\321?\263\226\372,\307%\344?b\335\306\0008\277\320?\302\0209\311\256\375\354?*\024\261\316\017\274\335?\330\"\000\374\251\371\305?\330\236\206t\314N\347?\2730\371\346\365A\347?\357\202\232?)<\357?M1\230u\325\203\352?\374\344;\300\234\370\342?/\"X\264\276\225\354?\277\355\374\306\033u\351?c54\375t\244\345?\360w_\212\325\223\263?:J\340S_+\333?\200\301\'\375\220\367\277?z\217\254&\315)\356?`)\213\241\350\016\237? \253\014SJ\227\324?\037;\372\321\224F\344?\372R\177\rQ\354\336?\371n\367\303pn\342?\234B\306\236\260\013\316?\337\271\343p\370\215\353?\230-\312\2334\305\316?\232\333\250\206\0249\355?\206\340\226r\266\214\330?\3749l_T\310\326?\177\301z^J\006\340?Y\356\242\224FX\350?e@1\364B#\344?~\267O\316\001z\357?\302i\354\270\345\325\352?\252\r8\346\'\361\350?\264\211\274e\274\252\320?\331\346j\216\267a\342?X\202\260P\217,\265?\200\322$\333\235U\225?:y\336\370\002~\350?[\245\377\227\355\"\345?\000\334Z2s$u?\300v\203\247\025\215\351?\366\330\223>\\&\335?Le[*\355M\325?\014P\302p\200\375\324?L\227MV\311\233\311?\337R\270\370L\'\355?\177\320\322\251\"\243\344?\315e\353O\217\242\342?jD_r\200/\325?,\214\006\307\017S\332?\376\214\334\3578o\353?\377\010\226[\217\361\342?\200$\272\02301\212?@\273\365[o\207\221?:\210fP\000N\346?.\366\220,O\027\356?8\017\206\256S \311?\200;\002\036n\001z?\200\0104\213&\342\336?]\033=\221\220\310\340?\313x\344\034w\235\350?b]\316\225\330\021\351?t\340\375\r\263u\322?d\324[@)\363\354?]\363\0045\004\022\343?\276\236j\306\010\237\342?\266\274\275\003\333\004\322?\352\354\330\254\327N\341?p\306]\245\327H\355?\214\240\340\237\342\255\346?X\376&\223\261\373\326?\\\207\354\262\324\241\322?\314\365\245M\215\231\356?>\275\245sq\211\345?\000\336Z6.\317\353?\006\311%=Z\322\327?d\234)\217Qr\342?\217\216YJ\030/\347?\360\374^\340y<\344?J\321`r\027:\335?b\342\034\342\023\226\352?Z\320\242=\360e\347?&f\201l\351\364\337?\273`r\271\000\324\354?\276\217\"\003\274\030\350?|hA\030]\243\334?\246;\252\364\241\326\341?\364\333\201Y_\035\324?\021\262\342c\321\"\351?\320|S\235D`\312?\274\276#\372[\254\303?p\034\345\333\007\370\300?\270qQp\316A\315?\020<\346\377\275\003\306?g\323\037\267n\246\355?\2573\366\220\377\256\346?\200\2450M.\212\313?}\363\275i\214\221\351?{T\365\177\302\376\347?\220\270d\036\355#\313?@\203\212L\217\210\231?]\257s\361\227\351\346?PnQ\303\365u\323?,32:\014\242\355?\304\351\234j\354\024\324?@\370\033\315K}\235?`@:h\177\247\311?a\3268R\356\216\353?kOV\354\323\351\353?\253\336\366\371n]\347?!\347`\013II\352?t^\374[M\207\342?\024s\235\334\366\000\333?A\363a\270$\036\354?\017\355\235P8\245\345?\246Q\224]\330$\334?Z\371$U\251\354\335?e\252\224\'|Y\353?\350\210&F\026\216\345?\340\304\030\274\035N\267?\346Uv\270y\213\343?lL\261\025\213R\316?\264\371U\307\006\264\350?8F\241\354\247\201\317?\000\250\203\010\007sp?N\226\037\366\201\254\337?\327\277\202\022\032e\342?T\361\213\276}d\336?r\235\231}\274\360\333?\022\265fd\001\253\356?\300\351\215&\037\231\204?\224V\231\255>]\304?\3467\250\356Qt\336?\240\304\004\334n\231\275?L\356\361D\023\372\357?\302\n\272H\010\315\353?\022\352\225=4\365\322?vM\3453/\213\352?\000=\002\242xU\261?(\\\033\312\336+\333?\000\346\300\334\"\203\323?\320\254aS\036\016\275?\020\313srh\360\244?(w\241q\365Z\273?\324\275\375\330&\200\332?\246a\001\366\211\n\356?\016 \001\202\272\301\333?\362\344<;\006\326\340?\374\036\2342\313\255\322?\004:\003\\\236\311\321?(\023R\004\341\234\261?\352\333\211\035#\215\323?dwPVI\324\337?\037@\245\016\352e\345?t;\242l\220A\350?&a\367\"\212\314\356?6YsLn\306\331?\250\203~\036S\277\264?\344tt\037\226\374\345?T\265\266I\347\246\350?,<\r\356=\232\324?\034\337\303\265\220\265\315?\000\214\n`>?\222?p~\364\251\332\276\332?\321\264$|\022w\355?`y\3443\360\320\325?\267\320\242\003\033\311\355?\306\014t\254\365I\336?\243\330\270\267-\211\342?\032w\244k\202\"\356?p\311\nKY\242\240?\340\266b\000\357\365\325? \371\321\273\214\032\307?\032\247\233\346\352^\350?X\273\236x\337\304\346?\321]\257r)r\352?\032\307\217\357\242\013\347?\204qE3\316\260\352?\000T9\220r\264\232? \316I\241\025\315\256?\200Q(\006\023\302\304?\220R\236\205\256Y\317?\"\r\237\253RZ\346?2\325k\000Yg\355?\024\314\007\352y\323\315?xOJ\217s\234\326?\002\014\240\035\233.\330?\227?\246QL\330\341?\330\336\242\3320(\347?>\237\316\027\233\326\353?\357\014\204O\364\242\344?\274?\000c5B\326?\026\224\223\221\323\305\353?\212\303:\230\374\n\357?\r\006O\255\310\034\346?\210\036\266\243.\000\340?\317^,-s\327\343?\255\002\307\326\350B\354?\026&\372\253\\.\352?[\350\347\203\363(\345?~\332\302\342Cc\330?v\'\303U\212\222\325?\221\303#_\024\034\357?\200\36742|\205\340?2<J(\311.\341?L\346\220\367k\325\356?\003\272r\026x\207\352?#\374\n\337\273\306\347?8\206\340\253[O\271?R\372\360\273\322\357\340?\214\250\234\207B\257\347? b\234!-:\356?\204$%\252\202\212\305?\020\262B<\375\333\334?\3744_\363\212\\\354?\306\350^\221$\212\334?Na\350/\027W\334?\260\327=T\332\243\261?\006\313\350\271\265\000\334?\232f\344\225M\207\351?G\266My\305\035\343?\343Mh\301 \004\342?\222H\307\265}Q\351?\307\231\024\000\177G\343?;O\r80\315\355?\360\203\256\376\t\344\255?tp\373\246*\256\343? V\273\243\222\227\270?\306\227\005\014\341\351\331?z\004|\236\022\036\336?\227\335\244\245\247\362\342?(\234\331\204\2378\307?\230\020\202\2447\327\262?\240~\256\332\223z\231?\306\333\250D\272\036\350?\210\317\376\351\261\224\307?e\350#\3061[\347?\360Ih`J\336\353?U\326\362*~d\346?\030\377\265\372\024Y\324?\n\262\232\325\242=\357?\020\212?\304\373>\253?\3754i\252\363\027\352?H\257\035O\245\264\353?\331 `\014\300\267\340?\200|,\371\016)\251?f\025\'0\352\005\326?\036=,\304\207\334\336?99\"\307\331\004\355?\000\312\343~g\263\233?\237\302`\200\360\243\345?\257h\306\211 \r\355?\213\006\265j\030\005\357?\300\016\364\024\017\224\224?\0068-\251\007\312\322?\010\266\220E~\237\260?hxA&2[\307?\220\356\007\200F\217\314?\255[29\330\274\353?\r\370\202\206\333\036\347?\003\253\003\3034\227\344?\364\020\031\005h)\345?h\001>\202\252\306\277?\255\360O\23397\343?\344\275\004%\3503\344?\370\224\230A{\262\313?\332^\014w\354\316\327?\224[\250\333\240-\331?\354\350~\224zo\326?\230\320\254\271\274\215\312?\220\253|\252\237.\244?P\337\250\236\331\036\346?%X\241\263+\234\355?\346l\207[\021\t\335?\024Lj\030\213\337\350?\247z\223\014\367\313\357?xe\366\274\231\332\331?\330\312\250\254\032z\261?\324C\242\231r\277\337?2\262\324\002\360\213\344?\270\327\246\240\215\310\275?\002\346$\321\tY\332?\037H\323\365\221c\344?\210q7\"\024l\332?\200\010\347C\277C\320?\274\305\272\217C\020\353?d\233\2655\200\347\314?\242\312m\273_\323\340?$aE\004\261%\301?^\245\253\345\345\233\334?\314\027\031\036\0173\305?\r\332{\255\016\263\352?\242\347\226,\024E\320?\374\270\255\317\263\007\333?\207#-Lu\'\356?F\364\330\264\377\376\342?6-\216\343\352?\337?\201\3070R\350b\340?\251\246AF5\211\344?\320\204\254\214\334\346\301?\266\203\205\356\246a\356?\324\300\260\216\300\014\320?K\224\253Bh\021\345?\340G\005\300\257L\245?\363G\246 \001\266\350?\306O`^~\346\323?\336\232Vg\210:\355?T\333\021\363(\302\341?t\014\325\275?h\352?lB9\243])\311?\201?\276\376K\305\355?z\r`\3158\036\335?1&X\336\351h\354?\204\254\3206*b\302?\220\235R\222\010\345\301?\337\027\020\310.b\342?`\250\024\305;\324\275?\036uw\372Vc\324?\267\307\323\0052\216\352?\216\346\026\347\327\345\330?\022\240)\177]\017\345?Z\237\030 \253\203\336?\014\271\213\357\276\305\307?\332!\306x\226\212\340?\340\372\345\325\370\374\240?\222nTP\270\022\357? \230P.Ne\305?t\020\350\214V\346\351?\352\205\365K\303\223\354?r\250\t\205#E\323?v\353 \225\251\013\331?9\227\036\r\326?\355?0\013\014]i\216\247?\264g\251c\211\322\357?\214\300h\206\305\215\350?\346E(\177=\225\334?\206P\261\323\351\r\356?p+\320\005!\256\311?\324\206\2761\256|\324?\307:\\\001\242\034\344?r\247\356\016\375G\344?\307\372Uq3\267\350?\310\260#6?;\306?\204\232\260<\014\311\347?\373[,\320l.\344?\352\000\306\235<y\350?7\344\315\277\016\010\346?\000f\336X\324\377\341?Q\033)\317\201\352\356?\000n\314E\263Ew?\317H\322\324\3402\354?\024\371\352\366\'!\346?\365\005\322\374t\316\344?\020\213\371^\033\301\332?\313\317\271a\027\307\346?r\362\014\302h\271\320?\372\204\202_\371\225\326?\300D\373x\246\304\325?\200\334)nS\315\177?H[\211\006\210*\330?,jP\274,i\317?\010\355\n\226@y\326?\322:\017\206\276e\336?\240O\331\"\243\343\273?\326v\222\273\321\252\333?\276p\036?Co\347?\374\024\363\303\252\312\336?\006<\324\244\3776\345?\354H\256\223\224D\300?\300c&\261\345\221\266?@\026\010\262\367|\353?\022\353\232(\222\367\322?\214\211\262q\001\r\356?\230Fu\334\334\212\336?.\365\345U\226\277\321?\367\240p\326\356\223\346?\023\026\362\307\037[\347?||\213\201\263\242\347?Dh\204t\377@\353?\203-\300\215\027\003\345?\350\357\324\272\215\367\272?D>\207r\246@\355?G,\3156z\303\347?\353\333\236\271\311\301\346?\306\027Z\205\027[\340?&G\007r\201\255\355?\234\304\245\224\256\245\300?\340\020\2058gR\330?.\321\242\254\262\022\324?\271\300\263*\2612\341?\207\2036Uud\353?\206\343:%\241V\337?\263\303\243lNU\342?\000\022,\3375)\342?\240t\353\370\247\351\256?\240\306\350\276B\261\221?\006h\261\233\226\340\346?\200w\240\310\345\305\310?\272~\207:7g\332?d\350\366\207\344\033\350?w\016&\372A\227\353?\360+@3\220\021\343?\375\213#\264\323>\345?\337\013\377?\266q\351?z\204\352\\\273\024\347?\016~\311#\034V\336?\351\245(g\263+\357?\251\207G\\\321\234\343?@p\251B\277[\331?Rj*\212\322\360\324?\252\323\262\030\022\332\343?\321\231!B\002\221\346?@\371\225i\033\004\243?0\201q4_\333\261?\344\237j\"\215Z\325?\234\344N\334\324\336\346?\364\n\270\2364y\315?\306\351ZE\332V\343?\267(QdZ\315\347?\035\344*\352Wy\340?\330\334\327\231\006\353\336?\243K\266x+\355\340?P\223Z\233\275\247\341?\033Q\361v\206\213\344?\210\316.=\177\344\315?\210\347\003]+\225\261?\241:\254\243\307\344\350?\346\025\013\265\030\373\347?}\343#\254\023\r\340?\2358\376\261\220\246\347?\253\205\006g\225-\343?B\014\270\277E\260\335?\'Jwz\3662\350?\"J\363\344\245K\326?P\214\255H\202 \305?*\023\203B\266\311\352?\370+\t\'\341\232\304?\246\371\266\204j\303\320?\202\306\266\231\234@\332?\260\217\256b\026\362\323?\300,\250{\217\223\260?6\3270\210\022\232\320?x\261\210\014Rv\321?@/\374\262p\314\224?P\006\361\014\"(\307?\344\314\337\372#u\304?4@l\316\372\325\314? \n\375\304\347\343\260?\214&\336\215\312X\347?\003\320U\226\321\270\352?(\301Q\366e\037\317?u\220P\307\347\r\342?t\336\304+S\325\354?7\377\255\237\007r\340?Xr\333z\nY\341?\270\331\373\221Y\345\307?P\304\320Ok?\246?\204\232>7?N\353?\220\247v..\233\324?\366/\236@\016\261\320?\304\016\207\"\323\252\354?\251\214/\217\230\360\342?H\253\356[\005\200\274?\310\'\275\232\205\020\311?`6O\325Ex\317?\264\335&}\374\366\347?\247\n\317al\246\352?)\361G\315\r\376\352?N\007?)|\207\332?\305;\353\254\337\332\345?Xr\2560\246\020\342?d`\266\357\204\370\311?K\367V{20\343?\214VY\200\332\264\317?\250\265\335\331\222\257\307?`\263\357e\237A\314?\206\263\240\233F~\356?Xd,\302+G\317?\344?{\032\334>\320?^\327\327\220\251\370\331?h\252\370S\302G\353?r+\210\244\266\262\321?\256\335\031\375s`\320?\322O\255%E<\355?\032:\\\207\376\377\321?@fl\253\357\213\304?\030\004\025\265\237\254\324?\310~\276SSF\356?\022\221S\326\211\256\341?\314\023\351!^\240\301?\307&0T?\000\356?\302_6\031Y\226\353?W\3139\205\226\257\340?3MfO\254\217\342? .\233-\t\250\357?\030&\325t\344)\260?\341\231\313P:\321\357?\270\213\001b\2739\315?\35213\344\260\256\352?\2201\264\206t\231\276?G\311:\'L\206\344?\030\311\377\205\242\'\301?\365\0265\026\334n\342?\334]\344\322!\336\334?;\202\2301\326\216\350?\013\027R`)\306\343?sQ\224\023\255A\344?\014\246y\201G\036\324?\343\247\252o\026\301\352?\376\345\340})\000\325?\025t\307Fa=\354?\230\217\365\232\253d\320?\326\367\214\242I\314\320?1\005\273>\t\270\357?|T$\347@\304\327?\350\\Sp\200k\261?J@x\267m\355\337?`\205\364a\336d\357?~\377D\205\272\026\357?\014\007\340XC\262\302?N\267\003\214\357\235\345?\346\322\206\201sK\324?\000\235bB\347>\214?Zj\311[\025a\323?I\023\006\031D^\352?E\235C2\321\000\357?\240\311\206\273oD\337?\304\200\313\304(\236\353?p.@\346e\357\353?\243\3001\271\271\353\342?\207\022q}\263T\344?\320\372{\301\264\354\347?\320\307\364P\021\211\245?\022\032\244\374r\'\356?xj\277$\261\233\315?u\274\265\345\277\037\344?k\301c\323F\227\352?$\325\335\013#\221\354?H\251\264\307\002N\336?\362*\235{\334\322\335?G\250\335\031\303\212\343?@\023\t\355\214\013\315?$\324\201\241\333\001\345?\207v]\376\2512\351?<W\362]\312\236\355?\n.L\032\246\311\352??\313\244\032/\225\351?X\220\037\260\021\250\337?VR\217X\215\364\350?7\222\273\203\'\265\353?\241T\224\226o\367\355?N@\260,e\023\351?\202\243\n+\232\376\344?\003\330u\276d\324\356?\340\321r$\362\035\227?\2128\266\222\227\335\345?4\252i7\373J\300?\216m\264\n\t\220\326?\214\254\343\351\357\325\345?[=\253&\037N\340?(]\335\016\t\021\325?\000\"\307\336(j\260?\372\241\267yh\247\323?lyD\372\032V\324?\014\264\321k<\030\307?\367\262=\252\255\375\355?\353bib3\222\345?\370]~P]\016\272?@\224Y\t\337\035\243?P\314\352`\277\376\247?\220R\n\355\243\306\245?\225\'s\231\333m\347?@\312[a\224\255\347?D\275\3100\302\320\320?\014W\246\310B\237\354?\236\021\n\240\221\217\320?pF\350sMI\252?\0071\177\215\027.\351?\366\353\326\007\3671\327?\222\013\312\270\224D\332?\346\243S\341a\004\354?\236\236@\233\230\305\327?\002\271{\016\311\314\353?\000v\346\310\277z\343?\244A\215\364\270X\333?\340\\\352E\232\301\312?\244\257\200XLV\332?^\324U\344y\353\333?4d\367\032C_\342?\\\014\236C\2279\327?n\177\250\264&\032\322?\002\3112\332\025D\322?\373\177\255\315)<\345?9\177E9z\263\346?a\343\340H\023\374\341?\224qy\203d\300\321?\230\240\023\204\357\"\324?Gb\320xLF\343?t\214\215\341\346N\322?|r\016\202\364\017\316?3\274\366\362\202;\350?\361\351o\267E^\351?\220\317J\214<\336\276?\240\356\377N\324\366\223?J\0234\030\275\333\327?\360\025\345\372\013\234\354?\004\272OIN\235\327?\265\201\311\345#\253\357?\250\354\316pA+\267? E\335E.\207\302?\323\030\324a\022\177\354?\316>\210\231\240\370\350?\260=@\217\231\363\277?\253\343\2737\006F\351?~\037\221a%a\356?\267\367\307\350\ny\355?2\344\021\367\342V\332?\262aZ\225\365\222\333?\"1\3759\n\277\333?\217o\277L\367c\347?\002w\240vs\t\320?\300?\203D?\274\235?\205\024s\t\215\264\343?\244-\221\273\360^\353?\256\273\372\332U\030\341?\200\332\351\367up\327?\340\330Wf\200\234\327?\303tk\'\013k\342?\034\266\2109\304\016\317?\243\364\273\3372\342\356?\003\357+\304\233&\340?\260<\276\332\364\327\352?\260%\251\005\014\231\262?L\340t\310}a\344?Gj|\213\276\234\352?\251\253\024\331\254&\355?m&\352\010\355\010\347?\212RzFp\211\321?2\375H\223\237\035\325?ddA\334\002\230\347?@\241b\373\000\024\251?\377C\315K\0146\352?DY4\377\240\232\304?\370\234\245\270&\267\313?\241z!E\270\347\352?\301\334\206\200\275\343\354?\342\232\241kM\274\347?Z\223v\032\n@\342?\000\331)\346\"\202\201?\277*<\310\316`\350?\3703\026\225\216\377\260?(\377\r\271\217\207\324?\014l\016\360z\\\336?\315\201\267D=\340\345?4`y]\032\315\336?`^\023\271\375\340\250?\224X\245\216\242\250\316?\200\352G\354<7w?\250P\002\217\016_\337?l\317_\376\014\350\310?\314Q@\275\255\013\303?\304\207>a\225[\334?\3528\037\321\216\324\352?\206M1\005=\024\326?(\273\232ZS \305?\244\246\262\355eo\352?0\332\210\023ER\307?\307\214\217\317\340F\345?\032T\375\264\026^\340?\346`\274yA\216\322?\220\206\242\2319\223\240?,\226[\033\267\353\357?jB\035\245\335\204\342?\375\306\006\261\274\302\346?\n\035\350\375\2140\335?\350[\000\332\177\331\327?<\377>\3376\366\347?|\272~\025E\343\344?O\024\365xD\022\342?\\\364PC\260w\334?\220z\323\260\016\314\302?0\244\235=O9\314?\312Z\026\377f\010\336?\"\017\t\317%[\324?+oh0\351\337\353?\250\275\344Z5\030\342?\256i!J\270^\324?h\263D\351\334\277\334?y|\014\223\210\320\344?\002\033\250\275\274\322\352?\346\206\250h/O\323?\014I\230\370\003\\\353?\214.\344H\234\244\353?4!\344\021\375$\316?l\032\261\233<h\341?\226)\300\020:\036\330?\300\335\353-a\037\264?\350\014E\375\235U\356?\320B\317\323N\217\301?$\030\326~\201t\304?\240*J(\311\305\261?\320\362\305\264i\315\300?\177\036\305\237\360\322\345?\352NV\325:\r\321?\334({\360\272X\305?0t\274\204\0051\254?Pb\260\361UT\245?\344\355\210\215v\321\321?.[?D\377\377\350?hE\273\253QM\264?\004\217\234&\250\022\314?\250i9\033\026\010\341?\340r\2072n\324\241?\203\334\316\342\324\021\354?4\332\266U\372\352\331?\256L\370\004\177\r\343?\220)\342\302\365\003\315?p\305N\321\227\345\357?$Z\306\201EG\342?\243\206Z\217\216\000\340?j\024RJ7\217\325?\315\302S^j\203\351?0\311\242\010\244\374\321?\3060\201\005\022\234\355?(\277\007\245\265,\334?\252\350[#\200\022\332?\264w\261\032/\177\324?\252z\240\335x\221\345?O\003V\273\334p\344?\026\370\213j\314-\337?\200;\354iO1\266?T\034\035N\302\177\354?X\201K_;\304\314?\t\341\226=\335y\352?\302\207\273`d\370\355?\0250h\035\300\302\354?dd%\356\357\303\323?\334\256\333\030\036\261\353?\004+1\264>\221\302?L\377^\225\313\205\310?\350\221\315\001\216\\\300?.\023\260)K\252\337?f\305oL7\014\336?H\331Mv\264g\345?0\215\345\3437\372\341?\277\372V*\203#\345?\320\356V\332\335t\345?x\177\263:m\353\342?\034$\377\276T\307\331?\244\\dW\371\004\322?\000\'\203\322\240\263\274?\2658%\360\3339\350?\"\016\240\325\336\256\333?\256\331\347\307I+\330?\252\372\366h\203\252\346?\306\263\312\372\264\020\357?&i\335\212\237\016\330?\200 \251D\000\022\256?\376B\377\200T\366\320?h\023\377A\375\266\263?\256|\'3\\\275\320?\000\346\352\371\033\352\320?\374\301w\272Oj\307?{\253\315U\251\361\353?-/\254\017`Y\356?\200}\227\343y\034\201?7\221\003\247\267\375\346?\rot\273\265A\345?\360\374\234\240\272\302\255?\331\0201\302\304\303\353?8\rk\243\332\277\315?b,=\317=L\323?\200\020\262\006\3250\335?YM\220\245\261D\357?\000\273\325\315\022\241\316?\213\244klg\247\340?\004\203fU\000|\317?T\177$Y\355l\322?\274\372\300\362-\006\352?\000\000p\005\036\024\342>\330\251r\274\006\322\273?|\0135Dkh\311?\220\306F\027\030\007\250?\3364\376;\007\363\350?\216\211\202.\220\210\354?\330\032\250\3062\246\314?\315\305\347\277\227\331\340?\330\3369\221\021\237\321?`\207^/\365\n\345?T/\236\333F\276\356?\263\260\370?\357\237\341?\034;>z2\204\356?\200\315T[\202j\317?\016n\234e8\"\341?F\177\300\237[z\340?\264AH\313\334\301\325?Rx\314\037\217\345\350?\202\034\327\352h>\322?\374\342\253\261z\254\313?pZ\217G\006b\241?0y\260E\027\343\255?\270y\2009J\301\347?\255$\237\320\370\312\342?\334\242qv\030U\333?\030\351\000\024\'2\337?q\023\253\221\342\277\357?\272\217{\2549\356\352?@\355-\031\026\307\276?\243v\000\224\317\342\343?nf\247\225\203)\356?_\364\003\273w\211\352?\300\322\000&\211\"\242?L\206i\004G\234\323?f\353ZI\264h\326?p\247\370P\267\033\352?O\334\327\316?\330\357?w\035\014W\361O\355?\320\n\tE\224.\243?\352Y\223\247\307\260\331?\036-#\374$\323\327?\334r.T\350\030\324?nm\213\023\374#\346?B\314\344\0139\237\342?\365\374\211\305 \202\350?r-@:\315\210\346?\270T%%j\325\267?\2304\210P\\\033\277?\2542\'\005c\005\343?&\210\247\337g\354\331?\210\316\177\352n\357\317?\024u\241?\000\035\304?\031\034Q\322\241\274\355?\324\333Ch\003:\321?L@\rih\365\355?\361\001\373\243i.\346?\225U\'\236\267\327\354?\030\256<Z\275i\277?@)\275\203\310w\251?\313\360J\204\256\332\340?\220\346\\\206_/\272?\245gJ\260zb\355?\006\253\257\234:@\333?\340)\3448\342\361\235?+\320\001 \375\352\355?\200b\177\231\rN\254?\204\256W\177\325V\323? \274\352Dx_\327?\\\346?\037\330\323\350?\230p?\272\375<\352?\204\236\336<\243g\335?\330J65\312M\262?\360\274:\\\371\371\346?\207\001\033\326m\\\352?\200p\004\236\026Yv?\2213\311\314ZW\343?H\205\367I\'\264\333?\206:\350%c\001\326?8\266\360/\214\222\344?r=\254\203\316m\350?\006\365\027\313\341\255\340?v\322R9\245\037\336?\350\332\226\262\234\025\335?@\243\221\010\205\351\263?\300\302\231RD\330\304?\026\016+R\327^\353?\372\241\204\314\217\200\345?\3405\311>~\311\255?\014\234\007\357@\204\307?8Rs\002b]\345?\254\336\231\217\367$\302?|\237*\370\016\350\302?\235\214W\341\177\223\347?\016\234\213\030C&\346?\004\234.=\234\266\322?\276\206\177\235,\353\336?\303X\331\233\203\375\344?\000\256\341\227\013\352\307?\031\257\243\006tV\344?\376_\006\025/\300\336?\002\231\241j\250[\340?\017\232\343$\320\351\354?<B\200\014\236|\352?\256%=*\037_\352?\030\245\254\030#\213\270?\022\262\340\3058D\336?\326\333;\250\216\236\347?\364\373\236\350\335s\316?\030P.~\037\370\356?\010\232 f\201\022\356?\005\251.\355B\351\356?pObPO\311\275?\317\202>\307\267\364\353?\236\3369\366\206f\336?\242f\367\377_a\353?\301\224\264\334\276T\347?\000\234k\240\217\374\342?\310\237\257\315\304<\351?\200E\251\034f\367\334?\202\375\211\363\220_\354?\220\302-o\242\311\322?RE\246fe\371\351?X\276\204\260\237)\270?\337\206\177\256}\344\354?\250\337(\332\376Q\271?\303\275\225\244\335\205\340?|P\263\212x\305\327?\320\225x\247$H\334?\233\237z]\373\242\346?2\006\300\304c\326\327?\024Bj\032\252\t\307?VE\234;\372\262\334?-\016\3229\261\326\352?6\r<\2639\240\337?\362x\033\2752\337\343?\220\026\230\nY\344\355?\300\270\357+\251;\353?\245\n\312z\340\004\344?\022O\224>\204B\344?\236\016Hz\3552\346?\212\213\332\034\330\305\327?\024\312\005\355ZN\321?\252Bw\250\373\003\334?\312\344Q\005\034M\350?~\302\022R\010Y\335?\312\013\316\334\226\221\340?2h\320N\226\022\357?\0103O\022\324X\260?\230!=\372G\233\335?\212\215g\236k\030\326?(\017\221\312\032?\300?\372r\007O\031]\343?MJ\262 ].\351?\220\3641\302\001\273\354?\362\311\213~\317b\324?@!h\327\262\350\220?\205~p\021\2446\355?\240\363s\354&l\312?`\260\004n\036\342\261?$\023^\343\345\312\350?\034a\035hrK\301?P\313k\226\211w\271?\300\334@ri:\205?\346\261\360\233D}\350?\300\t*2G2\341?\236\350\034(\000(\352?v\243\321\243uG\333?R\2414%\317\026\332?\360\231\332\274\021f\272?a\311\002W\037\271\343?<7Z\255R\212\351?\212\366\336\360M\253\342?9@\255d\025\302\351?q\262|m\222\250\353?\010\306\364\213\315\254\267?\275P{F\375\276\343?]\304\311\323\245\315\340?E5\332\277\373\270\347?\322\260\270\202\226<\331?\030%D\017G\246\333?;x\262\223\241_\357?\301\254`aL\342\354?\310lq\216\242\241\357?\350\323A\363r\006\266?\202\253\207|f\331\320?\334t\2614\233a\316?#$\034\236Zp\345?\246\204*\272\335\270\351?\200\321\361\336V\206\264?\240\025J{\327\336\331?-\240\251\200\026\375\347?\273\017\227\267\002T\356?\304\362A:\310\340\315?.\211\010\025\250\027\351?\225\370bW\325\236\341?\360\330\262\304\306\\\336?(Rr\"{Z\305?\306\266l\034\330\330\351?v\235\0006\345\354\345?\204\267\253}E\337\357?Ld\357KT\347\327?\274\271\375\rf\207\303?(q\340q\240>\310?\370u\235\266\005\335\305?\330\205\344\332x\344\354?J\3635\263]m\343?r\337\273U\2332\331?\206\334\363!\200F\320?\2717\372\t\213\252\347? \351\0309xR\243?\256\312\321\"\231\207\320?\270\217\244Y\202U\271?#-\\Y\232@\357?\215t\035\333\343\275\344?VSv\230\341A\344?\242\277\004qO\215\357? \316i\244$\255\237?\344\223c\200v\234\343?\210\027\330\331\320\344\340?\024\255hq>\211\322?\227\200\254g\313\235\343?\210\317\323o0D\323?@\202\032R\240|\325?$\365\251*\020\324\344?45R\234\323\305\303?\001\244\277\3159\254\357?\000\267\305\336y\353\240?\223UJ\t5\225\355?\232\254\227\320|\014\326?P\rZ\177u\260\325?\372h\2543%\342\331?\300\307\321\325 \003\265?\340\264\010\363F\177\353?:z\254\374\242\216\334?\201\312\364e\272\352\343?\251S\270\323#\014\340?\336\300!8\023C\331?\353\374&:yQ\353?\204\217j\304\364\316\307?\346B\'j*\002\321?\2074\240%\340\r\355?$\274\276\300\007a\327?\030\002)\313\022J\266?|\210\205\373\010\003\343?p\355Ir<\341\257?\0062\374\345\363\333\324?d\010,PuR\324?\020\315L\035\262\367\345?\266N\310\311q\342\352?\330\262\364\2067\033\270?|\026\022N\"\026\327?o\023\n\3054\274\354?\365(z\237p\267\343?\210*\316}0\263\301?\200\026\341\370\352O\312?\360\340Z\250\232\210\263?2\274\365\233\005;\324?k\263\355u\350\307\353?X\273\n\016\234\214\261?\236\256\274M\312\351\326?\236\367\324\217Vb\354?\020e\362$hV\256?\261G\227\017\211-\352?Py\303@\211G\325?rh\374\033\332R\332?9\204\372\240\016\306\353?\223Jj\234b9\352?h\333:dW\274\323?o\033\231\355O\242\340?\330S\022\002)\312\313?<\274*\010\037y\323?<\230\r\272\252\037\317?\365:L\256\230\023\353?#(\323\277\236\311\350?aE\243\320\242\342\341?8&P\230u\350\263?\270\270`\3416\320\263?p\343\210\005\310\345\337?\272\231A\'\034\350\345?w\246r4\255\271\343?\256DDsXV\340?\327A\314\227\025\322\354?\325zk\031\262\221\342?\020\245\236\217\266\275\355?T\360lX\265=\345?(\375n\027\317u\327?\260\252\013\317\2431\327?a\365_\226TO\346?\274>\003\367\024k\311?2Y\010p\034\260\320?\26000O\231\354\260?K\275\033\210\223\224\340?\024\003\213\213U*\324?T5\"\256\\\377\306?\274\244\351\250gI\353?@n,\365\375\301\332?\014\007\256k\220\320\343?\202\203,\237\345\303\340?\344\214\222\342+2\303?M\256\274\204=\333\344?0\034B+\314=\322?\243\240(\223H6\343?u;M\264=\236\341?\261,\313V\346V\343?R\367Hm\037\316\326?.W\000\263q\353\344?>\232\255>r\365\333?l\360/\033Y\207\342?\235\021A\206\323\323\340?\363\n`Vo\242\343?\364\240\007\004\343\376\327?h\226U\000I\021\273?\3227A>\263\020\355?\324\336\244\277\335\334\317?\312\334\373).\236\331?C\275FC\014y\342?\330n7\271P\034\261?D\375E\226G\331\327?\010\034;\2627\021\330?\306p\352\341e\262\342?\014\006\253\n\302\'\345?\217\034\224]Xm\341?\313\202P3\303P\341?\262\373\204ztM\335?\360\365\330\'\234=\354? \247\336\254uI\244?\300\225\243`\220\356\325?b\3025Q\311k\355?\312\334\277+\206\275\350?s\024\314\275\"7\350?\221g|<\027>\352?X\322\001\355b\331\334?\343\334`\361\210\"\355?\222k\243p\017F\321?2\204\232\2560\037\337?\310\326.\014\277\366\300?\243\322\226\307\216I\357?\231B\030\023p\006\341?\263\027\324\235|\220\342?\200\221\271\030SM\244?\357\234\204hk\306\342?\000>\200x\023\263i?\266&W\016L\223\323?\256\300y\265d\340\325?\032\257\250H\263\301\321?Hp\231\254\257\014\305?\202\244\024\177\240!\327?p\376\202t\203\201\342?&7U\315\316\030\333?&\0304\366GT\334?\332\374q\252\336>\356?O!\247j\333\206\353?\021$k\2359\351\346?\331\237\341\355w\217\345?@\034A\343)\334\246?\234^\312\342\262\236\321?\334\3042C\001\302\334?F]g\024\326\302\327?\220\223\200\313\334\220\301?\237)R\235~\026\342?;\245-\253\205\301\342?f\317b\372b\013\323? ~\325\227.\247\313?\302B\315\177\r\310\355?)\301\340\346Zo\350?\350\203\021Tt\016\270?/nq\362h\213\352?H\324\276\362\035\026\303?_\335Q\251\n\017\342?\250\364\330UO\240\314?\004\205k\243\177\247\334?\352q\271:\241\277\351?\2023\032\277\023)\334?J\272\252\336i\033\353?\221-\273\243\230D\346?\000\0058\200\223n\301?^\010\004\330\2741\345?\377\033i\020\024|\352?m\2251:8\270\340?\267\300\025\002P\026\340? \022\257t\345\322\227?Vu8, \261\355?\272\222\246\0019\330\352?\215\213\347\311<{\350?\000\320s\321\036\306J?\304\272@\221\327\316\325?\360L^\206<N\323?\365\205\374\2020&\340?\240A\3367R\377\221?\020\002\331A\353V\312?\2414\016 O\217\343?\341\364X^\006\031\345?\270\245\306\375)w\272?]\212%=\226\240\350?\262\337\305\r\372\343\322?\314SdmL\331\351?B\303Q\341\221\252\341?e\344\365U\340\226\354?\\\266\251\t\336\013\356?\244\370\237+\\8\326?\360\253I\371\325\003\341?\270\250\202\322\241\335\327?\276aH~\'T\341?\377qx\024\n\035\350?\266M\345#\001\335\341?\\\002\210\251\242D\330?@\371\277f\370;\224?\327\221\336Tx\345\340?\300\367c9.>\220?$\026\233cxA\356?\024}\237\265F`\347?\260\245\252$\254X\344?0\026\036\372\013f\275?\310\305P\217=\n\303?\310\253\233A\231\"\275?\200\036},w\265\204?=TQM:c\355?\276\374\226o\327\003\326?L\372\031\022Ki\353?\020a\007T\024\237\241?\312\333\325\257\2447\337?\316M02\310\251\350?\326\223^x\243\314\352?w\354%\027b\321\343?S\300P\301\250\300\354?\340\2219\212\016\231\357?I5\353\243W\246\347?\000\217\375<\364\204`?G\275\237\027\001\376\356?f\\}o\3473\334?V\353\243\013O\351\345?\312/K\221w\346\321?\000\256,\216\337]\177?\204\373m\233\357\216\333?\\\263\nR\273\001\357?\\\220\025\207\016\323\321?P\r|\022\220g\343?\202\375\2541V\373\347?z@\211\026hP\335?@1j\234\255\242\215?\301\355\321N\206s\341?\240i~\200>\321\325?/\350\n\251\300\262\354?\370\265\n\024\355\312\337?K5\026;\377/\352?\312Y#\201C!\350?sk\207\267\311\373\350?\3014\366\235\235f\356?X\006\t\270\221\240\344?|k\376Y-\355\344?\374tDl=]\333?8\310\237\336\274\234\324?\322\226\222 I\340\322?\226\0047\213\213\305\321?\371\3300}\302\017\357?h\303\253b\035S\302?\245\021D \211k\347?\234\335\203\303et\326?\354>\331Q\333^\312?\321\224\347}\344\314\347?@\005R\022\241\"\261?\350\246+\025\312\272\302?\200\362J\233Hu\341?\255\367\377\255ID\345?\222j\032\225\240\021\337?\310\363wE\253\344\354?\200\261Rm\\\177\326?\252:\236\260\264\243\350?\240\2417\377n(\272?\000\244\363\247Z\036E?\242 \n\314M\337\337?u<|\221~\315\354?\3026,\330\352B\352?2\216\217\361\030\371\323?\000J$]D\237\236?\031\324=\"\376\246\346?:\373\010\025!\345\340?\016\315r\213\310\030\351?(\300\205\315_\370\306?\324\353E\211\353\224\351?\010S\255S\270\202\354?tSz\232\331z\301?\255J\271\030w\247\357?\350\322\020\250\t\345\276?\000\262\026/h\354\340?\362\177sD\366\243\351?\n\227\366%\377\254\323?\374\211\020B\021\030\325?\200\320l\376\027\023\346?}\342\350)\2744\357?P\252x\"s>\270?\333\266y\201!V\346?\270\245\376\321u\020\334?\010K\273\304\232\233\325?\331R\267\211\371\\\352?Tq\030\032t\201\341?F\310\270\014Cz\355?\240\327j\2247\n\325?\252\030\010/\306\223\336?\260\242\240\233i9\240?J\026l\332Q\000\336?\213\0105\231\033\375\354?\010\257\215s\344\371\266?\270M\351p\023\236\353?\354F\302\337~!\316?\200\n\343|a\235\237?g\212\352\275o\235\355?~jcn\214|\355?@\254!\235dn\256?\226\374\000\353\352T\356?\001H\031xX\201\340?\2165Q\177\226e\323?\344\351\232\322$h\344?`\210\r\304J\327\236?PA,\314\026p\315?\316~\002\367\376\243\343?f\251\222\364\334p\352?X\024\354\307\350\325\351?|\006/\246\222\364\304?\'\222\326\302 #\345?\026\225\022lV\334\345?\204\323\000~D\367\327?6{T\2029H\353?\241\251]\253L\227\347?\364\016o\260\025\223\357?\266\246:\372\"_\346?\360\n\334\003[\014\342?,\260\001\332M{\355?9W\026\003\252\373\341?R\200\363\211#&\351?\2246\347H\271O\317?8\244\272E|`\304?Vk\220\306\301\346\345?Et\3508A\207\353?n`(\002\346{\337?w\313LuH\270\353?\220p\242\361\270b\260?\000\2441o|:\327?J\367\226\254\312\014\344?\313W{\263$\337\341?~\023\216Z!\344\344?\336\010\211\212\366\021\346?5\226\374\366:\r\353?\2428\363g\2072\334?#\267UA\262j\344?#|x\371\221\276\350?j_\347\254\256=\332?\247\332\256\322\255\275\356?\204\265\231\343\200\340\354?\262\014\002\245\342e\335?\2228\351\357\325\362\344?\332\365\372\345y\377\351?\372t\335\300r\305\324?\226\245\345\354\357\366\342?\330O\226@u\253\277?~\237\303(\363d\356?\031\227\037fHe\345?\204\362\225\321\200\223\353?\016c\031`^\374\320?\254\030\271\305\\\226\355?bd\013\3755\377\341?\226\013`\210\351\025\357?L\211\263\330\357\345\323?7\225h\003\337\237\344?4\211\256\251&]\337?\236q,Mu\362\330?\030\005jt\211\272\311?\005k\336n5\363\351?\000d\2310]\315\335?\300\330\304\260zb\261?\206\312\371\337PE\356?\027\257R\005\310\273\356?\001[9tA \355?\0041-\016\276\002\347?\245\345\332Di\363\357?B\004<-Yi\340?h%\374\333\221U\327?\324g\213R\242\031\353?\304\037\n^Iz\333?\312\304\251Q,\031\337?\264\215_GZ\215\305?\032+\225\227\010\247\340?H\235\234(\3651\335?\026&\306\026\234\'\330?\325\266!j\246\313\347?\356}=.iR\340?J\177\177I\003e\352?goL\307\372\016\350?Pq\344\233\362\030\313?\220\363l\264\203\350\323?gd\223\032y\366\357?D\314\270x\231\215\335?\3676\201\336\242M\346?\030\031\t\346\256\271\302?<\233b\200\377\225\344?X\375\210\006\263V\335?T\031\2009\307\232\330?\312\210\353\251\022\010\352?\240\311\303\336\332\235\255?)){#\032\332\342?26Fu\236\225\331?\376)\344X0\253\351?B\034\234\245\322T\343?\020\310\365\244o\002\332?\326\233\307\r$\343\320?\300\204\361\315\321&\247?\3014\212\316\216:\351?\320\2027\024\373s\356?W}\236\322\301\352\347?\251\367$l\245\367\347?Tuf\332\332\367\332?\t2[\237\"\353\341?\\5\217\257\216\245\317?\200\302\225\367\220\026\222?\201\375\2758\007\'\351?\370\370\346\010\276\254\302?\036\024\021\2674%\331?\001\001\262\003X*\356?\344\353Ou\214G\301?<\332\273\3522\017\314?p:\'\021<\331\353?O\026$K\237\310\351?\r)\246\344\016\n\350?r.\346\270\207%\346?8=@6\213\354\331?#\000\274\367xX\342?\346\216\233\272V\005\321?Vc\013\317\024O\345?&X\206B\232\212\327?E\275\r\2164\332\351?@\314\324\212\r\301\356?&VS\274\257\365\324?f!\230\026\332\372\353?\342\336;v\374\007\330?\357(b<q.\345?t\336|\250\361\340\315?\232G\0307\372v\346?\226\255N\232\213\232\326?\204\016\325\213S\254\304?\000\231\013\317f\351u?\300a\350O\000\245\215?\205\255\000\271\362\264\357?\350:\333L\247$\301?\233\367Rv+\204\342?A\377P\271\330:\346?\307sc\254\312\343\351?\004et\2279\260\314?\325\365\250\036L\037\344?{U\3720d[\350?\004\320\275\211\r>\334?\2547\334\277\244\031\353?\274\361\200^\334\335\337?v\361\252[\305\"\322?\014\267I/D\005\321?\037\247\n\372\014j\347?|\266\324F\001q\347?$\0223[\257i\307?V{OK\222\010\351?\350\r\254.*N\334?YW\342\257\341\215\346?b\366\2402u\212\352?Y+\032\273\221\367\352?\302H\217\307\253y\323?/HQ\t\375S\341?G\363\376\"\362\243\353?@\374?\2036\366\230?@\345\372\211\002\245\211?@\251\332,\207\261\325?\010\253\200\277\340m\276?\232\376\366\346\351\246\330?\225L\206\301\200\235\347?\263%V\313\264\220\351?\204\263/uh\343\306?\264*\317\374\310\234\316?\010\031\033\352l \354?\270\307\026\312_f\315?\304X\0052\007O\327?\220\373\320hCM\345?\\\310j\206\275\336\337? \240 -U\205\226?\204Y\037\035\263\014\334?P\241\300\324\231a\250?\324\333\347\331\253\n\347?b9\377n1\311\346?\262.rp\250\331\326?Z|h\227-\231\356?\250o\271\363e\001\315?\355AV\323/\177\340?\016>\326e}\353\346?`G\223s\025N\302?0(\317\322\014\326\316?\200\361\026\251%\201\272?B\256\311\375\365\211\331?\200\335|(\304\350\276?X\255\226\351Z\251\332?\270czGd\242\310?\267\231];\241\023\355?\\\304\276rO\257\341?^T3\024,\001\324?\010Qtm\205\307\345?\200\333\322\301Vq\223?1K\376\340\005B\354?-\237\274\313T\237\344?H\023\352\201\321\327\347?\201\320\013\365\257(\344?^\263A\3661\312\340?\210\205+\031\226\356\331? \002E\214\022(\320?\216\310\342\364]3\340?^\335F:\235f\340?\254\002\025&\322\271\301?\240\327\242UU\326\331?\340\350\354\277\206H\251?\000\207}\306$\263o?0[n\276\223\301\333?P\245\303\202\274\001\303?\3738\377\267\\\201\354?\361\2154\\S\271\352?\312\226\335;4b\330?0\004\312\334\306T\334?Ne\231n\213p\341?hD\340\024\247O\310?\350Q\003\205\010\023\334?\'\022l8Q\262\345?\214/eQ^\010\337?<\212/\314\201\237\346?@\272\256\350\225\303\260?x\326\235\253Q\210\326?\272\215_\331Ee\331?~WW\010\317\251\320?:Wl\244<\220\345?\230 \362G\255\224\311?\251^\327\'m\343\350?\247\305\226?~\271\342?>_\242X\301\271\332?\340\212\223\215\304h\315?\340*\251\363\241\303\234?\246z\216\257\005\303\334?\014\346R\231\033\013\303?\340\376\243\321\247\323\335?\360\235\010\231\204\232\262?\032G7\304\346\030\331?P\371@N\014\331\326?\026\230\355\300\271v\347?\220(P\004\370\261\345?\357\024\273f\235\322\354?{Qx\030\316\251\351?Bn\036\375\352\352\326?\2551\034\316\003\316\351?}\321\330\347\215z\344?\020\216t\327p{\340?\304\301\rrk\276\354?\022\034\315^6\336\335?\342\222\363n\300\"\350?\004\002\312\277\376T\315?\340\222\325\341N\262\237?\320\344]\366\240#\336?\032\277R\240~\207\345?\030n\3475L\215\317?\2620\247\'\371\240\335?t\225\370\332W\231\313?\336\315\231\314\\\335\354?\000\360hh\347\032S?W\r\033\357[\247\357?\344&\254D\256\355\330?\346M]/\244a\353?\306:?\203n\304\323?\024_\201B\360\031\311?\310\333\206zk\330\334?P\331\262\021\323\021\277?\274\236\273k\035\377\333?\250fx\332\272\221\311?@\250\333\035)<\310?p\341G\243\367\017\252?,\360\344|\271\312\324?\022\252<\336]\367\343?\004\300tZ\027\'\347?Pq\301\317\023\215\273?\335\302\0045\272G\345?\220\242\212\246\036\274\253?0\240%W\206M\352?\265\356e\323PR\350?{k6k\223\356\353?\314\341\352\004L\225\344?6\213\355\362\207|\326?&/`Q\363A\341?X\353|\360A\t\317?d-\345\031\327?\343?\220\236m\021A\256\346?R\342v\214\200\302\336?\223\373\367\241\376\256\353?\235\366g&\'u\340?\032\357\314E\355K\325?\212\226\026L\232u\343?p\001MM\027;\351?\253(n3\227]\353?\322\006\025\332\2022\320?\260\265\225\217\213\177\250?\274\305\353\341\253>\311?\254\355\240a\026c\305?\010a\010\017r\222\306?\034\210m\274V\243\306?[\202\223\342\333\225\341?7\356\272:]\356\354?\300\010\220{e*\255?\030/\030\027{\270\330?\2525\335*x\254\334?\002\213\247\0346\'\322?h\204w\303x\330\270?\272\n\317\267\310\372\327?\244\357K\006)\373\313?\000Z\260\216\363v\323?\224,\326\030\367\002\312?\376\263\376v}\021\355?\362\235\001\017\t\331\344?\312\311\374z\322\005\336?L\345\2334A\204\316?\344L\301\240\267\035\356?\234\207\004\206\r\323\324?h\026r\010\206 \341?\3507y6\234\243\305?\225!\352\257\255\362\354?\374\231\376\030\320\n\325?\360\272Ue\233.\244?\354\211\021\317C?\335?\300\000\221\035\2575\276?\260\235\nx8\365\346?\232\342\311\307\302\246\326?\216%m\177&\250\330?\353\353\335P[8\340?w`\001\215\212<\355?T\026[\320h9\313?\317\246:y\013:\357?.\372\362\344\227w\357?\000\323\270\331\317\222\264?\200\207\300\341b\346\307?\311\241\027\345\265\210\351?\320f\365\227k&\275?\364\336\360I<\271\333?\210V\004\376lM\312?\223\2448\373/\372\343?\316\207\"\224\236\210\324?&L\242I\204\237\335?\260\217\317F\220\246\272?\2226\301\356w{\340?2\217\030\270\276D\327?\252\036F\341Wj\336?\302U\214\022\221(\340?\304|\233\017\236\300\331?\020\357\213\241\255<\264?\024{\327\276\370\260\326?7\013n>\344\210\341?$\255\333|\340\326\322?\356\031\005$\334\024\333?\001\313\352Jg\263\351?\026\030\260\323\271\256\331?\030\"M\307\322\236\342?.\242I\371\370\276\357?x1\n\225\214P\333?\035\331\262\242\033.\354?\361\260o\201G\372\350?`\026?6\321E\272?$\225\307\222\"t\306?\230\246\366\263+I\334?~a\232^]j\327?\034^*\350\320\326\355?z:\316\303\304\366\321?\350\010#\346\033\027\266?\300\034\240\227\023N\225?\240T=P\252\360\273?\360\316\374\016h\273\311?\004\025\242\270\207-\325?\251\001l\277\212\252\345?H\014\247\275\303\037\324?\323\334\276\255{\366\357?Lu\n1Z1\315?\022:(\276\371\230\342?\270\006\256\370(\314\336?\374\203E\035j\300\302?\300.\320\347\'\003\340?\254\361\037\331\211\032\310?\032\033&m\003\302\347?\204\215\356.\201\340\347?,\341\\a}\344\324?\34452b\340\313\346?\352\"\260(y8\355?\035\314&\327\231\242\347?Z.\322?dU\337?\300\324\272?5\210\312?*\010S\244\331z\352?\256E\332\177^@\344?\\\035\330?\017\314\326?e\331\264;G\204\340?\304Fz\355i[\354?\033J\220\'\326G\346?y\357\326\245\235\242\354?N-\347\306.\263\346?\020\r\227\312\177\026\242?\0348\341\305\215\236\302?\254!\271O\214\205\341?\n\261\023\335r1\332?\000\342l\344JD\321?\230w\250x\230\177\346?_=@m\000=\342?0\311\370\206\217\270\350?/\020\332\270\276L\344?F\214\325\300\3425\347?\003\357k\340\372K\357?z\3557\360r;\324?\300\372\211tGN\337?\350\3536\333\343_\321?QV\345c\263q\344?\261\321oP]\375\346?\340\302w\032X\237\303?\310\2278_,T\266?VrMj\342K\322?\027\356\n\363\377_\343?\232\367_\",\257\340?`\275+FR\266\272?~\032\177\260\230X\352?\200\244\026\320e\266\306?\344\243bM\2353\335?hO\204\205!\212\352?e\233\257*\263\212\341?\340\265\313\020\005\237\333?\274\252\216r5!\356?b8\363\272\202Z\330?\024\002\324\237E\016\330?t$\025*\010\031\342?\334\'h\005\313s\353?\300\030h\001Fj\260?x\213\240\3457:\317?\356\366\177\021\237E\321?\215\271\261\355\033\270\347?z\031{\036\363G\336?\304\370$\303I\351\350?\220_\277\2430&\353?\207s\363*t\362\351?\361\020\367?\206\346\346?\356T\267\227]\250\353?\314#Iu\360\217\330?\001c\332\263qm\350?\242\025=\273k\235\352?\n\022\'\245\026J\323?\362\254\301v\3670\335?\320\344\'G\324\327\275?P\317\202\307s\240\253?\002\226\000\203,k\345?T\001\235\273\376<\301?\255\025T\200).\351?6\266\215\327^\t\336?\300\372\307\223U\216\312?\213g\265c\241\345\355?$\"#\263^\304\313?@D\232\225\244k\260?\020F\300\002\233\321\277?,\254\236\305\212\351\330?\r\363\365\253\312B\341?1SOyd{\350?z\214ju\365\250\320?\207\376\220\275\"\022\351?\260\022\203D*Z\263?\355\324\305\002p\257\347?\350`\3002>\261\266?_\254\233r\242\277\351?\000\347R\372\334o\227?*\346p\361\242\"\355?\311\300\022,c\233\354?\274\226C\033\214\242\346?\373\253\375\024\245@\357?\315j;!\223\216\341?4\274\350\331\363\031\350?\006\244.Zr\025\332?\262\022\206\333j*\324?\026\037\244G\224`\357?\360:\003\223t&\342?\246\"\200\251\373\202\324?\316\310\001\004\210\302\352?\250\367\212y\001\006\334?\204\022\223\273D\"\351?\275\266?|1\273\356?\212>\033\351\246o\323?\305S\275\367\001\022\351?\003\017Qc\215A\341?\273\367}(\220\032\347?\014\213\214\024\205\306\324?q\2336\320\273\351\343?&\312\346\036\006.\330?n\240\300+\227C\353?\330\016\317\242j7\323?\240?\007e\224\300\307?\243\262\010x\363\240\343?\\Xh\211\034z\331?4\205O\354\307\245\307?e\230g\313\273n\356? 7\340t\320\334\240?\322k\210\266?\030\340?H!.!\247N\312?`\241\220\221a\337\350?.\211\373\313\350\362\324?L\327\303T\364\251\332?P\220\353=\r\264\240?\225x\333\270`\016\357?a\343\335\262[m\356?\367\033j\336\016w\341?\304 *\347\003P\310?\266\267\317l\315p\331?\264\350\371\030\326A\300?\204\020-t3|\311?\326\361\325\334\341\246\322?\"\241\031\320K\006\332?\327\314\334\n\020\010\350?r\0044)\205\221\344?\014\310\336\247\2455\332?\000#u1\347w\354?>\314e\247\001S\346?H\020B#\030j\313?\0306yc\357<\327?V\241o\231\361Z\320?\350\245\265\002\300\007\263?p\177}\240\036\241\324?\305g\331D\002\272\356?H\003\021gb\031\336?\307\366u=\363L\352? \237xm^M\332?\030\3154\031W\026\356?\277\030\373\226\022\272\342?\370H\363\224\373,\272?.3\266\273\002\234\323?\r\322\271U\226v\356?\260\026 `\250o\344?\370G:\310\357\364\346?\316\204\016W\221\033\332?\210\014\306\030\271\232\351?\222\007\030*\036h\343?@v\341 \210\275\350?n\301\355\360}\360\320?\000ZB\204\202G\223?(\200\300\331&\354\265?\303\316K\260\257\354\351?\350\233\311\301\304\310\301?\236\252Z\364\022Q\354?\035_q1\231\\\342?\340\023\365\026\030J\355?\230v\211\204\225[\357?\223:~\001\371\r\352?\357\301\013\352\345\013\356?\\\342\200\206z\'\312?\360\273\266/\260\246\322?\374\032P=\352\013\333?\205\230(\346\314.\347?\374\253\344\335\325\300\321?\324G0.\261\216\325?\270\272\243\322\354X\322?\300\031\371\367\361\373\257?viJn.{\324?}\310\360\253\245\330\345?\030\031q\327\275\323\355?x\321~3\307^\352?\3139/\314\347#\351?\302\371,\014\212\251\326?\244\177e2]`\321?\352GIy\324X\323?\251d_\324|#\342?\210d\036\312?!\345?\330\0316\001?\313\317?d \256N\355G\337?(z{\275t\023\311?\301\255m\356i\203\343?4\242\256\304Od\314?\005\327\'\306\373\211\342?\031\262\205\016\021p\356?\036X\224\211+\357\334?(\025H(?\237\323?n\371\301\254\364\207\341?\216\231\006\257\371\316\347?\303`\336S\370\247\344?\210\232xF\351\277\341?W\260\035\257G\252\351?\217b\276\243\367\251\355?\341\020zE\267\010\344?\324\312\360V\243\237\344?\034\236\210\202\337;\331?X\2522\335\2059\265?\366$\212\213\020\330\336?\344\307\371\233\211\352\326?\350W\005\275=\374\304?\301x!\3450o\355?\226\2653\370F\227\327?\377\326\002\006E\204\343?8\365\031?\014V\347?~\246\255I\255O\331?\300\372\027\333x\253\320?i\250\277\360\305\322\357?\000\342%\252\2625\207?`\225\211w\202Q\266?\025\346\n\277\002\366\345?\244 \205~Y\363\326?\270\226\222\351\013\024\346?1\031v*\312\246\357?\030<\013\033\334\301\343?~$\014t@0\332?\036\354U\016\3741\322?\316\210\353\341c*\326?\2217o\036\266\002\340?T8\231\\\216.\334?\224\327\271P`\217\302?\340\327\001]\241U\305?\331\255\365\275uG\341?\300I\22532\007\331?.{\233iI\360\322?e\027{io\210\350?|sr\211\326\013\357?\366\212\\\226\255\271\335?p\364\364\023g\"\305?\244\350\266\243\214\332\343?N\316|+M\345\321?\274\305di1X\304?71>\271<\322\341?\374k\025x\336\372\352?|Z\235+d\022\333?\031\357\261\302\014G\353?\326!$*\311\316\320?j\276-i\204\030\354?\320\260\025*\276\344\250?\006B\016\020]\347\334?ZU=\224-0\337?\332\013\202\032+t\346?\362e\004\350ZM\347?\374q\360\344H\220\321?\027\342|\n\201\256\346?\257\336\233\257\027\272\357?\367\312a\002\276\024\355?\320\213 \330@\200\317?\260\276\213He\314\262?\364y\210\010\"\332\333?\031\222\347\206\313\336\351?\200\263\317,\252v\203?6<\236r\222z\330?\336\262.\315\271\344\356?\251~,W\310\211\343?tO-\224K1\342?\r\333\240z\334\211\350?\204\300\033N\225\334\312?\326\343\233\227\240\356\325?u\240\257\365\361\300\350?0\032\360\235\320H\312?@?K3\252X\340?Vu;\"\353\356\356?\230\211P\3707[\346? \023fa\3310\323?\010\324\3423\303\014\265?\020\366i\n\217\351\315?7&x\334\237\220\351?\002K\331\177B\367\355?\324\022!\372\020\232\350?\370.\261\342\361X\316?~\316J\250\001\322\346?,D\320rp\206\303?\231\255\211\225\235\360\355?\312}\002OT\036\324?\370\207\316\322\265\264\324?H\226\361f\212h\330?\332\233\261a\213\354\353?-]\335\244\273\035\343?&\264E\313\320\016\340?\022\3303\332\346\244\327?\000\221\332\243\346\206\236?\372Ub\332\265\365\322?\206\242}H\344\342\352?0\'\365M\257\251\342?{\352\204\303\264\243\344?X\342\314E+\355\347?\026\013\310VV\223\342?(\220\020\357=\275\337?`\003\"\274\302\355\301?f\274\256\365k\361\334?cA\020;\321c\344?t+\350\251~\367\353?\344G\027iM\211\321?sI8\325y\327\345?\220\334t\177\323w\355?\356\223\245\321\373!\341?X\301%z\200\251\307?/\177\246!z+\354?\310\016^x\247\352\276?\357\016V\355\330\371\355?\030Z\216\004\000\353\322?\274W\272_%s\347?\312\261\252/{\253\337?\200\024\335U\025\227\261?\\\351\375\376\014\244\321?7\232\211@2\206\340?|\225a\036\247h\347?C\006\365T\373\027\345?0\213\301\203\007\355\356?\342\337\317\r\022\263\357?\300\252\371\301\302a\232?\027\025\367\324\214\302\357?\017\233\336w6\333\341?]\031+#[\237\355?\250\346\3766\227S\271?\250\007\334\247\354\254\263?\330\3222=\0054\325?\202\306q\3431^\352?\334gQ\355\275\035\336?\217\201\\\230w\024\343?Dt\365*\251\242\331?\321\266G+\034\277\357?n\n\210C\312\230\342?\3308\213w\252#\354?\202\257\252\360\376m\341?\224#/\342f\237\344?0$]\010\006\"\355?D:\032\376\014$\300?\252\3759\224\321N\320?`\r\366\360\322L\237?\350\3266\233\306]\333?\240\n\305sN\323\341?\241\322#\222\370\027\352?\010@\342k\2235\341?\344\226\017\330\037@\351?\276f\355\244F\374\355?2\211\374\321\304x\332?\230\027q\023\247`\272?\320\277\272\206W1\327?\374\223H]\254\330\351?\253:\374\343+=\355?\2042\356\342\344{\314?\265\307\363\340\353\225\346?\304\345\223\006\220\304\324?\3644#`\260\342\336?\356\257\230,\266\354\347?n\262\022\277\020c\354?|\3468\270Q\232\343?\375\242\223&\233\300\340?\330L\031\353`\334\276?\224\372\373U]\254\327?\257`\331@b0\345?\034\263C22!\353?\204!niyp\355?\000~[&\230\\\272?\250\347\207\002\001\237\343?\302\252s\325\207Z\327?}hR#\005\275\356?^\230<L\027\344\333?\307dKr\007\254\347?@\240;\306\234J\313?\277\276\233\234\014\254\351?\314\366\2664lf\342?\244r\215^\346\213\310?Io\270}\331\022\355?y\322v\241\032\314\355?P7\223]\360<\342?\030\275+b\313\224\317?\310\006\321|x/\327?\223\336v\310\032\373\347?I\355\237J\224\332\355?\373T>;x\021\345?\306\253\244\276\"\256\355?\266~\tY\n\030\321? +_C\311=\220?\000\020\003=\245\266-?\202\303\261\321\274}\356?\n;B97\\\333?\242\201\037|o/\325?\342\030Ah\006\236\321?\343\036U\236\301I\340?\240^\3454r\236\276?\234\024\272z\271\371\347?\212\314c\271Y\231\332?\317\244\305\221\267\274\344?\321\004@T\262\260\351?\276\001=\030\003\336\331?\036\340\232?\210=\341?\342\226\010\366U7\357?\320I\024\014{\211\270?@\355\031\236)\000\306?\324\027y(\344\232\352?\260\260^I\025\345\253?\027\210\372/U\004\353?\260\034\301\232\250M\252?\256\304(\004\201\207\352?\366\0375[\313S\352?\325\303F\252X\276\357?\370\375\007\272\264\201\304?\020\023\000\267\366\277\276?\360\231j0\022\321\336?\"\214pT\034\266\351?.\317\307\260\010\275\355?J\357\311s\364\221\341?\304G\234\036M\224\330?\014(.\230\010[\310?\3442X\356\357\200\337?B\311\202\237s\n\325?\201\000c\202U\323\350?o\310M\231\323\315\356?\230\310p\257\034\263\314?\230U_\314\320\356\272?\004\367\376\375\331_\331?\260\r<>\273|\324?#w\025q@\371\345?\036\311g}\317\326\323?\\\225\307\335#\257\323?.\014\361S\004\031\354? E\350\216\000\240\336?\342?KtL\265\323?\367!f\006C0\344?\016\364\247\034\201\305\340?\240\0333\241\263\341\333?I\214\300\257\325\026\346?|#\240\241\362\"\302?\006$@f\237\232\320?@\0136\370\207o\222?\000\322\310\240eJ\267?\331\227\021\007;8\345?\240\263\2051M\300\323?k\307d!\266\304\347?tWaI\376@\340?\006=\354\0003\347\356?\000iD\000+\204\226?\022\357X\202\256\365\344?\231x\232\037\366#\341?\330V\026\333{\321\340?A\016\353X;\007\347?8\2714G\333\207\271?L\342q\2223Q\322?h\361\220\264\302\033\271?O\006\226\361\253\261\341?\3074d\237\001\024\350?\2761\2156\320\032\327?Tg\251\217>\255\300?\023bdwDJ\352?L\'z\021\3370\321?#J\260\307/\327\345?|\"\010\374!\205\301?l\326\322c\301\203\350?\350\351\202\031)^\272?\363\341\243\306\255>\354?\014\361\2574\214\364\330?\340olF\342n\306?*\221\321\330\n\374\336?\364\367t\367n\315\301?\330\323\315\"JW\342?$\272}\367i!\322?\\\310H$\346y\300?\032\205\344h\021;\345?\000XP\267\365\314\356?\220\352^\234\256\254\301?\\\340\365\227g\305\304?\230L7\024\325\345\342?*\245\256\311\366\177\344?t\243\367Y\037\341\337?\2300\310\275\356\273\355?74~\205\363\301\357?\000\324\226O\353\216q?0\002\"(\017l\314?R\310~B\336\324\332?\254h\350\355\254]\320?\020\351U\327\331\322\316?\262J\\\362\363G\326?\210`\342G\274\333\322?\030\245\231\331\371T\270?&\211\243N\301\341\335?\245i\337\256[\357\350?\236\245\032/\014\365\340?\224\264\342\276\341\n\332?\000\364\260\2372b\210?|3\314\306\363\n\327?\244\332v\026\251\246\303?\254/\311\236\244\221\355?`~M3\233\033\267?\302\'>\255=q\333?`\326\330~u\315\353?FQ\376~\3718\341?\320\037\256\337R\267\274?\340\252*\016\000\326\261?za\222\310a\030\331?\310\274[\373\315\261\330?v\325\224:\013\250\347?\220_+@\263^\305?y+\375\351\006I\355?\314-\233_\215\266\341?\240\330?\214Q\207\331?\264e\006\321\310\020\302?\000\224?\267-D\266?\352`\200\016\2315\337?\"\303\366n1i\356?\034\362\354\356\320Z\336?\346z}-\241/\336?AE\373\270\365\020\354?=\030\265\2746m\352?\276\235K\026c\237\321?+~\354s\357\253\340?D\247q\031\030\036\320?8\261k\347\001\025\306?\242-\303\336h\002\323?\200\263\222u0\376~?\025\374\014A\213]\345?\340\227\313R\332\210\260?\270NH\033\243 \322?\306<\177\353\244\227\334?Dw0\231D\372\336?>\020;2\220n\345?\010\337u\252\3105\305?2\212\220G/!\330?\013\303\213\246\352\037\352?\330C&;y\351\315?\364\234\355\355 \322\330?\237\273y\032\305W\355?[\330y\213\3138\356?\000x\307zi{R?p\2327\202\273\270\334?\361\337\032\322\245\220\347?\224\"\332\376\305\337\340?\324\306\262\014\030\366\327?V\250\246\013\\+\346?\3060oS\301\366\346?\231Z\360k\206\204\345?x-\366c\350\207\275?\232\310\306\013\017\000\326?\026\316\274\020\310M\320?\360h\233\027\000\253\302?\326\351G\273\346\325\324?\321\314\010\362\266\220\346?\\\004\025O\262p\354?\024\241Q\342\177k\311?\274E\254:IM\323?\242\367\3559\333o\331?\342\256\213\020\201\244\335?+\204\243n\350\216\350?\257\205A\277\363\244\353?<Fe\220\"\203\343?\205\322\216&\345\341\356?l\222\210J \237\307?-\302>OA\354\355?U\206\'\230\036\030\355?k\3002\025\351\223\355?@2\302\304\206\022\324?8A\301,\031y\324?~$\377XN\226\334?\276\207S\231Tb\345?\324\350\033)m\236\301?\360VM\340\375G\311?\274\000\245\273AT\334?\024\005\2052\316\207\310?\227\222\207 \351/\344?\351\360\314\215s\366\341?`\376\2343\3308\345?*\t\034\363\001\365\354?\266\222\232\017\324\350\322?J\323\243\342\367\354\356?\320\241w\225\261\340\270?r\341\256{N\311\352?\025\034\246\270\247_\347?\250Y1O\314f\276?0.\345\244W\247\346?\251\362\2159\023v\344?:\200N\272\256\037\326?\200\201s\240kA\247? \231\253\010M\"\323?\270ce\242\240\311\303?9\335\033\310\346\233\340?\234\"S4u\311\314?\230\374m\203\256\014\327?\222s$\224\255g\332?m\2103\253\357$\345?\274Jv\017\307\312\340?\272\370\316\337\2036\347?\022\226MO}\230\322?;\252x\022\321\250\351?\230\026\260VJ\225\265?\352\002\260\r+\352\341?\374u\301\204.p\336?K\204(n\231\033\342?aQ\351\321xD\341?Y%\205*\3640\350?8Y\005q\320\245\276?\000\031\021\342\031\010c?\324{6\272\343W\325?\250\250}\334\022\026\263?\356\257H\376\325o\336?9\367g\316\337h\351?\233X\356l:&\351?(J\276\325\221\360\352?\000_\211\267K\363p?|w\254\340P\377\324?\200=\212\304\352\"\231?L\342\016a\366\250\323?d\177\311\327\301\r\316?4\323\312S\365\251\352?\252k\247\363\033\327\322?\2505\007\276\352\374\310?\366\322\2675p\344\344?\243\220\322)\333\311\340?@\003&z6\326\306?\023\304\252[8\362\346?|\230\206\3530\t\320?\216\314\263\245\020\007\344?.Pc,-r\342?\0308\241IK\345\327?\210\235\257\000}\230\342?]\301\204\307V\255\352?=\330\"$\243<\346?;s\220\311\025\272\355?\031\331s:%u\346?Bg\240\000Z\302\341?\364\026\261\004\245\351\356?\3503\037m j\260?\0007\001#\\\261\342?Q\367\264\236\377\307\345?(.\233\376\370\235\301?\320(\022\324W\261\264?0\005lz!\000\250?\265\0243\352g\360\341?0\335\366\377\243\013\331?:\333\222\210k\351\325?\254\272\021\273\270-\352?\200\032\374\3001<\250?\230\377K\361/\336\347?\204\233\303U\377|\302?\220\272)p\246\231\355?`\206\nY\254\236\346?$\320G\002\000$\324?\357d1H@s\354?\006\275e\324\3114\322?\2323\270\035)\246\335?K$$\030\372\004\355?b\364\317RU#\335?\270$i\267\022\276\346?\314\371_S.\316\335?8.\340\237\326\253\315?\324S\331\356\223\"\334?\177sv\251\345\261\350?\352/\032\370\222\342\333?\340==\376\231\331\241?\302\215`\t\033`\346?\346:\305\013`s\336?\000,\272\372\021\234\224?t+\272Zn\362\300?(\362\177\t\371\227\261?\2076\375\241\253\333\351?\300\327q\210\027\231\337?\036.fC\275\020\356?B\255\004frS\331?\274\371[\365\376\334\342?\002\022\022g\224\233\356?\216{\363e\344o\342?\"*\t\331\371\271\355?\354B\001N\217\263\346?Id/=\022Z\340?\336Q\333\027;\204\352?\220\020v\025D\227\342?;\255\010\327\206\002\354?z\266H9,\306\350?\322w\027\335c\227\346?\226\336S\212dZ\336?|\277\305)\027\002\312?\276\000\200\006\270\273\350?`\350\222\205\207\311\234?\252\355\343\336oL\354?8\337\010\2004d\330?\336\370\314&{\201\356?d0\236Nf\251\344?8\353\254\234\240\371\314?\232q\020}\021\353\337?\266=\027{R\250\351?\364\007\036\355\330\272\323? I\336\021`g\327?\314\337\340\241\337\001\345?c\254|{I{\347?\234lX\257\022\371\330?\323\355\355\272\235\020\353?\360\244$\216\262\243\275?\rA\277D\313)\355?\315\267\366\215\244n\345?\220l\036bQ\341\346?\344\232\220br8\314?\026\302/\232\010\336\331?Ck\334\270 \004\342?\010WJ\230\325\357\345?\300o\303\2565\357\272?\334\"4\241\236}\357?\200x\2325\274-z?@\2518@\314\331\325?\260x\214\037f\327\337?\243m\t\252\253\021\355?;C}\250\265\321\344?\334\241\016#\216D\315?\264\222GC\370y\301?\220\276\244=\273\322\247?\262\233)\370\3121\325?b\326\220N\2279\357?\374r\267\206\350\341\355?\016\335\014\000\td\356?H\002\350\206\202E\346?/\237f\336\3432\343?\010\'\377\312hY\324?\200\002\034\2677Y\263?\264\265\037\005\222j\332?\\+\320\230E\331\333? (\343\360\213y\324?\270O\312\221-r\345?x\037dsh\335\322? h\017\250c\372\275?o2a\332\211\265\340?\033\342\307\300\202\261\357?T\006v\262`\363\336?~<>P7*\352?\200:\305\321\220A\344?>\241\240\336\255\246\351?\300\340\036\321oy\214?\360&]\252\240b\253?0\252\331\342-\013\322?\276b\2602`N\332?\000\312|3ON\266?x\216Er\025\027\305?\023\203\201\234\273\223\356?\354\253a\350\334\033\343?\276AN\250\200\343\346?\302\361\341\253D!\324?\'t\233w\022\300\347?\'s\361\355ag\342?5V\232\nM \342?\210F\274\324\260>\277?\246eb\267\202l\344?810~\336R\317?\242h\376\205\027I\327?r\262R9\247*\341?\240\354/\323[\001\262??\372\2350] \343?>\271\t\024\325\230\331?t\r\367B\'q\352?n\330\332>\2602\353?b\252u\251\236\370\342?\360\211\333\276\347\241\317?w\366\272\210\021\261\345?&\022\010\032jL\334?\024(\210\357\013\022\337?\346\313#[\361\322\354? (\222s\021s\352?>r\2005\243E\355?\000\306\231\302\367F\216?\246\027\247J\216\335\351?a\256\000\246Kf\343?\310\205\341\037hA\342?\243\001\222\307\317u\353?\241I\t\240\312\237\357?\340!K[\273y\241?\316\346\325f\362\177\346?dCKC\231L\325?\316\253\356\\\246\330\321?\316\033O\214e\207\320?\022\2405R\240\032\345?\232\304\261O\371\317\342?\342\036I\323\212\311\321?\311@\241o\340\214\351?G\\\334\230\306\t\343?\340\244\374\\:t\345?\270\207\361m\353\371\305?z8\374\326\233R\357?\314\377\212<\205\270\307?\314Y\032r\273\031\310?\331\261+ \241\222\345?\246\336#I\357\\\347?\2007\0072\177\254\263? Y\261i\315\210\312?\306\021\000m\2145\352?\305\3404\027a\223\353?\270\273\340\'kl\315?f\010\tN\224(\357?\000\330\rx\332u\227?\200]\347V\226\326\232?p\357c+5\206\264?L\221\nz\252.\351?\362\2061F\304\013\350?p\240n\016\211?\316?\302\305\253\000\334B\332?\t]\355\2731\017\351?\216\353\265\213\217\340\320?$\324\377\315\177\026\317?\200F\327\3345\211z?To-H\255w\305?\306{\333\007`\302\336?\300\316L\263\202\360\357?\232\3025w\213\226\323?\264\025>P\220,\335?=\356\026\262]\212\351?\274\2139\222o]\350?\232\222$\2171\364\342?\250\361\0236\324\317\331?\024\251Gm\273\355\340?\251\266\333\236\035\234\345?\024/><\003\227\350?K\0333~\350\340\346?\360n\001@\347W\325?(\256Hi\354P\306?\262\355\322\013\243\346\330?\2407\271~\351\343\334?*\002\220\224\304\001\323?\374N\224\360\260\026\305?\264cL\200\211\207\335?\020\331\177\274\n\035\306?Z\220\362\377:\361\323?\301j;\3076\317\341?\356\333\023\331\321\367\323?\247\232d)\t3\356?\360\347\370\236\344H\304?D\332U&\315\027\341?N)\246\230\340;\334?\205+\r|}\253\356?\340\014!\354hq\325?r\005\325@\254\321\335?8\010\246\035\3016\276?\213\334\324\rnw\346?Z\036\243\262\377r\337?\'NM\226\354@\341?\030m9Tt\240\260?\024c}\010g]\306?\370\017\\>\261\332\335?\034U\373SzD\344?\370\3241Y[5\334?^\310y$\251\r\352?\3006\210L\006\211\323?\356\247\243\t\324\365\347?\220\001H6Lx\347?\270fM\325.\254\274?\005\237\314\367\027\274\340?\000/\t\001\353t\307?Z\007mh\373\247\335?\304\274\363+\215\331\323?u<\014\251\261.\341?\320\320\201\373!I\277?\250\2504\0179\252\265?`>\373\331\177\230\352?\014\224\237+\365\263\352?\224\265\376\311\250K\326?\370\366\217\024[]\345?\270T\024\237\203^\346?Ldh\262\t\250\301?P\271\366:5~\336?\n4w3\217\343\322?\271\026\224<\241\235\340?\335\207B=\314V\346?\0020\366e\277\034\333?\330w*h\3209\276?`O}\354\346\374\312?\264\227s8]Y\311?\202\251\r\021rH\325?L\027\201\231NF\323?\353\276\"\030oP\342?u\\c\317\346\243\345?3\243\307\235\013\323\345?\324\003\311\307\230h\315?*u\370\213\304\\\340?,&\032z\203\344\355?\240\226\320fhY\305?\352)JK\363V\342?P3\260\370\r\013\350?\355]\343\025\357\333\343?\322\033I\202\014\324\326?vNxh\335\273\355?\270vb\307\257\027\270?\273i\325\226;k\357?\342\001e%$/\340?\204\215\355\346\030\226\337?`\035\272O\021\305\231?\300\262\342\336>T\225?\250\344r\'\020\246\261?\240\263b+\267\200\265?L\330\275\241\243\231\320? ]\204\033\315\256\273?\003N\030\242\301Y\347?&\267\347\3066\205\355?\n\032R\234\000\210\357?@\304\t\323\177B\312?\032\212\244z\210\321\343?0n+\206\367y\255?G\220\361wLX\340?\262|\255[\276\020\335?\375s:;\rP\352?T\217#\235\212\234\332?\270\375\273\007\331\024\273?rM\003\'\224{\342?3/V\212\037\371\346?\314\271YT\363\372\351?\377\220\307\264\270\"\342?\234\223y\373\272\250\316?\201V\205\264#\023\344?\226g\\,\241n\332?\212\257\215\364\303\265\350?\303\332\001\004\321\300\354?f\367\355\210\246%\335?|4y\313q\034\312?\210#a;\202<\272?\274fg.\216\366\340?\220\031yU\013\226\335?\266\337\313a\321\272\333?d\301e\277\032\374\301?X\355\371\00711\270?\023\004\003C\345P\352?\330@\204\313o\350\312?\240\317\340T\204i\331?\263\310\214\327\334p\341?\210\036\334\022\317\367\305?\200\224j\247\301\317\270?\000\200\233\330uNT?P\316~\005\234\211\301?6RU\212\0168\347?\022\tzgK\354\327?\374\334\227\177Q\307\332?hd\217Y\356\020\264?\026\3054!\237\273\323?6t\037\304\210\363\333? \016\373\275\246\n\315?\360B\324U\370\313\271?+t\324\303\211-\344?\321\206\236\001\010\225\352?\\3\014\377\352\304\330?\322\325\265bh\234\352?\214\344v\000\371\366\304?p\221\346\234\337\301\337?#Pg@>\000\340?\276\371\320$\025\302\342?\256\247\206\325W|\354?\342\276\317|\347!\333?BL\275\023\365\221\336?\000\302\037\351}\357\311?\212\325\264}$F\346?p\221\275s^\234\327?f\\\300\241\224[\340?R\"\345\003\025\346\352?\224\275\020\017\262\036\341?\221\210\r\312\363\255\340?\305a{\200\n\253\356?dB\037z\215\217\347?|\257\376@\236>\331?\250\356\306\221\234S\265?\022\353\216\333\177!\334?\251\202\377\255\034\365\340?\270\023\031\346V|\306?\220\273\2679\346\372\331?\270D\232\224\363\237\304?\000V\245\037,\031\353?4\213F\307\227\254\341?\203T\365\312\314\021\345?\300\264`N\371}\277?\271E\373r\213\320\346?\376\332\210\353\213\210\327?X\027\267\363:D\304?\340m2\033\004\253\270?\177I\304\261U\327\350?\020%\302\270\351^\321?\322<\265[\035\260\337?\020\234O\362\024&\313?z7HC>J\322?\300\211\023PS~\356?\260Q\0060!\356\275?4s\267\007\233\306\300?\216r\025<\3744\354?\014Y?9\032\244\322?\224\220\335\362\223\315\335?\332K\206\307\236\351\336?Q\334\271d^\312\351?\030`\262\254\205Q\315?.cN\3242\311\355?\243\250\257\342\0021\343?\314\370\317\326\355L\332?X\2615\315\241\311\264?\030\225\2670\246+\332?T\370\253`aW\312?\322G\377\207,\233\321?\326\353.\334\322J\353?,N\375\263\n\212\334?`\021\313\020\r\263\316?y\316Z\323iO\344?\254M\034MH\342\306?D:89e4\302?\222\207NHA\323\343?\364\020A\357\027\337\315?\312x5\007\241-\320?\215=\237\302\034F\357?\214\324S\027\315\006\321?\003\245\342;\241t\341?\227\351\233\232\357C\342? \200/\206\236\341\355?\030\3363\276\333\223\337?\005\001\311\033^{\354?6\212\353\231\263\245\352?)s\363P\313\036\352?\257\037)B\333\326\357?\310\nt\316\216!\351?\230\220.\324\346\231\312?\252\236\276\007\264\233\343?K\2245Ji\326\352?\340\332\315h\244\230\304?@0Q\024\206\210\323?\276\370\234\215\266\342\337?\013e\023w\215O\353?\374\365O\347\354\017\320?[J\206\001\360\374\357?\212\277y&k~\337?\340{~N\311\226\244?\341\312Op\"\021\356?x{\251\273\345>\334?\350y\243\034\2313\312?\316c\324\266\332G\353?\014\037\274}\0011\334?\326\373l\250L\232\340?\266\274\320\000\242\\\343?\305\262\344N\246\002\355?\320\234#3\214\025\351?\000\\\335\305\205\037u?5q\226u\312e\347?,VS\031\034\313\346?\372\367\r<?~\342?hv\2474\035\354\271?>\324:p9Z\346?g<\304\265\2176\341?&\300eA\ty\350?\224M7(\276\202\334?\222\304\323\201\327\330\320?)\250-\253\275F\355?\316\355\356\270\332W\320?\325\020\312\0336\302\341?J\rQ\355l\366\333?\247H\321\007\212i\355?tE\272\222m.\327?\273Q\026Cr\270\352?\207\242\344\316\256\260\354?\370\252\271f\371\254\304?$\353\212,%\234\354?=O\370?x\233\340?\304\234\020\016\207f\312?\210t\030\373\344\203\274?\227\317\224\036\234\363\343?v\2701\"\220\005\350?\350\351\356N\322\345\321?\244K\340\313\345\377\356?v/ S\314\317\332?\214O\355S\2225\345?3\314]Y\201a\341?\334\271\017q\214\271\307?\363\263\"\303D\241\347? ;/\367y\375\260?D\250T\221\353\245\333?\244;Hh\353&\337?\254(\003\323%k\313?\264u\000\037/\264\316?L\345\n!KV\302?g\340\032\200\362\234\341?<\337\360`\366\252\354?|\320\307\202\363\247\325?N\233\2445\322\335\347?\267\310\031\330\036\230\341?\032\031\342eD3\354?\037h\372`\360A\351?\242yCa\032v\355?le--XU\334?\004\210\037\034\302\270\355?\240\221\223o\213\000\330?\234\2402\346\3141\306?S\330+\nmQ\342?\310\263\242\243>\264\344?\246\347\200q\261;\355?\311h\347\372\036\213\345?p\272\340\313\227z\346?,\265\361/\352P\352?\253\300\334\344_\032\341?\244\003\302\311\221E\335?a\214\311\206r\202\345?)\351\032\350\223W\346?W\230Q\276*\247\350?\020\200\253\314\013q\345?S\303\264\205d7\353?0>\315\316\020\300\243?\324j\331\324\214>\321?\222\241\276\325\231\n\354?\246iZ8z\252\324?0[\016\311\264\346\276?\2658^t\032_\346?\320\234\320ky\013\307?\036#\333\\\265\320\325?\306K\014-PY\352?\226\225\351\242\306M\357?\277:\374\022Xl\353?\266c\370\310\024\022\344?PP\244Wm\263\353?\246\354\377\357\305\254\346?p\341~\rJ\347\277?\256\276\270\356\355\026\323?D\225;\2619\205\321?@2F[\226\271\211?XvN\355AZ\334?B\230\177\213\240\341\353?\237\014\366\"`\247\354?/,\345&\025\235\344?\240\030#\354\343.\247?\031\336j\006\227\014\345?\032y!\361\014\321\337?d\352\272\256\234\027\332?h\253\273`\216u\322?bj1l9M\357?d)hU\235\312\321?\223\222\013\007\251E\357?\242\326+\030\027\332\345?`A\263\374\232\020\351?\025\353\243h\220k\340?`X\337\367\350w\275?@(\205\335\240^\310?d\000\324P{\034\356?\n\0237P\322x\326?\220\020\344L\014E\347?*\271cKm\030\352?\270\036\022\331\314\333\315?x\237\255\351%\r\351?\224:\017 >\000\346?.\260.\304\352)\344?\010,r\245\272\344\276?\260c\273<\235b\322?\020\303\372\325E\334\263?4T\027\235\240\307\317?|p>\377\331\353\344?P\376\277\2167I\343?\370\263\372w\373\355\344?\340gyX\310\265\243?\362\177\372\363\"\002\327?F\006t\334Sb\350?>\307*\327\233\n\343?\354\223\344\023\302\177\317?`\336D\241h\332\331?\22442\n]\377\336?\250\201\200\356,{\345?\260\261\"sT5\302?\016M\\f\"A\326?f\247\033:\317\344\326? \375\365\205\262N\234?\266\374#Z\267<\342?>\217\214\343\0007\344?TR\n\027\t\030\316?\214Kl\3041\327\300?\r\254\344c$\206\356?\010aI>\202H\310?>\024#\316^E\332?<]\026\265Q*\316?\350p\225U\365\354\264?\314 G\246)\366\300?\272\354\245\353\325\253\345?\251\026\001/t\031\356?\354(\300\244\021n\313?\340\000\n;2\353\226?\264{y\256*\254\312?(Q;\226\307\366\337?\350\267\273\216\223L\330?\370JTG\217\366\350?\201-\023\"\216\033\356?\r\025\203T\000?\342?1-\236<\346\021\344?6\004n\324\246\003\343?U\244\220\242v%\355?-)\022\240\003H\345?K\244U\256Q^\350?\314\204\033-C\307\303?\037\313\257=\253\021\356?\320r\377\237\250\302\262?vl\236\230_o\350?\300\261\2170\344\254\276?\352\321\373\204\200O\356?\314o\361`\242m\347?SH\276\016p\330\347?4+\356g\030\017\354?\3471g\026\022\256\341?0<8\323\300\356\327?`e\224c\232\313\351?\010J\206r!e\315?\214\"\225\262\221\n\323?\030_Oj\370\324\341?\304\250\224\006(\030\316?\020\326\342C\275\315\273?\324>\323\213\217\260\340?\340E%CTR\272?N5\310\347v}\332?D$T\217\224\253\326?\273\034\221\201@7\350?\353cu\271\323\220\342?\217\330u\014@8\352?\242w\001\r\240\225\355?Z\233\375\311\'\235\354?2e~DQf\345?\210\245\364\244\374\375\326?8Fo\023T?\343?z}-\2600r\335?`.\034\352\223\317\274?\205\367I\234\355\311\345?8\033<\t\365\250\265?Q\240\000~\020\313\347?\373\007\361\207\202<\350?\000\353\017\305\377\314\261?\325\301c\353\275\215\346?\344\332\324yD\260\344?t\240\2065\264W\322?\354\'\346\272\354\024\347?`Vt\315\007?\264?H\346K\243\327\033\352?\004\032P\376&\320\351?\240<\005\323\364n\327?,\034\316S\024\366\355?_T\211x\010I\353?L\364\201:m\344\311?\220\356\307\r\177P\315?P\360\021\225\227\215\274?\354n\205\372\2650\317?\200qG\204\255_v?\360n\353{_u\261?4\352\306\362o\022\305?Pf\000<\225\257\271?\356O\326[\201/\333?\234k\'\247Tj\334?\224\364\256\373\305\261\342?\222\333Ej\372\201\356?\010e\3225\341\262\272?\360\231\335\002DO\336?<M6d\356&\347?\'5\036\332G\336\354?h\206I\253Bo\340?\032\374r\246\277\232\330? \253\t\224\266+\225?\021\035O\332\017\205\350?$\270j6\367&\305?^\245\240=W-\353? \303\347k\026\033\303?p+S6\305*\327?\316\314\357\020\004\376\322?\350L\025F\300b\332?`p\232\027c\252\344?\304\342\234\247\225$\320?t$zV\3327\331?<\270>h\226m\333?\336\256\336U\351\177\323?\316\026S\352/9\351?8\333v\022\321}\261?lW\353\2572L\325?\227\351R:\0353\347?\325\266?\221\313\374\340?\nn5\236\034E\326?Hqf?+f\314?S\375g\271Q\024\350?`\325\035&K\r\254?v\322\362\212\327s\357?\020\233\326w\263K\346?\264\223H1\356\002\357?d\371\361Hd\310\301?\247\351\032\252\275\311\343?\360\241\322\375v\213\324?\305\342\030\227f\026\356?\343\024 R\373U\343?[E\206>^\204\340?\344\345\276\376h\225\357?a\364\251. \226\347?\2607\026\204\304\024\312?\276\2707\275\273\002\337?\375l\351.\230\322\352?\232\322\262\231\260\261\355?\232b\330r\245\277\345?\256-x%\226\220\343?l\322N\243\016\204\301?\330\002\206\331\304;\332?,\320\242\366d\260\344?\264\010\003%\356\325\316?VS\355{ZR\337?:\352xd`u\335?\\\\\255\320]\377\353?\232\246\025|(\207\354?pMeP\263?\337?\rp6\354\013l\355?@\261\236\267\024r\262?\271\024\020R>\214\355?\2367\350\203\213v\330?\363ax\314\3263\357?\035{\251\307\240 \342?\314\275c\335j\365\354?\301\3446}x\323\350?\363\275-\001\325\211\357?\006\232v\215\303\204\344?\360\2329\343\254W\245?\\J\024\024\367\247\357?`\216\264M\260\232\347?\200/S\371\337\023u?0\356G^\327\331\275?\244y:\t\310,\356?\260{\352\035\003\356\256?_\337\375\356\345\340\352?QG\000\007\000=\357?0A\225\322\037\212\341?\350|\267\3275\361\266?X\023~\007u\333\314?p\202N\246\355\302\247?z\225(N\243\033\344?\344\370\221i\232v\300?\300O\034`J`\261?\340\224TL\277\023\341?S\306\353\010\034\255\351?\0005\312[\030\024\257?\026\214\203\251$\257\337?\200\333gS\365V\247?\034\325YQ}\303\344?\314\204\025\262\325\254\357?\245\005\316\345\252n\354?\366R\244v\3050\333?\002\005>\034>\346\356?\212V\302{\245\251\345?\334\213h\257\241e\322?\000\247\320!s\203\234?n\3625:V\037\325?\344Z\2717\253s\303?\227<q@+f\340?j%_h\005\372\320?\352\274m\210\361\333\340?\200\232\263\n\334\007\214?\372\244*[\354\200\326?\007\017l\320\333e\356?\'E#\206\212\344\343?\030U@l\337\232\307?\354\222\200v\246\027\325?u\357\257lc\225\344?R\377\311\315\346\211\346?D\304\001-N\215\357?Bm\234\256q\032\343?\300\021S\325\304:\223?.\"\343\253q\200\344?*\335\034\312<L\351?\032\366+$F\306\344?\310\013\311\341\246\365\263?u\341\026\000Kx\357?\274\010\"<\364\'\314?\225KH\216{\203\343?p\303\255\177}L\255?\240f\024\024\005_\260?\007m\255*\224\337\354?Cmu]\314J\345?\267\226\006~\270f\342?z\303|\343S\360\340?$Gl4\341!\334?\354\376\204\'\242\232\331?3L$\301f\314\357?\026\251s\341\022\022\354?2\320U\257\010\014\345?\235\240\270`\311v\342?X\201\3072\313\312\260?H\365%L\203\335\314?@\233\236\245\373\244\207?\300\003\377\236\251\214\267?\213J\342\3263E\340?0-\311T\3218\313?\267\265g\247\010\201\346?sd\017\357\253\367\345?\370\277\005 ;\340\262?\213b\357\345\275E\354?w\266n{\317\022\340?X,!{\271\335\312?b\236\305\320o]\345?\356o\3573\254\222\343?;j\217}w\037\356?\200\200\225,\215$\317?\314\246\254\221$:\302?P\016&\316)\346\304?\251\361\306\372\214\t\342?\244K\223\312\361\237\316?:\306S\326\024\330\332?\340<\177\227RO\225?T\261j\276\225\201\306?\223U\331\021\326G\343?u>Y\235\237E\355?\372t)\0202-\333?z\243\212\354\370\262\341?V\370\364\0242\225\354?\241\002y\326yG\351?p\340\376\271\252\177\340?(\373>\365\334;\263?,\333\316\321/\302\357?,(\n\021\247\302\350?\320\3213o\344i\267?n\255\\\325\t\374\323?\254\337\226\377\\\023\355?\300i\203a4Y\236?\n\227\005*\007@\347?<\021\234\220\022\314\333?Dz\004\306\227f\312?\347q\340\013\350\330\355?\235LH.\371\305\347?\240\204\213;\273\362\272?\016\255|b\210\030\325?|\001~\177\335\323\312?T8f/\305\335\354?Z6{\222N\007\335?|\277&_\006s\326?@\223\237\362\361\030\247?V\345\234P\314\202\337?`\375\006\370\2124\322? \332\303|\017`\351?\240?\026\375l\026\256?L\204\305K\020a\341?\244\206un\243\301\315?Lt\212\353\254K\307?\307H\365P\002\257\345?\234i\274\3249\037\323?\034Y)\2649\372\301?DG\177\371\343\227\305?e\244\002L\034\r\346?h\342\034\341\327B\265?\370\277\333\033\0141\315?\332\360,\267\341\344\344?\230\244X\272\315|\342?G\236\364s\002\334\354?[<v\220@0\356?p\2625\327MR\264?\247\266C9p\255\352?\320\304\233\004,\220\305?\371\230\321C\300\336\357?\327\007\313^\351w\345?G\r\207\200\353\370\350?\261\360\327\030\207K\350?\205|\3444k\350\340?\277\343\003Hs;\344?4=.\301X\206\306?\205R/}V\303\354?\250\021\316@\240\337\353?\232\007;\307hI\352?\300.\212h\342i\326?(@[\227/G\310?\330\002\253\356\310\320\324?\024\003\247\\\243M\325? \247\322h:\221\345?@s\227\364m\210\327?\n\025\342\010@^\325?\025\242\033|\271U\347?\\\336\222\270\326C\326?\030\372\271\237\275\337\351?\234\352\323>\024\266\333?\203l\260\0318\246\343?\030\237\025\263\225G\273?\224\300\021l\264\360\313?\204\037D#v\253\306?\030\307\237\305d\234\264?EhKr\355\346\340?\300\r;\314V\223\331?\275x\225\204A$\346?\207\376\207\321|\326\352?t\270N\032\356\311\353?\310\006\262\277\001G\311?\200\203\226W\t\243\210?\340z\346J6\220\234?J\331n\237a\346\321?B\005\307\221+\206\323?h\364\376\265;\006\323?\230\0108\346\231\027\320?\276\347\265\023m\306\342?\326\032\\\346E\316\331?\305\017\213\207\353\263\352?V7E3\376\253\330?\214J#/\367:\307?\242\331\"\"~\036\322?\300@*OC\010\331?\022\261j\353M2\353?\340\333\303\000\025\'\247?0\3615\323T\255\316?\216\030\214\004\325\231\321?\32652\360>>\326?x&\374\207Wj\301?\362\0323 a\014\351?o9\370C\346\036\354?\255\014\346,\305\233\355?\330\0323\263\2564\357?g\3752\272;J\355?F\232\002\357\311*\355?\240\357\013\375\202\225\324?${\312\372\375\321\325?\007\351\004\343M3\355?\360\343\354\336G\006\327?\232B\2662\211:\355?Dj\341\217^7\301?\224\211\330\035\007\035\345?l\303\323-\027S\306?\220\335\261r\303\t\325?\0100\371\rN_\306?\252\25002`1\335?H\333Q\246\224Z\310?\200\366\206\205:\t\326?@\325\262\310Xo\210?\340nZ\315rg\277?A\33735V%\356?P\341\373\2634\215\324?\034\354j\0070\235\316?~\306\211\"\317]\320?\000\"\231]\356\354X?HU\235\345\206\217\267?\360@\023)W\271\321?\320\302b\371\301\317\326?XPu\202~o\320?\313\240\244\202\302=\355?\206P\235s\030\300\354?\372qowy\022\336?N\356\204Q\031\016\332?\255\016\212)\004\376\344?*\030M\255c\325\344?\334\274\224\346\230W\312?\374\373\"\345\205\243\303?\026\330\022\224\275*\354?\322\360\240@\356\340\351?\300\374\314~\254;\322?D\241\343m\316R\322?\233\361\3761\204E\352?C\331\030CK!\355?\035\302wNA)\352?<zrc\003\346\323?LS\264\306\027c\304?\330\253[\241\006\373\303?\357S%\244\010\330\356?\202\233\354\367\207~\323?\362\350b-\210\333\320?\354\"7\262\004^\324?T\361\202\226\030\034\314?&\214\247\375~L\323?||x:X\345\316?\234\202@\307\353i\305?)>\r\244\351\332\342?\274\235\0048\252L\333?*9Z\254\271\326\331?\307\234t\315)A\347?jZ=\304\'5\343?\350=\370\251\014!\343?\340\370yk8i\354?\206\236\3430\263#\327?\032\375<[fH\335?\205\365.\265\275\370\347?\242\034\270\"O\177\352?4.\204\241\202\361\303?.\300\027\344\307\201\330?\213\207\244\'s\335\344?,\322E\372\353,\301?\364\313\301(\360\223\337?\310 _\351\367\034\301?\260\341{\371K\032\352?FGjX*?\320?\250\261$\300\360{\343?r\211\374\036D\230\334?\256\304\304\233\243\360\336?\232EhX\325~\350?\321\037\023\006\254\351\356?\334\367\350mg\210\300?\213,9mP\212\343?\216;(\223q\371\343?\220\207\255\334\212\312\266?oQ`\261K\315\351?4Qx%\217a\301?\274]\374\201\346\373\304?\315\212\340\t\345\311\352?F\253\275\310C\342\324?\200\006\263\026\324Q\324?\362*\343\336)\315\323?\215\2361\233v9\353?8\261\351\007\214\240\342?\204\366\203\327k\032\305?\000\265\367\2266\217\235?\226\255\210\344\331\"\335?B\331S\253\272\345\322?\340c\305\332\327\343\325?\026\332\362\267\003\367\331?\003\227\362+\"\347\344?\204\214\307\230\267\225\300?d1<Zdn\320?\376;r\346%(\322?\364\342\'\'1>\353?.\034\3714x~\330?d\204i\335\220m\321?,\033@g\272\253\320?2\334\340\205\217\010\355?J\0233~\325]\327?\266\240\331\267\274\235\350?\2270W\013\014I\341?\000\321\340\203\332\245\345?\364\253\273\236\233\366\304?N\010{\2104\\\334?\016:R\'\237\263\334?pu\030L\305\356\271?p\370V\321\237\244\266?p\315\334\303\007\013\256??\307\265\361\034\027\345?\220\300\304~\2468\260?\344\332\275\343\225\306\342?\360s\231\025\033\000\301?\376+H\"\221\311\347?\237\271\202\300\250\224\344?\360\355\356\202\242\317\277?\347\302\213\331\034\227\355?\234\217\205G\002N\350?\217\366Q\376]\257\347?\322\306\351\207\272\206\326?\264\035e./\r\347?\251\307\365\374\330b\345?\0318_\037\t\271\345?\264L7\317\275\336\327?rK\215t\262r\356?\204fo\302t\022\357?\326\010\344P2\201\321?\260\2270\277\345D\334?QQ(\311%;\357?\300\234U\007\256g\315?\006\317\275!\324\"\350?\004\330c\337\210\354\334?\024{\240h\273\203\354?;O\204d\310\027\344?\360\272\236\"\t\251\271?\372\312e\027!\037\352?\300\300!g\221/\202?\013\264\026\210\277;\347?b6\031\337\247{\354?\200\213\230\3121\324\273?\372\273\314\016qu\341?.3\030\201\314\276\337?\320\005\261j~\240\326?fH\231\340[\014\347?\254&\277\235\315)\336?\200\3761\240\203[\331?@\270\372\210\325Q\352?\320<>\350\034\331\321?\335\342J\350\354\307\343?X\372\242<G\205\352?\316\225\303\002\023F\347?k{\272\036\221&\346?\030\014S4\016B\342?\276jq\307\213h\352?\356\021\247\222y\225\340?fc\232`\rb\330?\250V\352t\005X\265?\020\013\305\330\354P\325?X\242\233\260}@\355?P\316\307\001\375d\303?\\w\271\207<\315\354?\263\250!u\255i\344?\252\371\225\361\263\006\334?\240\222\347\363\310\036\326?\270\034pm$\227\352?\3535\331WwS\354?\\\027,\342\206\203\340?@\t\203\260\027\300\245?(\033@\326\371\024\271?\030\031\252\\\365\340\340?\334\264<\245{\267\313?8\262\353\334\347\311\274?\274\347\031&\204&\354?\260A`\225\r\031\300?+%7\330T\204\344?\332c\225\002\305\034\347?#\334d\013\363\254\341?h\005x\300\336\372\336?\364\3270\342\353A\307?@\347\276\215d\n\351?\274~\2339!\026\340?q]\266U=\356\344?`O\3550\271\033\342?P\020\236\006\021z\256?\030\246\2666\350,\354?\312\264]\327\317A\320?V\310\3247\027t\323?\216&[\'\214\217\340?@\216,-\363P\316?\274\235\312\361\260\254\330?\370\365\346\2314\323\346?\366\202\021\260V\t\357?b\366\017Q~\323\320?\300\300\333\245&\367\323?TQ\">>\242\336?d\240\302\274\007\365\310?\356\363\314n\271\215\332?\246h\024\366\333\342\323?\340\350m\233Z\035\244?\010^\310KV\362\332?\004]\220\326\246\010\301?\252\177~mYp\337?\314vGVN\215\310?.\273\r\276[y\333?\334t\246\r01\344?+DL\360\246\341\352?*\025<*\377\313\331?g\035\023\035@\244\341?\270\263Mw\301\026\334?\216z&l\242S\326?*\241R\tVe\335?\332\375\243\227z_\324?25\271\330d\033\321?\000\244w(bm\267?\226\367\342?i[\354?\237\204\364E\020\301\351?\250bf\323\200*\312?\004L\022\022\212\322\340?VQ\275\"\214\205\327?:#\214\257\227\016\321?\230M\247c\003\204\311?\306\264\252\211s\274\324?\\\260\223\335\026\323\327?\225\032\302\305\247\033\353?\204\031\017;\364o\313?\000\364\002\364\023$\320?\360\273\\H\031\262\317?F*\033\352\335\242\331?\026\027!\210\307\341\325?\200\237g\377V\312\311?,\016\246\370\343\327\350?H\373!\262\021W\327?\272\244v\324Q=\322?\274)\357\345\367w\356?\370e O\355m\342?@OS&\261\021\254?\002\225_-5Q\345?\017/\000\242\"j\357?\014G\316N\313u\322?\270LHz\037\032\272?\360\231\274\035\201\242\267?=fL)7\230\353?o\274\223`q\013\354?\325~v\030\235\356\356?\244\262\223U\234>\350?\316\314C\362\262\312\337?\336=\210\377\306J\324?t2]3aN\317?\364\234\000w\231\212\342?j\277~V\341\237\346?l\014\023:*\216\304?11\305\301\254/\353?\237Z^B \354\347?\240\322\201\361\004\002\343?\244X\022y\202F\342?M\306\224\376\373\305\357?\244\350\304\256\017\007\344?\322\306\032\010^\276\355?\364e{\371\t\243\340?o\021V\037g\001\346? xq\370\267v\327?[\304\317\201F\020\340?\354\227\357\007\337\325\305?\"5\225\265Yb\345?\200C\272\264vG\270?/\321\253\202.\201\355?W\326\341Cq\324\347?j<U|Q2\350?\364\236>+\376\372\351?y\331\023Zy\234\344?\227\007\206p_\201\356?\200\372W\010\3475\337?\246\":\"\226f\331?\260\214}\231;\002\330?\241\306Ww\314\261\342?\235S$z\357~\350?TTNd\253\254\323?\255\275\324\235\"\006\351?\357p\023\267\222b\351?\263 u\357\001\317\344?\365&Q\021\000\026\357?\271\330{\214\310>\354?\010|{N6W\310?\315B^\272\0241\346?$\0354\021\205V\312?\334\245\2575\001\215\321?\206\260\315\211u\030\353?nM+\215_B\326?\344\352\256\221k\234\307?-\352 \254pN\345?\232\243\021\177\205H\351?X/R\230\310C\334?\304\307\257\260~\337\355?u!}p\r?\354?Wly\366\304\014\355?\330+\304\331Q\261\315?.\335X\314\215\254\340?v\354Z\351gl\324?\300\212?\346K\225\302?}\032q\305\313\226\343?\220\25545|=\323?2\276\014\202a\003\330?\245$\361b\373\327\345?@\200E-\255O\355?u\355\261=\023\235\345?0\005\254\245 _\243?\313[\214h\232\r\356?nT\037Gk\243\336?\204\3664^\371-\302?\014\311kX\t\230\332?Rg\3706\300j\353?@\211Bo\256H\335? \363\340)V\304\233?H\273\375b=6\325?\222\036p\311e\n\342?m\'\023\354C\227\344?T\010\217F\0039\347?\300\321\262\256\"|\345?H\355\024G\025[\272?\n\313\216\361T\017\355?B\344&\230\300\225\321?^U\271?\276\023\355?\352\325\360\013\352\003\357? B1L\350\332\356?\326\342\314\334\253\363\330?j\333\270\031ef\352?#\307\301\276\371\032\356?\330\021+\233\342V\310?\316\207r\357,1\351?\220G\237Q\032\241\276?p!\301a;t\343?p\271+\2137\351\244?\261\t\235\016[\031\353?\355\226\222UJ\345\346?\360e\020G\310\207\333?\250`\302\303\2629\264?1#\337sh\334\347?\010\211\325^\237\230\351?\250M\207\030,\217\317?Xn\350\020\275\277\357?\000\266>\033\347V\310?\212\374\205\2021\202\345?I\345\"f_\301\341?\336\363\006)\003\211\353?\200\272Q\275\347\300\262?\300R\227\310\222\210\236?BV\037 #\363\354?p\207\373\323\005\001\304?\000\355(\026o\241v?\312\002\032\340\232\330\322?\304\010|\026\237\214\356?R+\\\201\377\376\347?\302\227\235\016\202\263\325?N\205\033\314\262\'\346?\313\037\276T@i\346?\344\nl\226\034&\322?\002\304\242\247\0242\353?\304{\2139\336-\324?\272\335\253\024\020\020\351?\312\367\223\251\257K\351?^ \202\272\302b\323?\340\327\334\306\315\311\264?]\302\321 H\333\341?G;\244\245Y<\344?7;Z\322\230\301\341?O\244\347z\373+\350?8f\025\251=k\326?B\351\353G\350\372\334?\255\211[\274@v\356?\214\273\334S\310\336\352?\230\375v\310\014\266\271?\252\351\225D\236z\346?>y\336\321\216\361\342?x=\021/\0220\345? T\233\326(;\254?\272\374/\024N]\353?y$\002\340\347\367\345?\336\331\277aKw\353?\226\277\352D\312\020\335?\214})d@\247\313?5 $\370+\364\350?\21185Ys\302\350?\222\313E\340\377\272\326?\\n\267\333yg\346?:@\013\320\372w\341?$\274^m\030\221\327?\236\177G\226t\223\330?\317o,l\342k\342?\326\016\367y\201\306\332?f\255\215G\360\202\337?l>\304*\230\273\333?\366\370\230\271SW\350?\342\262\214\363Y\314\345?J7WP\032\204\342?\030y\365\235\255I\262?\214\032\341n\235\366\314?\304\022\304\245\354\357\335?\217*\020wM5\354?\260\247\366\362&\034\253?\314L\3268`\335\314?q\334v\261\241G\340?JFy\214\353\273\357?\\\335,\261\034G\357?\256\333\241\333/\215\333?\334qq*\243]\316?\234\236*\205P\206\343?\356q\317\276z\305\356?\'\257\237\270\025\257\343?\222n\233\261\237\250\350?0\336\221=\276\300\253?\2100\312r\340\302\315?X\335LA\253\245\325?!\355\0336\310\213\346?\214\263t)V\354\311?\300\270x\302&\006\226?h\214\321\000\361\262\321?\370\222\"t\177y\260?&\343\313\265\301\204\337?\350\024\334\352\331p\356?\006\003-1\253r\342?X\327\021\217\'\273\317?^\265S\275\267\332\357?\220\031J\374\265\003\250?H\321fe)\213\313?\340{\005\271\331\025\255?{\254Y\016\033\207\355?U)\242!1\356\354?r!j6\r\226\333?p\334C\2773`\302?\004\342\267\307\234\360\326?\262\023a\2726\350\330?l\273\241\235w3\342?\344\313\376\251\343\365\326?\310\020\353\032@o\264?\276E\2376\370\362\320?\324\001\321 \005 \326?\241\226,C$.\354?\337\020\310\212\375\305\342?Q\230\033\245ut\345?\234\255h\027\274\177\347?\310\014\035L\262\320\327?b\271\022-\261F\344?\201\035~$AT\354?:\331\346\357v\232\325?/\214t\037PE\355?\310w\024\222\305\254\337?\000\350\270\350\323\355\222?\237\363\331\264\006\252\357?\027\371.\257\273N\343?<\260)\236\340\362\304?,\375\303\273\035c\333?p\3442\035\307\024\336?P>+D\017=\254?\345\t\233\036\203R\345?P\310\241\244\200&\270?x\227\t9\324\005\274?\321=\035\242\206/\342?\276R\225k\317\316\354?@\002\014Q0\222\225?u\316\201l\345\301\357?\264\244gA\2669\347?\013\346\356\273\207b\345?\353\373\331\3120J\354?\242\244kf\332?\330?\002\224\347(\007\346\353?\210M\026\3756T\357?\362\033\336\366\225\356\357?M\363U\316\250*\340?@\031\310\203\334v\317?\334)\351\020\314\223\331?\334\222\021\350`\244\303?@~\t\\\254g\251?\240\252ko\262\204\314?\300\331\325!fW\211?\255\037\207\267\033\235\347?&\000I\240\277\001\345?\352\007\247\302\253]\356?\363+%\235\371\325\340?\332\231\n\317\216C\356?\254O\343\251%\220\324?\010\360\246\342<=\326?\033V%\267\372\253\352?\261N\"q\312+\344?\220\306\377\326\270\244\354?\250l\031\007\023\325\262?\214\r6\304\225\003\327?\263\236\200\3032\350\340?\3106~l\355\216\325?d\327\243\202{\200\305?$\361\306\342\353*\330?\235/\234\247\204\276\350?\014\270\347\016\232\254\346?\010\275\312&\334f\271?KX<\237\374\t\357?\223Y\277\243\341\265\346?\203\227\205-\353\002\357?\303\267\002!\374\313\357?`l\3732j!\330?\000\371\3746\314\347u?\321\371=\017m\370\342?\372\213\205\326\213H\341?\022\222u\356Vv\351?u\230d\017\311M\352?\340y\255x\315\004\225?\230\305\037\2060\213\310?\344u\362\300;n\340?\264r>\276H\230\327?\234\351\235\0225j\352?\233\276\033\360\3638\344?\234\245\343\265\272z\356?\212\241B\001\325\370\353?=P\\\254\245%\340?\211\221\\\\I\206\345?K\352\367\325\204\203\341?\273)+j>\304\353?\0308\227\3124?\344?5\367\321\304\256\214\344?5S\352N\300-\350?\3470o\303\266\322\344?\233\257p\362\030W\351?T\244\322\"\272\003\320?\020y\004ot_\253?\020S\275\216\371$\324?h\346Y\240\276\305\266?8)\210\275\035\360\274?\304\253K\246jU\303?\350\010\211\376\016\226\301?\354\256@vVp\311?\362\345\336\213\214T\331?\300!?m\362\237\305?\030\276\0216]k\344?1C\241\241\331\'\351?\356\372\246\332\346b\341?\240\346> \370\233\312?F\327\343\0334M\332?\013\275\206q\327\272\346?\030\310\311\321+\210\337?\310x\023\332\300\236\312?~\205\333\ry\267\320?f\005\321\371\327\331\346?\r\327\221\034\350I\341?n,\343\306\024\356\350?f$\031\027\253\212\351?\273x\243[\030\004\341?\017;\255\343\370\322\356?\263s\360\252\327\215\354?\204\0028\213\2726\322?*$\252\022\343^\327?\" \363\013\315\212\352?\346\247\240U\234\\\321?\356Ia\353\026\320\353?\220\226\377a\250\t\323?\300`\266\311\260\237\271?h4I\t\201\277\315?\303\252\347\231:\275\344?p\302\310T \362\320?\206\023\036\224B\260\335?\245\025\314_k\214\341?\340\361U|\324\353\333?*\030_\220\250T\350?\030\200a\363\370\231\305?\250\237\217\201Jc\310?\246\372z`\r\311\325?\375ZM-\"\'\343?\036\223\003\034\205\344\322?@\217\242F\253/\256?{\333\030\374\277\'\357?@\213P\247E\235\237?d6B.\302U\325?\206\320\314j\376|\327?F\326&\263\302f\322?\310{\355\305\352\016\347?p>(\210\347\353\262?\352z\005\335\245\030\351?\371\224%\234\347\353\357?D\357b\336\">\322?B\311t\331\257\261\355?Q\211\034\263y\351\347?\020\213\341<\333\007\327?\324R\333\365-\"\353?\220G=\233rS\334?\000\346!\262\235D\322?@[H\3655(\220?\255\302\354\021.G\356?0>\253_\356\327\350?\013\311\374\271\315\235\353?\350\236\314\027\017\026\307?\271\005\272]z\355\342?\000;\013\206KT\300?/26a\320@\356?\365\200\244\\\343\201\347?\265\351D\3353y\350?\330tj\021\302T\316?P\333J\301\266\264\263?\030\017\344\325\\\031\333?\002\022\004\3518\267\325?x\376\264;H\347\352?\301DwlZ+\345?\014_h~\224?\312?\237{~\300\213\255\342?\213\024\217\254\001\203\342?\252M\263\243t\233\330?z\307c\343\2452\321?\264\226\231\355\346\272\330?\320\246s\334\306\021\314?\226\305\334$%f\344?\002SM\001p\315\352?\372\023\2606]\177\320?\270\261\200\222N3\322?x\315\350\233\301-\330?`\217\260\210f\001\334?.\210\256\300@\244\352?\030\225\327\261\354\227\317?\366>S\3573\251\357?\010\204:\3642\213\301?\223\010\024\3734\271\355?\354\350\365\333\025\224\326?\340\0109\255;\344\301?\350\344\027\030\211L\304?\200\\\325\303w/\244?\212(\304\237?r\330?0`O0\025q\276??\r\220a \220\354?"
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "Cast/x"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "tensors/normalize_tensors/component_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1024
          }
          dim {
            size: 1
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "Cast"
  input: "tensors/normalize_tensors/component_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "TensorSliceDataset"
  input: "count"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "/cpu:0"
      }
    }
  }
}
node {
  name: "MultiDeviceIterator"
  op: "MultiDeviceIterator"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "devices"
    value {
      list {
        s: "/replica:0/task:0/device:CPU:0"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MultiDeviceIteratorInit/max_buffer_size"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "MultiDeviceIteratorInit"
  op: "MultiDeviceIteratorInit"
  input: "ModelDataset"
  input: "MultiDeviceIterator"
  input: "MultiDeviceIteratorInit/max_buffer_size"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MultiDeviceIteratorToStringHandle"
  op: "MultiDeviceIteratorToStringHandle"
  input: "MultiDeviceIterator"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "GeneratorDataset"
  op: "GeneratorDataset"
  input: "Const"
  input: "MultiDeviceIteratorToStringHandle"
  input: "Const"
  input: "MultiDeviceIteratorInit"
  input: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Tfinalize_func_args"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tinit_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tnext_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "finalize_func"
    value {
      func {
        name: "__inference__remote_finalize_func_134"
      }
    }
  }
  attr {
    key: "init_func"
    value {
      func {
        name: "__inference__remote_init_func_104"
      }
    }
  }
  attr {
    key: "next_func"
    value {
      func {
        name: "__inference__remote_next_func_123"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "GeneratorDataset_1"
  op: "GeneratorDataset"
  input: "Const"
  input: "MultiDeviceIteratorToStringHandle"
  input: "Const"
  input: "MultiDeviceIteratorInit"
  input: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Tfinalize_func_args"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tinit_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tnext_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "finalize_func"
    value {
      func {
        name: "__inference__remote_finalize_func_134"
      }
    }
  }
  attr {
    key: "init_func"
    value {
      func {
        name: "__inference__remote_init_func_104"
      }
    }
  }
  attr {
    key: "next_func"
    value {
      func {
        name: "__inference__remote_next_func_123"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "GeneratorDataset_1"
  input: "buffer_size"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "PrefetchDataset"
  input: "IteratorV2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^MakeIterator"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Identity/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "Identity/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Identity_1"
  op: "Identity"
  input: "Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4803844690322876
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4803844690322876
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VarHandleOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/kernel"
    }
  }
}
node {
  name: "dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VarHandleOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/bias"
    }
  }
}
node {
  name: "dense/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "IteratorGetNext"
  input: "dense/MatMul/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_1/kernel/Initializer/random_uniform/max"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_1/kernel/Initializer/random_uniform/mul"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VarHandleOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/kernel"
    }
  }
}
node {
  name: "dense_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Initializer/random_uniform"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VarHandleOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/bias"
    }
  }
}
node {
  name: "dense_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "dense_1/bias/Initializer/zeros"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dense/Relu"
  input: "dense_1/MatMul/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Sigmoid"
  op: "Sigmoid"
  input: "dense_1/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Const"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dense_1/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dense_1/BiasAdd"
  input: "loss/dense_1_loss/logistic_loss/zeros_like"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Select"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "dense_1/BiasAdd"
  input: "loss/dense_1_loss/logistic_loss/zeros_like"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Neg"
  op: "Neg"
  input: "dense_1/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Select_1"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "loss/dense_1_loss/logistic_loss/Neg"
  input: "dense_1/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/mul"
  op: "Mul"
  input: "dense_1/BiasAdd"
  input: "Cast_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/sub"
  op: "Sub"
  input: "loss/dense_1_loss/logistic_loss/Select"
  input: "loss/dense_1_loss/logistic_loss/mul"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Exp"
  op: "Exp"
  input: "loss/dense_1_loss/logistic_loss/Select_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Log1p"
  op: "Log1p"
  input: "loss/dense_1_loss/logistic_loss/Exp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss"
  op: "Add"
  input: "loss/dense_1_loss/logistic_loss/sub"
  input: "loss/dense_1_loss/logistic_loss/Log1p"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean/reduction_indices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean"
  op: "Mean"
  input: "loss/dense_1_loss/logistic_loss"
  input: "loss/dense_1_loss/Mean/reduction_indices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/Const"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  input: "^loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^loss/dense_1_loss/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights/ones_like"
  op: "Fill"
  input: "loss/dense_1_loss/weighted_loss/broadcast_weights/ones_like/Shape"
  input: "loss/dense_1_loss/weighted_loss/broadcast_weights/ones_like/Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/broadcast_weights"
  op: "Mul"
  input: "loss/dense_1_loss/weighted_loss/Const"
  input: "loss/dense_1_loss/weighted_loss/broadcast_weights/ones_like"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/weighted_loss/Mul"
  op: "Mul"
  input: "loss/dense_1_loss/Mean"
  input: "loss/dense_1_loss/weighted_loss/broadcast_weights"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Sum"
  op: "Sum"
  input: "loss/dense_1_loss/weighted_loss/Mul"
  input: "loss/dense_1_loss/Const_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/num_elements"
  op: "Size"
  input: "loss/dense_1_loss/weighted_loss/Mul"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_1_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/dense_1_loss/num_elements"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_2"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_1_loss/Sum"
  input: "loss/dense_1_loss/Const_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/value"
  op: "DivNoNan"
  input: "loss/dense_1_loss/Sum_1"
  input: "loss/dense_1_loss/num_elements/Cast"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_1_loss/value"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/Shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/grad_ys_0"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/gradients/Fill"
  op: "Fill"
  input: "training/gradients/Shape"
  input: "training/gradients/grad_ys_0"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/gradients/Fill"
  input: "loss/dense_1_loss/value"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/gradients/Fill"
  input: "loss/mul/x"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/mul_grad/Mul"
  input: "^training/gradients/loss/mul_grad/Mul_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/mul_grad/Mul"
  input: "^training/gradients/loss/mul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/mul_grad/Mul_1"
  input: "^training/gradients/loss/mul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Shape_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/loss/dense_1_loss/value_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/value_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/gradients/loss/mul_grad/tuple/control_dependency_1"
  input: "loss/dense_1_loss/num_elements/Cast"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Sum"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/value_grad/div_no_nan"
  input: "training/gradients/loss/dense_1_loss/value_grad/BroadcastGradientArgs"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/value_grad/Sum"
  input: "training/gradients/loss/dense_1_loss/value_grad/Shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/Sum_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/gradients/loss/dense_1_loss/value_grad/Neg"
  input: "loss/dense_1_loss/num_elements/Cast"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/gradients/loss/dense_1_loss/value_grad/div_no_nan_1"
  input: "loss/dense_1_loss/num_elements/Cast"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/mul"
  op: "Mul"
  input: "training/gradients/loss/mul_grad/tuple/control_dependency_1"
  input: "training/gradients/loss/dense_1_loss/value_grad/div_no_nan_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/value_grad/mul"
  input: "training/gradients/loss/dense_1_loss/value_grad/BroadcastGradientArgs:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/value_grad/Sum_1"
  input: "training/gradients/loss/dense_1_loss/value_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/value_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/value_grad/Reshape_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/value_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/value_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/value_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/value_grad/Reshape_1"
  input: "^training/gradients/loss/dense_1_loss/value_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/value_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/value_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/Sum_1_grad/Reshape/shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_1_grad/Const"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/gradients/loss/dense_1_loss/Sum_1_grad/Reshape"
  input: "training/gradients/loss/dense_1_loss/Sum_1_grad/Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_grad/Reshape/shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/Sum_1_grad/Tile"
  input: "training/gradients/loss/dense_1_loss/Sum_grad/Reshape/shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/weighted_loss/Mul"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/gradients/loss/dense_1_loss/Sum_grad/Reshape"
  input: "training/gradients/loss/dense_1_loss/Sum_grad/Shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/weighted_loss/broadcast_weights"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/gradients/loss/dense_1_loss/Sum_grad/Tile"
  input: "loss/dense_1_loss/weighted_loss/broadcast_weights"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Mul"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/BroadcastGradientArgs"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Sum"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Mean"
  input: "training/gradients/loss/dense_1_loss/Sum_grad/Tile"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Mul_1"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Sum_1"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape_1"
  input: "^training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Size"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_1_loss/Mean/reduction_indices"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Size"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/add"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Size"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/range/start"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/range/delta"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/range"
  op: "Range"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/range/start"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Size"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/range/delta"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Fill/value"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Fill/value"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/range"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/mod"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Fill"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/DynamicStitch"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/DynamicStitch"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Const"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Shape_3"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum_1/y"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Prod"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Maximum_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/floordiv_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Tile"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/Cast"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss/sub"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss/Log1p"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Sum"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/BroadcastGradientArgs"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/BroadcastGradientArgs:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Sum_1"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss/Select"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss/mul"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/BroadcastGradientArgs"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Neg"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/control_dependency_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add/x"
  input: "loss/dense_1_loss/logistic_loss/Exp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "training/gradients/loss/dense_1_loss/logistic_loss_grad/tuple/control_dependency_1"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/Reciprocal"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dense_1/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/zeros_like"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/zeros_like"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/control_dependency"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select_1"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_1/BiasAdd"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "Cast_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "Cast_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/BroadcastGradientArgs"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dense_1/BiasAdd"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/sub_grad/tuple/control_dependency_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul_1"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum_1"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape_1"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/mul"
  input: "loss/dense_1_loss/logistic_loss/Exp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "loss/dense_1_loss/logistic_loss/Neg"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Exp_grad/mul"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/zeros_like"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/zeros_like"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Exp_grad/mul"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select_1"
  input: "^training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/loss/dense_1_loss/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/control_dependency"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/AddN"
  op: "AddN"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/mul_grad/tuple/control_dependency"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "training/gradients/loss/dense_1_loss/logistic_loss/Neg_grad/Neg"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/gradients/AddN"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/AddN"
  input: "^training/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/AddN"
  input: "^training/gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^training/gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "dense_1/MatMul/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense/Relu"
  input: "training/gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/dense_1/MatMul_grad/MatMul"
  input: "^training/gradients/dense_1/MatMul_grad/MatMul_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/dense_1/MatMul_grad/MatMul"
  input: "^training/gradients/dense_1/MatMul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/dense_1/MatMul_grad/MatMul_1"
  input: "^training/gradients/dense_1/MatMul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/gradients/dense_1/MatMul_grad/tuple/control_dependency"
  input: "dense/Relu"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/gradients/dense/Relu_grad/ReluGrad"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^training/gradients/dense/Relu_grad/ReluGrad"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/dense/Relu_grad/ReluGrad"
  input: "^training/gradients/dense/BiasAdd_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^training/gradients/dense/BiasAdd_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "dense/MatMul/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "IteratorGetNext"
  input: "training/gradients/dense/BiasAdd_grad/tuple/control_dependency"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/dense/MatMul_grad/MatMul"
  input: "^training/gradients/dense/MatMul_grad/MatMul_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/gradients/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/dense/MatMul_grad/MatMul"
  input: "^training/gradients/dense/MatMul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/gradients/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/dense/MatMul_grad/MatMul_1"
  input: "^training/gradients/dense/MatMul_grad/tuple/group_deps"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/gradients/dense/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/Identity"
  op: "Identity"
  input: "training/gradients/dense/MatMul_grad/tuple/control_dependency_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/Identity_1"
  op: "Identity"
  input: "training/gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "training/Identity_2"
  op: "Identity"
  input: "training/gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Identity_3"
  op: "Identity"
  input: "training/gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/GradientDescent/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/GradientDescent/update_0/update_dense/kernel/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense/kernel"
  input: "training/GradientDescent/learning_rate"
  input: "training/Identity"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/GradientDescent/update_0_1/update_dense/bias/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense/bias"
  input: "training/GradientDescent/learning_rate"
  input: "training/Identity_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/GradientDescent/update_0_2/update_dense_1/kernel/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense_1/kernel"
  input: "training/GradientDescent/learning_rate"
  input: "training/Identity_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/GradientDescent/update_0_3/update_dense_1/bias/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense_1/bias"
  input: "training/GradientDescent/learning_rate"
  input: "training/Identity_3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/GradientDescent/update_0_4/update"
  op: "NoOp"
  input: "^training/GradientDescent/update_0/update_dense/kernel/ResourceApplyGradientDescent"
  input: "^training/GradientDescent/update_0_1/update_dense/bias/ResourceApplyGradientDescent"
  input: "^training/GradientDescent/update_0_2/update_dense_1/kernel/ResourceApplyGradientDescent"
  input: "^training/GradientDescent/update_0_3/update_dense_1/bias/ResourceApplyGradientDescent"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "training/GradientDescent/update_0_5/Const"
  op: "Const"
  input: "^training/GradientDescent/update_0_4/update"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/GradientDescent/update_0_5/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/GradientDescent/update_0_5/Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/GradientDescent/update_0_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^training/GradientDescent/update_0_4/update"
  input: "^training/GradientDescent/update_0_5/AssignAddVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training_1/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^training/GradientDescent/update_0_5/AssignAddVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "Identity_2"
  op: "Identity"
  input: "loss/mul"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_1"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_2"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_3"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_4"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/LogicalAnd"
  input: "report_uninitialized_variables/LogicalAnd_1"
  input: "report_uninitialized_variables/LogicalAnd_2"
  input: "report_uninitialized_variables/LogicalAnd_3"
  input: "report_uninitialized_variables/LogicalAnd_4"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "global_step"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "checkpoint_initializer/prefix"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "tmp/model_dir\\keras\\keras_model.ckpt"
      }
    }
  }
}
node {
  name: "checkpoint_initializer/tensor_names"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/bias"
      }
    }
  }
}
node {
  name: "checkpoint_initializer/shape_and_slices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer"
  op: "RestoreV2"
  input: "checkpoint_initializer/prefix"
  input: "checkpoint_initializer/tensor_names"
  input: "checkpoint_initializer/shape_and_slices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Identity_3"
  op: "Identity"
  input: "checkpoint_initializer"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "Identity_3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  input: "^AssignVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^AssignVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "checkpoint_initializer_1/prefix"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "tmp/model_dir\\keras\\keras_model.ckpt"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_1/tensor_names"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_1/shape_and_slices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_1"
  op: "RestoreV2"
  input: "checkpoint_initializer_1/prefix"
  input: "checkpoint_initializer_1/tensor_names"
  input: "checkpoint_initializer_1/shape_and_slices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Identity_4"
  op: "Identity"
  input: "checkpoint_initializer_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "Identity_4"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "dense/kernel"
  input: "^AssignVariableOp_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "group_deps_2"
  op: "NoOp"
  input: "^AssignVariableOp_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "checkpoint_initializer_2/prefix"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "tmp/model_dir\\keras\\keras_model.ckpt"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_2/tensor_names"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense_1/bias"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_2/shape_and_slices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_2"
  op: "RestoreV2"
  input: "checkpoint_initializer_2/prefix"
  input: "checkpoint_initializer_2/tensor_names"
  input: "checkpoint_initializer_2/shape_and_slices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Identity_5"
  op: "Identity"
  input: "checkpoint_initializer_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "Identity_5"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  input: "^AssignVariableOp_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "group_deps_3"
  op: "NoOp"
  input: "^AssignVariableOp_2"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "checkpoint_initializer_3/prefix"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "tmp/model_dir\\keras\\keras_model.ckpt"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_3/tensor_names"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense_1/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_3/shape_and_slices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_3"
  op: "RestoreV2"
  input: "checkpoint_initializer_3/prefix"
  input: "checkpoint_initializer_3/tensor_names"
  input: "checkpoint_initializer_3/shape_and_slices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Identity_6"
  op: "Identity"
  input: "checkpoint_initializer_3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "Identity_6"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  input: "^AssignVariableOp_3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "group_deps_4"
  op: "NoOp"
  input: "^AssignVariableOp_3"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss_1"
      }
    }
  }
}
node {
  name: "loss_1"
  op: "ScalarSummary"
  input: "loss_1/tags"
  input: "Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "group_deps_5"
  op: "NoOp"
  input: "^group_deps"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_6"
  op: "NoOp"
  input: "^global_step/Assign"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^group_deps_1"
  input: "^group_deps_2"
  input: "^group_deps_3"
  input: "^group_deps_4"
  input: "^group_deps_6"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps_7/NoOp"
  op: "NoOp"
  input: "^init_1"
}
node {
  name: "group_deps_7/NoOp_1"
  op: "NoOp"
  input: "^init"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_7"
  op: "NoOp"
  input: "^group_deps_7/NoOp"
  input: "^group_deps_7/NoOp_1"
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_1"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_2"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_3"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_4"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/LogicalAnd"
  input: "report_uninitialized_variables_1/LogicalAnd_1"
  input: "report_uninitialized_variables_1/LogicalAnd_2"
  input: "report_uninitialized_variables_1/LogicalAnd_3"
  input: "report_uninitialized_variables_1/LogicalAnd_4"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "global_step"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_8"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_7353a15c56e34d37b40006ca8cfc9a95/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "dense/bias"
        string_val: "dense/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "save/Identity_11"
  input: "save/Identity_13"
  input: "save/Identity_15"
  input: "save/Identity_17"
  input: "save/Identity_19"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "dense/bias"
        string_val: "dense/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "save/Identity_21"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  input: "^save/AssignVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "save/Identity_22"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "dense/kernel"
  input: "^save/AssignVariableOp_1"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_1"
  op: "NoOp"
  input: "^save/AssignVariableOp_1"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "save/Identity_23"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  input: "^save/AssignVariableOp_2"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_2"
  op: "NoOp"
  input: "^save/AssignVariableOp_2"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "save/Identity_24"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  input: "^save/AssignVariableOp_3"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_3"
  op: "NoOp"
  input: "^save/AssignVariableOp_3"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:4"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_25"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^save/AssignVariableOp_4"
  device: "/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/group_deps_4"
  op: "NoOp"
  input: "^save/AssignVariableOp_4"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/group_deps"
  input: "^save/group_deps_1"
  input: "^save/group_deps_2"
  input: "^save/group_deps_3"
  input: "^save/group_deps_4"
  device: "/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
  device: "/replica:0/task:0/device:CPU:0"
}
library {
  function {
    signature {
      name: "__inference__init_func_98"
      input_arg {
        name: "identity_multideviceiteratortostringhandle"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_multideviceiteratortostringhandle"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference__remote_init_func_104"
      input_arg {
        name: "remotecall_const"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_multideviceiteratortostringhandle"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "RemoteCall"
    }
    node_def {
      name: "RemoteCall"
      op: "RemoteCall"
      input: "remotecall_const"
      input: "remotecall_multideviceiteratortostringhandle"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__init_func_98"
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RemoteCall:output:0"
      input: "^RemoteCall"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "RemoteCall"
      value: "RemoteCall"
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference__remote_finalize_func_134"
      input_arg {
        name: "string_handle"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_const"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "RemoteCall"
    }
    node_def {
      name: "RemoteCall"
      op: "RemoteCall"
      input: "remotecall_const"
      input: "string_handle"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__finalize_func_128"
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RemoteCall:output:0"
      input: "^RemoteCall"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "RemoteCall"
      value: "RemoteCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "string_handle"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference__next_func_114"
      input_arg {
        name: "string_handle"
        type: DT_STRING
      }
      input_arg {
        name: "multideviceiteratorgetnextfromshard_multideviceiteratorinit"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "MultiDeviceIteratorGetNextFromShard"
      control_output: "MultiDeviceIteratorFromStringHandle"
    }
    node_def {
      name: "MultiDeviceIteratorFromStringHandle"
      op: "MultiDeviceIteratorFromStringHandle"
      input: "string_handle"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "MultiDeviceIteratorGetNextFromShard/shard_num"
      op: "Const"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "MultiDeviceIteratorGetNextFromShard"
      op: "MultiDeviceIteratorGetNextFromShard"
      input: "MultiDeviceIteratorFromStringHandle:multi_device_iterator:0"
      input: "MultiDeviceIteratorGetNextFromShard/shard_num:output:0"
      input: "multideviceiteratorgetnextfromshard_multideviceiteratorinit"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MultiDeviceIteratorGetNextFromShard:components:0"
      input: "^MultiDeviceIteratorGetNextFromShard"
      input: "^MultiDeviceIteratorFromStringHandle"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "MultiDeviceIteratorGetNextFromShard:components:1"
      input: "^MultiDeviceIteratorGetNextFromShard"
      input: "^MultiDeviceIteratorFromStringHandle"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "MultiDeviceIteratorFromStringHandle"
      value: "MultiDeviceIteratorFromStringHandle"
    }
    control_ret {
      key: "MultiDeviceIteratorGetNextFromShard"
      value: "MultiDeviceIteratorGetNextFromShard"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "string_handle"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference__remote_next_func_123"
      input_arg {
        name: "string_handle"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_const"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_multideviceiteratorinit"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "RemoteCall"
    }
    node_def {
      name: "RemoteCall"
      op: "RemoteCall"
      input: "remotecall_const"
      input: "string_handle"
      input: "remotecall_multideviceiteratorinit"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__next_func_114"
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RemoteCall:output:0"
      input: "^RemoteCall"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "RemoteCall:output:1"
      input: "^RemoteCall"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    attr {
      key: "experimental_ints_on_device"
      value {
        b: true
      }
    }
    control_ret {
      key: "RemoteCall"
      value: "RemoteCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "string_handle"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference__finalize_func_128"
      input_arg {
        name: "unused_string_handle"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Const:output:0"
      device: "/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "unused_string_handle"
          }
        }
      }
    }
  }
}
versions {
  producer: 38
  min_consumer: 12
}
